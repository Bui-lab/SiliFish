//Downloaded from https://unpkg.com/3d-force-graph@1
//Bundled file: https://unpkg.com/3d-force-graph@1.71.2/dist/3d-force-graph.min.js
//Copyright owner: https://github.com/vasturiano
//License: https://github.com/vasturiano/3d-force-graph/blob/fe9a833bc659303d21c8ffa18f2afd01587443ba/LICENSE
// Version 1.71.2 3d-force-graph - https://github.com/vasturiano/3d-force-graph
!function (t, e) { "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).ForceGraph3D = e() }(this, (function () {
    "use strict"; function t(t, e) { var n = Object.keys(t); if (Object.getOwnPropertySymbols) { var i = Object.getOwnPropertySymbols(t); e && (i = i.filter((function (e) { return Object.getOwnPropertyDescriptor(t, e).enumerable }))), n.push.apply(n, i) } return n } function e(e) { for (var i = 1; i < arguments.length; i++) { var r = null != arguments[i] ? arguments[i] : {}; i % 2 ? t(Object(r), !0).forEach((function (t) { n(e, t, r[t]) })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(r)) : t(Object(r)).forEach((function (t) { Object.defineProperty(e, t, Object.getOwnPropertyDescriptor(r, t)) })) } return e } function n(t, e, n) { return (e = function (t) { var e = function (t, e) { if ("object" != typeof t || null === t) return t; var n = t[Symbol.toPrimitive]; if (void 0 !== n) { var i = n.call(t, e || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value.") } return ("string" === e ? String : Number)(t) }(t, "string"); return "symbol" == typeof e ? e : String(e) }(e)) in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t } function i(t) { return function (t) { if (Array.isArray(t)) return r(t) }(t) || function (t) { if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t) }(t) || function (t, e) { if (!t) return; if ("string" == typeof t) return r(t, e); var n = Object.prototype.toString.call(t).slice(8, -1); "Object" === n && t.constructor && (n = t.constructor.name); if ("Map" === n || "Set" === n) return Array.from(t); if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return r(t, e) }(t) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function r(t, e) { (null == e || e > t.length) && (e = t.length); for (var n = 0, i = new Array(e); n < e; n++)i[n] = t[n]; return i } !function (t, e) { void 0 === e && (e = {}); var n = e.insertAt; if (t && "undefined" != typeof document) { var i = document.head || document.getElementsByTagName("head")[0], r = document.createElement("style"); r.type = "text/css", "top" === n && i.firstChild ? i.insertBefore(r, i.firstChild) : i.appendChild(r), r.styleSheet ? r.styleSheet.cssText = t : r.appendChild(document.createTextNode(t)) } }(".graph-info-msg {\n  top: 50%;\n  width: 100%;\n  text-align: center;\n  color: lavender;\n  opacity: 0.7;\n  font-size: 22px;\n  position: absolute;\n  font-family: Sans-serif;\n}\n\n.scene-container .clickable {\n  cursor: pointer;\n}\n\n.scene-container .grabbable {\n  cursor: move;\n  cursor: grab;\n  cursor: -moz-grab;\n  cursor: -webkit-grab;\n}\n\n.scene-container .grabbable:active {\n  cursor: grabbing;\n  cursor: -moz-grabbing;\n  cursor: -webkit-grabbing;\n}"); const a = "150", o = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 }, s = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 }, l = 0, c = 1, u = 2, h = 1, d = 2, p = 3, f = 0, m = 1, g = 2, v = 0, _ = 1, y = 2, x = 3, b = 4, w = 5, M = 100, S = 101, E = 102, T = 103, A = 104, C = 200, L = 201, P = 202, R = 203, D = 204, O = 205, I = 206, N = 207, k = 208, z = 209, U = 210, F = 0, B = 1, j = 2, G = 3, H = 4, V = 5, W = 6, q = 7, X = 0, Y = 1, $ = 2, Z = 0, J = 1, K = 2, Q = 3, tt = 4, et = 5, nt = 301, it = 302, rt = 303, at = 304, ot = 306, st = 1e3, lt = 1001, ct = 1002, ut = 1003, ht = 1004, dt = 1005, pt = 1006, ft = 1007, mt = 1008, gt = 1009, vt = 1010, _t = 1011, yt = 1012, xt = 1013, bt = 1014, wt = 1015, Mt = 1016, St = 1017, Et = 1018, Tt = 1020, At = 1021, Ct = 1023, Lt = 1024, Pt = 1025, Rt = 1026, Dt = 1027, Ot = 1028, It = 1029, Nt = 1030, kt = 1031, zt = 1033, Ut = 33776, Ft = 33777, Bt = 33778, jt = 33779, Gt = 35840, Ht = 35841, Vt = 35842, Wt = 35843, qt = 36196, Xt = 37492, Yt = 37496, $t = 37808, Zt = 37809, Jt = 37810, Kt = 37811, Qt = 37812, te = 37813, ee = 37814, ne = 37815, ie = 37816, re = 37817, ae = 37818, oe = 37819, se = 37820, le = 37821, ce = 36492, ue = 36283, he = 36284, de = 36285, pe = 36286, fe = 3e3, me = 3001, ge = 3201, ve = 0, _e = 1, ye = "srgb", xe = "srgb-linear", be = "display-p3", we = 7680, Me = "300 es", Se = 1035; class Ee { addEventListener(t, e) { void 0 === this._listeners && (this._listeners = {}); const n = this._listeners; void 0 === n[t] && (n[t] = []), -1 === n[t].indexOf(e) && n[t].push(e) } hasEventListener(t, e) { if (void 0 === this._listeners) return !1; const n = this._listeners; return void 0 !== n[t] && -1 !== n[t].indexOf(e) } removeEventListener(t, e) { if (void 0 === this._listeners) return; const n = this._listeners[t]; if (void 0 !== n) { const t = n.indexOf(e); -1 !== t && n.splice(t, 1) } } dispatchEvent(t) { if (void 0 === this._listeners) return; const e = this._listeners[t.type]; if (void 0 !== e) { t.target = this; const n = e.slice(0); for (let e = 0, i = n.length; e < i; e++)n[e].call(this, t); t.target = null } } } const Te = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"], Ae = Math.PI / 180, Ce = 180 / Math.PI; function Le() { const t = 4294967295 * Math.random() | 0, e = 4294967295 * Math.random() | 0, n = 4294967295 * Math.random() | 0, i = 4294967295 * Math.random() | 0; return (Te[255 & t] + Te[t >> 8 & 255] + Te[t >> 16 & 255] + Te[t >> 24 & 255] + "-" + Te[255 & e] + Te[e >> 8 & 255] + "-" + Te[e >> 16 & 15 | 64] + Te[e >> 24 & 255] + "-" + Te[63 & n | 128] + Te[n >> 8 & 255] + "-" + Te[n >> 16 & 255] + Te[n >> 24 & 255] + Te[255 & i] + Te[i >> 8 & 255] + Te[i >> 16 & 255] + Te[i >> 24 & 255]).toLowerCase() } function Pe(t, e, n) { return Math.max(e, Math.min(n, t)) } function Re(t, e, n) { return (1 - n) * t + n * e } function De(t) { return 0 == (t & t - 1) && 0 !== t } function Oe(t) { return Math.pow(2, Math.floor(Math.log(t) / Math.LN2)) } function Ie(t, e) { switch (e.constructor) { case Float32Array: return t; case Uint16Array: return t / 65535; case Uint8Array: return t / 255; case Int16Array: return Math.max(t / 32767, -1); case Int8Array: return Math.max(t / 127, -1); default: throw new Error("Invalid component type.") } } function Ne(t, e) { switch (e.constructor) { case Float32Array: return t; case Uint16Array: return Math.round(65535 * t); case Uint8Array: return Math.round(255 * t); case Int16Array: return Math.round(32767 * t); case Int8Array: return Math.round(127 * t); default: throw new Error("Invalid component type.") } } class ke { constructor(t = 0, e = 0) { ke.prototype.isVector2 = !0, this.x = t, this.y = e } get width() { return this.x } set width(t) { this.x = t } get height() { return this.y } set height(t) { this.y = t } set(t, e) { return this.x = t, this.y = e, this } setScalar(t) { return this.x = t, this.y = t, this } setX(t) { return this.x = t, this } setY(t) { return this.y = t, this } setComponent(t, e) { switch (t) { case 0: this.x = e; break; case 1: this.y = e; break; default: throw new Error("index is out of range: " + t) }return this } getComponent(t) { switch (t) { case 0: return this.x; case 1: return this.y; default: throw new Error("index is out of range: " + t) } } clone() { return new this.constructor(this.x, this.y) } copy(t) { return this.x = t.x, this.y = t.y, this } add(t) { return this.x += t.x, this.y += t.y, this } addScalar(t) { return this.x += t, this.y += t, this } addVectors(t, e) { return this.x = t.x + e.x, this.y = t.y + e.y, this } addScaledVector(t, e) { return this.x += t.x * e, this.y += t.y * e, this } sub(t) { return this.x -= t.x, this.y -= t.y, this } subScalar(t) { return this.x -= t, this.y -= t, this } subVectors(t, e) { return this.x = t.x - e.x, this.y = t.y - e.y, this } multiply(t) { return this.x *= t.x, this.y *= t.y, this } multiplyScalar(t) { return this.x *= t, this.y *= t, this } divide(t) { return this.x /= t.x, this.y /= t.y, this } divideScalar(t) { return this.multiplyScalar(1 / t) } applyMatrix3(t) { const e = this.x, n = this.y, i = t.elements; return this.x = i[0] * e + i[3] * n + i[6], this.y = i[1] * e + i[4] * n + i[7], this } min(t) { return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this } max(t) { return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this } clamp(t, e) { return this.x = Math.max(t.x, Math.min(e.x, this.x)), this.y = Math.max(t.y, Math.min(e.y, this.y)), this } clampScalar(t, e) { return this.x = Math.max(t, Math.min(e, this.x)), this.y = Math.max(t, Math.min(e, this.y)), this } clampLength(t, e) { const n = this.length(); return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n))) } floor() { return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this } ceil() { return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this } round() { return this.x = Math.round(this.x), this.y = Math.round(this.y), this } roundToZero() { return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this } negate() { return this.x = -this.x, this.y = -this.y, this } dot(t) { return this.x * t.x + this.y * t.y } cross(t) { return this.x * t.y - this.y * t.x } lengthSq() { return this.x * this.x + this.y * this.y } length() { return Math.sqrt(this.x * this.x + this.y * this.y) } manhattanLength() { return Math.abs(this.x) + Math.abs(this.y) } normalize() { return this.divideScalar(this.length() || 1) } angle() { return Math.atan2(-this.y, -this.x) + Math.PI } distanceTo(t) { return Math.sqrt(this.distanceToSquared(t)) } distanceToSquared(t) { const e = this.x - t.x, n = this.y - t.y; return e * e + n * n } manhattanDistanceTo(t) { return Math.abs(this.x - t.x) + Math.abs(this.y - t.y) } setLength(t) { return this.normalize().multiplyScalar(t) } lerp(t, e) { return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this } lerpVectors(t, e, n) { return this.x = t.x + (e.x - t.x) * n, this.y = t.y + (e.y - t.y) * n, this } equals(t) { return t.x === this.x && t.y === this.y } fromArray(t, e = 0) { return this.x = t[e], this.y = t[e + 1], this } toArray(t = [], e = 0) { return t[e] = this.x, t[e + 1] = this.y, t } fromBufferAttribute(t, e) { return this.x = t.getX(e), this.y = t.getY(e), this } rotateAround(t, e) { const n = Math.cos(e), i = Math.sin(e), r = this.x - t.x, a = this.y - t.y; return this.x = r * n - a * i + t.x, this.y = r * i + a * n + t.y, this } random() { return this.x = Math.random(), this.y = Math.random(), this } *[Symbol.iterator]() { yield this.x, yield this.y } } class ze { constructor() { ze.prototype.isMatrix3 = !0, this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1] } set(t, e, n, i, r, a, o, s, l) { const c = this.elements; return c[0] = t, c[1] = i, c[2] = o, c[3] = e, c[4] = r, c[5] = s, c[6] = n, c[7] = a, c[8] = l, this } identity() { return this.set(1, 0, 0, 0, 1, 0, 0, 0, 1), this } copy(t) { const e = this.elements, n = t.elements; return e[0] = n[0], e[1] = n[1], e[2] = n[2], e[3] = n[3], e[4] = n[4], e[5] = n[5], e[6] = n[6], e[7] = n[7], e[8] = n[8], this } extractBasis(t, e, n) { return t.setFromMatrix3Column(this, 0), e.setFromMatrix3Column(this, 1), n.setFromMatrix3Column(this, 2), this } setFromMatrix4(t) { const e = t.elements; return this.set(e[0], e[4], e[8], e[1], e[5], e[9], e[2], e[6], e[10]), this } multiply(t) { return this.multiplyMatrices(this, t) } premultiply(t) { return this.multiplyMatrices(t, this) } multiplyMatrices(t, e) { const n = t.elements, i = e.elements, r = this.elements, a = n[0], o = n[3], s = n[6], l = n[1], c = n[4], u = n[7], h = n[2], d = n[5], p = n[8], f = i[0], m = i[3], g = i[6], v = i[1], _ = i[4], y = i[7], x = i[2], b = i[5], w = i[8]; return r[0] = a * f + o * v + s * x, r[3] = a * m + o * _ + s * b, r[6] = a * g + o * y + s * w, r[1] = l * f + c * v + u * x, r[4] = l * m + c * _ + u * b, r[7] = l * g + c * y + u * w, r[2] = h * f + d * v + p * x, r[5] = h * m + d * _ + p * b, r[8] = h * g + d * y + p * w, this } multiplyScalar(t) { const e = this.elements; return e[0] *= t, e[3] *= t, e[6] *= t, e[1] *= t, e[4] *= t, e[7] *= t, e[2] *= t, e[5] *= t, e[8] *= t, this } determinant() { const t = this.elements, e = t[0], n = t[1], i = t[2], r = t[3], a = t[4], o = t[5], s = t[6], l = t[7], c = t[8]; return e * a * c - e * o * l - n * r * c + n * o * s + i * r * l - i * a * s } invert() { const t = this.elements, e = t[0], n = t[1], i = t[2], r = t[3], a = t[4], o = t[5], s = t[6], l = t[7], c = t[8], u = c * a - o * l, h = o * s - c * r, d = l * r - a * s, p = e * u + n * h + i * d; if (0 === p) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0); const f = 1 / p; return t[0] = u * f, t[1] = (i * l - c * n) * f, t[2] = (o * n - i * a) * f, t[3] = h * f, t[4] = (c * e - i * s) * f, t[5] = (i * r - o * e) * f, t[6] = d * f, t[7] = (n * s - l * e) * f, t[8] = (a * e - n * r) * f, this } transpose() { let t; const e = this.elements; return t = e[1], e[1] = e[3], e[3] = t, t = e[2], e[2] = e[6], e[6] = t, t = e[5], e[5] = e[7], e[7] = t, this } getNormalMatrix(t) { return this.setFromMatrix4(t).invert().transpose() } transposeIntoArray(t) { const e = this.elements; return t[0] = e[0], t[1] = e[3], t[2] = e[6], t[3] = e[1], t[4] = e[4], t[5] = e[7], t[6] = e[2], t[7] = e[5], t[8] = e[8], this } setUvTransform(t, e, n, i, r, a, o) { const s = Math.cos(r), l = Math.sin(r); return this.set(n * s, n * l, -n * (s * a + l * o) + a + t, -i * l, i * s, -i * (-l * a + s * o) + o + e, 0, 0, 1), this } scale(t, e) { return this.premultiply(Ue.makeScale(t, e)), this } rotate(t) { return this.premultiply(Ue.makeRotation(-t)), this } translate(t, e) { return this.premultiply(Ue.makeTranslation(t, e)), this } makeTranslation(t, e) { return this.set(1, 0, t, 0, 1, e, 0, 0, 1), this } makeRotation(t) { const e = Math.cos(t), n = Math.sin(t); return this.set(e, -n, 0, n, e, 0, 0, 0, 1), this } makeScale(t, e) { return this.set(t, 0, 0, 0, e, 0, 0, 0, 1), this } equals(t) { const e = this.elements, n = t.elements; for (let t = 0; t < 9; t++)if (e[t] !== n[t]) return !1; return !0 } fromArray(t, e = 0) { for (let n = 0; n < 9; n++)this.elements[n] = t[n + e]; return this } toArray(t = [], e = 0) { const n = this.elements; return t[e] = n[0], t[e + 1] = n[1], t[e + 2] = n[2], t[e + 3] = n[3], t[e + 4] = n[4], t[e + 5] = n[5], t[e + 6] = n[6], t[e + 7] = n[7], t[e + 8] = n[8], t } clone() { return (new this.constructor).fromArray(this.elements) } } const Ue = new ze; function Fe(t) { for (let e = t.length - 1; e >= 0; --e)if (t[e] >= 65535) return !0; return !1 } function Be(t) { return document.createElementNS("http://www.w3.org/1999/xhtml", t) } class je { constructor(t = 0, e = 0, n = 0, i = 1) { this.isQuaternion = !0, this._x = t, this._y = e, this._z = n, this._w = i } static slerpFlat(t, e, n, i, r, a, o) { let s = n[i + 0], l = n[i + 1], c = n[i + 2], u = n[i + 3]; const h = r[a + 0], d = r[a + 1], p = r[a + 2], f = r[a + 3]; if (0 === o) return t[e + 0] = s, t[e + 1] = l, t[e + 2] = c, void (t[e + 3] = u); if (1 === o) return t[e + 0] = h, t[e + 1] = d, t[e + 2] = p, void (t[e + 3] = f); if (u !== f || s !== h || l !== d || c !== p) { let t = 1 - o; const e = s * h + l * d + c * p + u * f, n = e >= 0 ? 1 : -1, i = 1 - e * e; if (i > Number.EPSILON) { const r = Math.sqrt(i), a = Math.atan2(r, e * n); t = Math.sin(t * a) / r, o = Math.sin(o * a) / r } const r = o * n; if (s = s * t + h * r, l = l * t + d * r, c = c * t + p * r, u = u * t + f * r, t === 1 - o) { const t = 1 / Math.sqrt(s * s + l * l + c * c + u * u); s *= t, l *= t, c *= t, u *= t } } t[e] = s, t[e + 1] = l, t[e + 2] = c, t[e + 3] = u } static multiplyQuaternionsFlat(t, e, n, i, r, a) { const o = n[i], s = n[i + 1], l = n[i + 2], c = n[i + 3], u = r[a], h = r[a + 1], d = r[a + 2], p = r[a + 3]; return t[e] = o * p + c * u + s * d - l * h, t[e + 1] = s * p + c * h + l * u - o * d, t[e + 2] = l * p + c * d + o * h - s * u, t[e + 3] = c * p - o * u - s * h - l * d, t } get x() { return this._x } set x(t) { this._x = t, this._onChangeCallback() } get y() { return this._y } set y(t) { this._y = t, this._onChangeCallback() } get z() { return this._z } set z(t) { this._z = t, this._onChangeCallback() } get w() { return this._w } set w(t) { this._w = t, this._onChangeCallback() } set(t, e, n, i) { return this._x = t, this._y = e, this._z = n, this._w = i, this._onChangeCallback(), this } clone() { return new this.constructor(this._x, this._y, this._z, this._w) } copy(t) { return this._x = t.x, this._y = t.y, this._z = t.z, this._w = t.w, this._onChangeCallback(), this } setFromEuler(t, e) { const n = t._x, i = t._y, r = t._z, a = t._order, o = Math.cos, s = Math.sin, l = o(n / 2), c = o(i / 2), u = o(r / 2), h = s(n / 2), d = s(i / 2), p = s(r / 2); switch (a) { case "XYZ": this._x = h * c * u + l * d * p, this._y = l * d * u - h * c * p, this._z = l * c * p + h * d * u, this._w = l * c * u - h * d * p; break; case "YXZ": this._x = h * c * u + l * d * p, this._y = l * d * u - h * c * p, this._z = l * c * p - h * d * u, this._w = l * c * u + h * d * p; break; case "ZXY": this._x = h * c * u - l * d * p, this._y = l * d * u + h * c * p, this._z = l * c * p + h * d * u, this._w = l * c * u - h * d * p; break; case "ZYX": this._x = h * c * u - l * d * p, this._y = l * d * u + h * c * p, this._z = l * c * p - h * d * u, this._w = l * c * u + h * d * p; break; case "YZX": this._x = h * c * u + l * d * p, this._y = l * d * u + h * c * p, this._z = l * c * p - h * d * u, this._w = l * c * u - h * d * p; break; case "XZY": this._x = h * c * u - l * d * p, this._y = l * d * u - h * c * p, this._z = l * c * p + h * d * u, this._w = l * c * u + h * d * p; break; default: console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + a) }return !1 !== e && this._onChangeCallback(), this } setFromAxisAngle(t, e) { const n = e / 2, i = Math.sin(n); return this._x = t.x * i, this._y = t.y * i, this._z = t.z * i, this._w = Math.cos(n), this._onChangeCallback(), this } setFromRotationMatrix(t) { const e = t.elements, n = e[0], i = e[4], r = e[8], a = e[1], o = e[5], s = e[9], l = e[2], c = e[6], u = e[10], h = n + o + u; if (h > 0) { const t = .5 / Math.sqrt(h + 1); this._w = .25 / t, this._x = (c - s) * t, this._y = (r - l) * t, this._z = (a - i) * t } else if (n > o && n > u) { const t = 2 * Math.sqrt(1 + n - o - u); this._w = (c - s) / t, this._x = .25 * t, this._y = (i + a) / t, this._z = (r + l) / t } else if (o > u) { const t = 2 * Math.sqrt(1 + o - n - u); this._w = (r - l) / t, this._x = (i + a) / t, this._y = .25 * t, this._z = (s + c) / t } else { const t = 2 * Math.sqrt(1 + u - n - o); this._w = (a - i) / t, this._x = (r + l) / t, this._y = (s + c) / t, this._z = .25 * t } return this._onChangeCallback(), this } setFromUnitVectors(t, e) { let n = t.dot(e) + 1; return n < Number.EPSILON ? (n = 0, Math.abs(t.x) > Math.abs(t.z) ? (this._x = -t.y, this._y = t.x, this._z = 0, this._w = n) : (this._x = 0, this._y = -t.z, this._z = t.y, this._w = n)) : (this._x = t.y * e.z - t.z * e.y, this._y = t.z * e.x - t.x * e.z, this._z = t.x * e.y - t.y * e.x, this._w = n), this.normalize() } angleTo(t) { return 2 * Math.acos(Math.abs(Pe(this.dot(t), -1, 1))) } rotateTowards(t, e) { const n = this.angleTo(t); if (0 === n) return this; const i = Math.min(1, e / n); return this.slerp(t, i), this } identity() { return this.set(0, 0, 0, 1) } invert() { return this.conjugate() } conjugate() { return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this } dot(t) { return this._x * t._x + this._y * t._y + this._z * t._z + this._w * t._w } lengthSq() { return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w } length() { return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w) } normalize() { let t = this.length(); return 0 === t ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (t = 1 / t, this._x = this._x * t, this._y = this._y * t, this._z = this._z * t, this._w = this._w * t), this._onChangeCallback(), this } multiply(t) { return this.multiplyQuaternions(this, t) } premultiply(t) { return this.multiplyQuaternions(t, this) } multiplyQuaternions(t, e) { const n = t._x, i = t._y, r = t._z, a = t._w, o = e._x, s = e._y, l = e._z, c = e._w; return this._x = n * c + a * o + i * l - r * s, this._y = i * c + a * s + r * o - n * l, this._z = r * c + a * l + n * s - i * o, this._w = a * c - n * o - i * s - r * l, this._onChangeCallback(), this } slerp(t, e) { if (0 === e) return this; if (1 === e) return this.copy(t); const n = this._x, i = this._y, r = this._z, a = this._w; let o = a * t._w + n * t._x + i * t._y + r * t._z; if (o < 0 ? (this._w = -t._w, this._x = -t._x, this._y = -t._y, this._z = -t._z, o = -o) : this.copy(t), o >= 1) return this._w = a, this._x = n, this._y = i, this._z = r, this; const s = 1 - o * o; if (s <= Number.EPSILON) { const t = 1 - e; return this._w = t * a + e * this._w, this._x = t * n + e * this._x, this._y = t * i + e * this._y, this._z = t * r + e * this._z, this.normalize(), this._onChangeCallback(), this } const l = Math.sqrt(s), c = Math.atan2(l, o), u = Math.sin((1 - e) * c) / l, h = Math.sin(e * c) / l; return this._w = a * u + this._w * h, this._x = n * u + this._x * h, this._y = i * u + this._y * h, this._z = r * u + this._z * h, this._onChangeCallback(), this } slerpQuaternions(t, e, n) { return this.copy(t).slerp(e, n) } random() { const t = Math.random(), e = Math.sqrt(1 - t), n = Math.sqrt(t), i = 2 * Math.PI * Math.random(), r = 2 * Math.PI * Math.random(); return this.set(e * Math.cos(i), n * Math.sin(r), n * Math.cos(r), e * Math.sin(i)) } equals(t) { return t._x === this._x && t._y === this._y && t._z === this._z && t._w === this._w } fromArray(t, e = 0) { return this._x = t[e], this._y = t[e + 1], this._z = t[e + 2], this._w = t[e + 3], this._onChangeCallback(), this } toArray(t = [], e = 0) { return t[e] = this._x, t[e + 1] = this._y, t[e + 2] = this._z, t[e + 3] = this._w, t } fromBufferAttribute(t, e) { return this._x = t.getX(e), this._y = t.getY(e), this._z = t.getZ(e), this._w = t.getW(e), this } _onChange(t) { return this._onChangeCallback = t, this } _onChangeCallback() { } *[Symbol.iterator]() { yield this._x, yield this._y, yield this._z, yield this._w } } class Ge { constructor(t = 0, e = 0, n = 0) { Ge.prototype.isVector3 = !0, this.x = t, this.y = e, this.z = n } set(t, e, n) { return void 0 === n && (n = this.z), this.x = t, this.y = e, this.z = n, this } setScalar(t) { return this.x = t, this.y = t, this.z = t, this } setX(t) { return this.x = t, this } setY(t) { return this.y = t, this } setZ(t) { return this.z = t, this } setComponent(t, e) { switch (t) { case 0: this.x = e; break; case 1: this.y = e; break; case 2: this.z = e; break; default: throw new Error("index is out of range: " + t) }return this } getComponent(t) { switch (t) { case 0: return this.x; case 1: return this.y; case 2: return this.z; default: throw new Error("index is out of range: " + t) } } clone() { return new this.constructor(this.x, this.y, this.z) } copy(t) { return this.x = t.x, this.y = t.y, this.z = t.z, this } add(t) { return this.x += t.x, this.y += t.y, this.z += t.z, this } addScalar(t) { return this.x += t, this.y += t, this.z += t, this } addVectors(t, e) { return this.x = t.x + e.x, this.y = t.y + e.y, this.z = t.z + e.z, this } addScaledVector(t, e) { return this.x += t.x * e, this.y += t.y * e, this.z += t.z * e, this } sub(t) { return this.x -= t.x, this.y -= t.y, this.z -= t.z, this } subScalar(t) { return this.x -= t, this.y -= t, this.z -= t, this } subVectors(t, e) { return this.x = t.x - e.x, this.y = t.y - e.y, this.z = t.z - e.z, this } multiply(t) { return this.x *= t.x, this.y *= t.y, this.z *= t.z, this } multiplyScalar(t) { return this.x *= t, this.y *= t, this.z *= t, this } multiplyVectors(t, e) { return this.x = t.x * e.x, this.y = t.y * e.y, this.z = t.z * e.z, this } applyEuler(t) { return this.applyQuaternion(Ve.setFromEuler(t)) } applyAxisAngle(t, e) { return this.applyQuaternion(Ve.setFromAxisAngle(t, e)) } applyMatrix3(t) { const e = this.x, n = this.y, i = this.z, r = t.elements; return this.x = r[0] * e + r[3] * n + r[6] * i, this.y = r[1] * e + r[4] * n + r[7] * i, this.z = r[2] * e + r[5] * n + r[8] * i, this } applyNormalMatrix(t) { return this.applyMatrix3(t).normalize() } applyMatrix4(t) { const e = this.x, n = this.y, i = this.z, r = t.elements, a = 1 / (r[3] * e + r[7] * n + r[11] * i + r[15]); return this.x = (r[0] * e + r[4] * n + r[8] * i + r[12]) * a, this.y = (r[1] * e + r[5] * n + r[9] * i + r[13]) * a, this.z = (r[2] * e + r[6] * n + r[10] * i + r[14]) * a, this } applyQuaternion(t) { const e = this.x, n = this.y, i = this.z, r = t.x, a = t.y, o = t.z, s = t.w, l = s * e + a * i - o * n, c = s * n + o * e - r * i, u = s * i + r * n - a * e, h = -r * e - a * n - o * i; return this.x = l * s + h * -r + c * -o - u * -a, this.y = c * s + h * -a + u * -r - l * -o, this.z = u * s + h * -o + l * -a - c * -r, this } project(t) { return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix) } unproject(t) { return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld) } transformDirection(t) { const e = this.x, n = this.y, i = this.z, r = t.elements; return this.x = r[0] * e + r[4] * n + r[8] * i, this.y = r[1] * e + r[5] * n + r[9] * i, this.z = r[2] * e + r[6] * n + r[10] * i, this.normalize() } divide(t) { return this.x /= t.x, this.y /= t.y, this.z /= t.z, this } divideScalar(t) { return this.multiplyScalar(1 / t) } min(t) { return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this.z = Math.min(this.z, t.z), this } max(t) { return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this.z = Math.max(this.z, t.z), this } clamp(t, e) { return this.x = Math.max(t.x, Math.min(e.x, this.x)), this.y = Math.max(t.y, Math.min(e.y, this.y)), this.z = Math.max(t.z, Math.min(e.z, this.z)), this } clampScalar(t, e) { return this.x = Math.max(t, Math.min(e, this.x)), this.y = Math.max(t, Math.min(e, this.y)), this.z = Math.max(t, Math.min(e, this.z)), this } clampLength(t, e) { const n = this.length(); return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n))) } floor() { return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this } ceil() { return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this } round() { return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this } roundToZero() { return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this } negate() { return this.x = -this.x, this.y = -this.y, this.z = -this.z, this } dot(t) { return this.x * t.x + this.y * t.y + this.z * t.z } lengthSq() { return this.x * this.x + this.y * this.y + this.z * this.z } length() { return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z) } manhattanLength() { return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) } normalize() { return this.divideScalar(this.length() || 1) } setLength(t) { return this.normalize().multiplyScalar(t) } lerp(t, e) { return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this.z += (t.z - this.z) * e, this } lerpVectors(t, e, n) { return this.x = t.x + (e.x - t.x) * n, this.y = t.y + (e.y - t.y) * n, this.z = t.z + (e.z - t.z) * n, this } cross(t) { return this.crossVectors(this, t) } crossVectors(t, e) { const n = t.x, i = t.y, r = t.z, a = e.x, o = e.y, s = e.z; return this.x = i * s - r * o, this.y = r * a - n * s, this.z = n * o - i * a, this } projectOnVector(t) { const e = t.lengthSq(); if (0 === e) return this.set(0, 0, 0); const n = t.dot(this) / e; return this.copy(t).multiplyScalar(n) } projectOnPlane(t) { return He.copy(this).projectOnVector(t), this.sub(He) } reflect(t) { return this.sub(He.copy(t).multiplyScalar(2 * this.dot(t))) } angleTo(t) { const e = Math.sqrt(this.lengthSq() * t.lengthSq()); if (0 === e) return Math.PI / 2; const n = this.dot(t) / e; return Math.acos(Pe(n, -1, 1)) } distanceTo(t) { return Math.sqrt(this.distanceToSquared(t)) } distanceToSquared(t) { const e = this.x - t.x, n = this.y - t.y, i = this.z - t.z; return e * e + n * n + i * i } manhattanDistanceTo(t) { return Math.abs(this.x - t.x) + Math.abs(this.y - t.y) + Math.abs(this.z - t.z) } setFromSpherical(t) { return this.setFromSphericalCoords(t.radius, t.phi, t.theta) } setFromSphericalCoords(t, e, n) { const i = Math.sin(e) * t; return this.x = i * Math.sin(n), this.y = Math.cos(e) * t, this.z = i * Math.cos(n), this } setFromCylindrical(t) { return this.setFromCylindricalCoords(t.radius, t.theta, t.y) } setFromCylindricalCoords(t, e, n) { return this.x = t * Math.sin(e), this.y = n, this.z = t * Math.cos(e), this } setFromMatrixPosition(t) { const e = t.elements; return this.x = e[12], this.y = e[13], this.z = e[14], this } setFromMatrixScale(t) { const e = this.setFromMatrixColumn(t, 0).length(), n = this.setFromMatrixColumn(t, 1).length(), i = this.setFromMatrixColumn(t, 2).length(); return this.x = e, this.y = n, this.z = i, this } setFromMatrixColumn(t, e) { return this.fromArray(t.elements, 4 * e) } setFromMatrix3Column(t, e) { return this.fromArray(t.elements, 3 * e) } setFromEuler(t) { return this.x = t._x, this.y = t._y, this.z = t._z, this } equals(t) { return t.x === this.x && t.y === this.y && t.z === this.z } fromArray(t, e = 0) { return this.x = t[e], this.y = t[e + 1], this.z = t[e + 2], this } toArray(t = [], e = 0) { return t[e] = this.x, t[e + 1] = this.y, t[e + 2] = this.z, t } fromBufferAttribute(t, e) { return this.x = t.getX(e), this.y = t.getY(e), this.z = t.getZ(e), this } random() { return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this } randomDirection() { const t = 2 * (Math.random() - .5), e = Math.random() * Math.PI * 2, n = Math.sqrt(1 - t ** 2); return this.x = n * Math.cos(e), this.y = n * Math.sin(e), this.z = t, this } *[Symbol.iterator]() { yield this.x, yield this.y, yield this.z } } const He = new Ge, Ve = new je; function We(t) { return t < .04045 ? .0773993808 * t : Math.pow(.9478672986 * t + .0521327014, 2.4) } function qe(t) { return t < .0031308 ? 12.92 * t : 1.055 * Math.pow(t, .41666) - .055 } const Xe = (new ze).fromArray([.8224621, .0331941, .0170827, .177538, .9668058, .0723974, -1e-7, 1e-7, .9105199]), Ye = (new ze).fromArray([1.2249401, -.0420569, -.0196376, -.2249404, 1.0420571, -.0786361, 1e-7, 0, 1.0982735]), $e = new Ge; const Ze = { [xe]: t => t, [ye]: t => t.convertSRGBToLinear(), [be]: function (t) { return t.convertSRGBToLinear(), $e.set(t.r, t.g, t.b).applyMatrix3(Ye), t.setRGB($e.x, $e.y, $e.z) } }, Je = { [xe]: t => t, [ye]: t => t.convertLinearToSRGB(), [be]: function (t) { return $e.set(t.r, t.g, t.b).applyMatrix3(Xe), t.setRGB($e.x, $e.y, $e.z).convertLinearToSRGB() } }, Ke = { enabled: !1, get legacyMode() { return console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."), !this.enabled }, set legacyMode(t) { console.warn("THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150."), this.enabled = !t }, get workingColorSpace() { return xe }, set workingColorSpace(t) { console.warn("THREE.ColorManagement: .workingColorSpace is readonly.") }, convert: function (t, e, n) { if (!1 === this.enabled || e === n || !e || !n) return t; const i = Ze[e], r = Je[n]; if (void 0 === i || void 0 === r) throw new Error(`Unsupported color space conversion, "${e}" to "${n}".`); return r(i(t)) }, fromWorkingColorSpace: function (t, e) { return this.convert(t, this.workingColorSpace, e) }, toWorkingColorSpace: function (t, e) { return this.convert(t, e, this.workingColorSpace) } }; let Qe; class tn { static getDataURL(t) { if (/^data:/i.test(t.src)) return t.src; if ("undefined" == typeof HTMLCanvasElement) return t.src; let e; if (t instanceof HTMLCanvasElement) e = t; else { void 0 === Qe && (Qe = Be("canvas")), Qe.width = t.width, Qe.height = t.height; const n = Qe.getContext("2d"); t instanceof ImageData ? n.putImageData(t, 0, 0) : n.drawImage(t, 0, 0, t.width, t.height), e = Qe } return e.width > 2048 || e.height > 2048 ? (console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", t), e.toDataURL("image/jpeg", .6)) : e.toDataURL("image/png") } static sRGBToLinear(t) { if ("undefined" != typeof HTMLImageElement && t instanceof HTMLImageElement || "undefined" != typeof HTMLCanvasElement && t instanceof HTMLCanvasElement || "undefined" != typeof ImageBitmap && t instanceof ImageBitmap) { const e = Be("canvas"); e.width = t.width, e.height = t.height; const n = e.getContext("2d"); n.drawImage(t, 0, 0, t.width, t.height); const i = n.getImageData(0, 0, t.width, t.height), r = i.data; for (let t = 0; t < r.length; t++)r[t] = 255 * We(r[t] / 255); return n.putImageData(i, 0, 0), e } if (t.data) { const e = t.data.slice(0); for (let t = 0; t < e.length; t++)e instanceof Uint8Array || e instanceof Uint8ClampedArray ? e[t] = Math.floor(255 * We(e[t] / 255)) : e[t] = We(e[t]); return { data: e, width: t.width, height: t.height } } return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), t } } class en { constructor(t = null) { this.isSource = !0, this.uuid = Le(), this.data = t, this.version = 0 } set needsUpdate(t) { !0 === t && this.version++ } toJSON(t) { const e = void 0 === t || "string" == typeof t; if (!e && void 0 !== t.images[this.uuid]) return t.images[this.uuid]; const n = { uuid: this.uuid, url: "" }, i = this.data; if (null !== i) { let t; if (Array.isArray(i)) { t = []; for (let e = 0, n = i.length; e < n; e++)i[e].isDataTexture ? t.push(nn(i[e].image)) : t.push(nn(i[e])) } else t = nn(i); n.url = t } return e || (t.images[this.uuid] = n), n } } function nn(t) { return "undefined" != typeof HTMLImageElement && t instanceof HTMLImageElement || "undefined" != typeof HTMLCanvasElement && t instanceof HTMLCanvasElement || "undefined" != typeof ImageBitmap && t instanceof ImageBitmap ? tn.getDataURL(t) : t.data ? { data: Array.from(t.data), width: t.width, height: t.height, type: t.data.constructor.name } : (console.warn("THREE.Texture: Unable to serialize Texture."), {}) } let rn = 0; class an extends Ee { constructor(t = an.DEFAULT_IMAGE, e = an.DEFAULT_MAPPING, n = lt, i = lt, r = pt, a = mt, o = Ct, s = gt, l = an.DEFAULT_ANISOTROPY, c = fe) { super(), this.isTexture = !0, Object.defineProperty(this, "id", { value: rn++ }), this.uuid = Le(), this.name = "", this.source = new en(t), this.mipmaps = [], this.mapping = e, this.wrapS = n, this.wrapT = i, this.magFilter = r, this.minFilter = a, this.anisotropy = l, this.format = o, this.internalFormat = null, this.type = s, this.offset = new ke(0, 0), this.repeat = new ke(1, 1), this.center = new ke(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new ze, this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, this.encoding = c, this.userData = {}, this.version = 0, this.onUpdate = null, this.isRenderTargetTexture = !1, this.needsPMREMUpdate = !1 } get image() { return this.source.data } set image(t = null) { this.source.data = t } updateMatrix() { this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y) } clone() { return (new this.constructor).copy(this) } copy(t) { return this.name = t.name, this.source = t.source, this.mipmaps = t.mipmaps.slice(0), this.mapping = t.mapping, this.wrapS = t.wrapS, this.wrapT = t.wrapT, this.magFilter = t.magFilter, this.minFilter = t.minFilter, this.anisotropy = t.anisotropy, this.format = t.format, this.internalFormat = t.internalFormat, this.type = t.type, this.offset.copy(t.offset), this.repeat.copy(t.repeat), this.center.copy(t.center), this.rotation = t.rotation, this.matrixAutoUpdate = t.matrixAutoUpdate, this.matrix.copy(t.matrix), this.generateMipmaps = t.generateMipmaps, this.premultiplyAlpha = t.premultiplyAlpha, this.flipY = t.flipY, this.unpackAlignment = t.unpackAlignment, this.encoding = t.encoding, this.userData = JSON.parse(JSON.stringify(t.userData)), this.needsUpdate = !0, this } toJSON(t) { const e = void 0 === t || "string" == typeof t; if (!e && void 0 !== t.textures[this.uuid]) return t.textures[this.uuid]; const n = { metadata: { version: 4.5, type: "Texture", generator: "Texture.toJSON" }, uuid: this.uuid, name: this.name, image: this.source.toJSON(t).uuid, mapping: this.mapping, repeat: [this.repeat.x, this.repeat.y], offset: [this.offset.x, this.offset.y], center: [this.center.x, this.center.y], rotation: this.rotation, wrap: [this.wrapS, this.wrapT], format: this.format, internalFormat: this.internalFormat, type: this.type, encoding: this.encoding, minFilter: this.minFilter, magFilter: this.magFilter, anisotropy: this.anisotropy, flipY: this.flipY, generateMipmaps: this.generateMipmaps, premultiplyAlpha: this.premultiplyAlpha, unpackAlignment: this.unpackAlignment }; return Object.keys(this.userData).length > 0 && (n.userData = this.userData), e || (t.textures[this.uuid] = n), n } dispose() { this.dispatchEvent({ type: "dispose" }) } transformUv(t) { if (300 !== this.mapping) return t; if (t.applyMatrix3(this.matrix), t.x < 0 || t.x > 1) switch (this.wrapS) { case st: t.x = t.x - Math.floor(t.x); break; case lt: t.x = t.x < 0 ? 0 : 1; break; case ct: 1 === Math.abs(Math.floor(t.x) % 2) ? t.x = Math.ceil(t.x) - t.x : t.x = t.x - Math.floor(t.x) }if (t.y < 0 || t.y > 1) switch (this.wrapT) { case st: t.y = t.y - Math.floor(t.y); break; case lt: t.y = t.y < 0 ? 0 : 1; break; case ct: 1 === Math.abs(Math.floor(t.y) % 2) ? t.y = Math.ceil(t.y) - t.y : t.y = t.y - Math.floor(t.y) }return this.flipY && (t.y = 1 - t.y), t } set needsUpdate(t) { !0 === t && (this.version++, this.source.needsUpdate = !0) } } an.DEFAULT_IMAGE = null, an.DEFAULT_MAPPING = 300, an.DEFAULT_ANISOTROPY = 1; class on { constructor(t = 0, e = 0, n = 0, i = 1) { on.prototype.isVector4 = !0, this.x = t, this.y = e, this.z = n, this.w = i } get width() { return this.z } set width(t) { this.z = t } get height() { return this.w } set height(t) { this.w = t } set(t, e, n, i) { return this.x = t, this.y = e, this.z = n, this.w = i, this } setScalar(t) { return this.x = t, this.y = t, this.z = t, this.w = t, this } setX(t) { return this.x = t, this } setY(t) { return this.y = t, this } setZ(t) { return this.z = t, this } setW(t) { return this.w = t, this } setComponent(t, e) { switch (t) { case 0: this.x = e; break; case 1: this.y = e; break; case 2: this.z = e; break; case 3: this.w = e; break; default: throw new Error("index is out of range: " + t) }return this } getComponent(t) { switch (t) { case 0: return this.x; case 1: return this.y; case 2: return this.z; case 3: return this.w; default: throw new Error("index is out of range: " + t) } } clone() { return new this.constructor(this.x, this.y, this.z, this.w) } copy(t) { return this.x = t.x, this.y = t.y, this.z = t.z, this.w = void 0 !== t.w ? t.w : 1, this } add(t) { return this.x += t.x, this.y += t.y, this.z += t.z, this.w += t.w, this } addScalar(t) { return this.x += t, this.y += t, this.z += t, this.w += t, this } addVectors(t, e) { return this.x = t.x + e.x, this.y = t.y + e.y, this.z = t.z + e.z, this.w = t.w + e.w, this } addScaledVector(t, e) { return this.x += t.x * e, this.y += t.y * e, this.z += t.z * e, this.w += t.w * e, this } sub(t) { return this.x -= t.x, this.y -= t.y, this.z -= t.z, this.w -= t.w, this } subScalar(t) { return this.x -= t, this.y -= t, this.z -= t, this.w -= t, this } subVectors(t, e) { return this.x = t.x - e.x, this.y = t.y - e.y, this.z = t.z - e.z, this.w = t.w - e.w, this } multiply(t) { return this.x *= t.x, this.y *= t.y, this.z *= t.z, this.w *= t.w, this } multiplyScalar(t) { return this.x *= t, this.y *= t, this.z *= t, this.w *= t, this } applyMatrix4(t) { const e = this.x, n = this.y, i = this.z, r = this.w, a = t.elements; return this.x = a[0] * e + a[4] * n + a[8] * i + a[12] * r, this.y = a[1] * e + a[5] * n + a[9] * i + a[13] * r, this.z = a[2] * e + a[6] * n + a[10] * i + a[14] * r, this.w = a[3] * e + a[7] * n + a[11] * i + a[15] * r, this } divideScalar(t) { return this.multiplyScalar(1 / t) } setAxisAngleFromQuaternion(t) { this.w = 2 * Math.acos(t.w); const e = Math.sqrt(1 - t.w * t.w); return e < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = t.x / e, this.y = t.y / e, this.z = t.z / e), this } setAxisAngleFromRotationMatrix(t) { let e, n, i, r; const a = .01, o = .1, s = t.elements, l = s[0], c = s[4], u = s[8], h = s[1], d = s[5], p = s[9], f = s[2], m = s[6], g = s[10]; if (Math.abs(c - h) < a && Math.abs(u - f) < a && Math.abs(p - m) < a) { if (Math.abs(c + h) < o && Math.abs(u + f) < o && Math.abs(p + m) < o && Math.abs(l + d + g - 3) < o) return this.set(1, 0, 0, 0), this; e = Math.PI; const t = (l + 1) / 2, s = (d + 1) / 2, v = (g + 1) / 2, _ = (c + h) / 4, y = (u + f) / 4, x = (p + m) / 4; return t > s && t > v ? t < a ? (n = 0, i = .707106781, r = .707106781) : (n = Math.sqrt(t), i = _ / n, r = y / n) : s > v ? s < a ? (n = .707106781, i = 0, r = .707106781) : (i = Math.sqrt(s), n = _ / i, r = x / i) : v < a ? (n = .707106781, i = .707106781, r = 0) : (r = Math.sqrt(v), n = y / r, i = x / r), this.set(n, i, r, e), this } let v = Math.sqrt((m - p) * (m - p) + (u - f) * (u - f) + (h - c) * (h - c)); return Math.abs(v) < .001 && (v = 1), this.x = (m - p) / v, this.y = (u - f) / v, this.z = (h - c) / v, this.w = Math.acos((l + d + g - 1) / 2), this } min(t) { return this.x = Math.min(this.x, t.x), this.y = Math.min(this.y, t.y), this.z = Math.min(this.z, t.z), this.w = Math.min(this.w, t.w), this } max(t) { return this.x = Math.max(this.x, t.x), this.y = Math.max(this.y, t.y), this.z = Math.max(this.z, t.z), this.w = Math.max(this.w, t.w), this } clamp(t, e) { return this.x = Math.max(t.x, Math.min(e.x, this.x)), this.y = Math.max(t.y, Math.min(e.y, this.y)), this.z = Math.max(t.z, Math.min(e.z, this.z)), this.w = Math.max(t.w, Math.min(e.w, this.w)), this } clampScalar(t, e) { return this.x = Math.max(t, Math.min(e, this.x)), this.y = Math.max(t, Math.min(e, this.y)), this.z = Math.max(t, Math.min(e, this.z)), this.w = Math.max(t, Math.min(e, this.w)), this } clampLength(t, e) { const n = this.length(); return this.divideScalar(n || 1).multiplyScalar(Math.max(t, Math.min(e, n))) } floor() { return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this } ceil() { return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this } round() { return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this } roundToZero() { return this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x), this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y), this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z), this.w = this.w < 0 ? Math.ceil(this.w) : Math.floor(this.w), this } negate() { return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this } dot(t) { return this.x * t.x + this.y * t.y + this.z * t.z + this.w * t.w } lengthSq() { return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w } length() { return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w) } manhattanLength() { return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w) } normalize() { return this.divideScalar(this.length() || 1) } setLength(t) { return this.normalize().multiplyScalar(t) } lerp(t, e) { return this.x += (t.x - this.x) * e, this.y += (t.y - this.y) * e, this.z += (t.z - this.z) * e, this.w += (t.w - this.w) * e, this } lerpVectors(t, e, n) { return this.x = t.x + (e.x - t.x) * n, this.y = t.y + (e.y - t.y) * n, this.z = t.z + (e.z - t.z) * n, this.w = t.w + (e.w - t.w) * n, this } equals(t) { return t.x === this.x && t.y === this.y && t.z === this.z && t.w === this.w } fromArray(t, e = 0) { return this.x = t[e], this.y = t[e + 1], this.z = t[e + 2], this.w = t[e + 3], this } toArray(t = [], e = 0) { return t[e] = this.x, t[e + 1] = this.y, t[e + 2] = this.z, t[e + 3] = this.w, t } fromBufferAttribute(t, e) { return this.x = t.getX(e), this.y = t.getY(e), this.z = t.getZ(e), this.w = t.getW(e), this } random() { return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this } *[Symbol.iterator]() { yield this.x, yield this.y, yield this.z, yield this.w } } class sn extends Ee { constructor(t = 1, e = 1, n = {}) { super(), this.isWebGLRenderTarget = !0, this.width = t, this.height = e, this.depth = 1, this.scissor = new on(0, 0, t, e), this.scissorTest = !1, this.viewport = new on(0, 0, t, e); const i = { width: t, height: e, depth: 1 }; this.texture = new an(i, n.mapping, n.wrapS, n.wrapT, n.magFilter, n.minFilter, n.format, n.type, n.anisotropy, n.encoding), this.texture.isRenderTargetTexture = !0, this.texture.flipY = !1, this.texture.generateMipmaps = void 0 !== n.generateMipmaps && n.generateMipmaps, this.texture.internalFormat = void 0 !== n.internalFormat ? n.internalFormat : null, this.texture.minFilter = void 0 !== n.minFilter ? n.minFilter : pt, this.depthBuffer = void 0 === n.depthBuffer || n.depthBuffer, this.stencilBuffer = void 0 !== n.stencilBuffer && n.stencilBuffer, this.depthTexture = void 0 !== n.depthTexture ? n.depthTexture : null, this.samples = void 0 !== n.samples ? n.samples : 0 } setSize(t, e, n = 1) { this.width === t && this.height === e && this.depth === n || (this.width = t, this.height = e, this.depth = n, this.texture.image.width = t, this.texture.image.height = e, this.texture.image.depth = n, this.dispose()), this.viewport.set(0, 0, t, e), this.scissor.set(0, 0, t, e) } clone() { return (new this.constructor).copy(this) } copy(t) { this.width = t.width, this.height = t.height, this.depth = t.depth, this.viewport.copy(t.viewport), this.texture = t.texture.clone(), this.texture.isRenderTargetTexture = !0; const e = Object.assign({}, t.texture.image); return this.texture.source = new en(e), this.depthBuffer = t.depthBuffer, this.stencilBuffer = t.stencilBuffer, null !== t.depthTexture && (this.depthTexture = t.depthTexture.clone()), this.samples = t.samples, this } dispose() { this.dispatchEvent({ type: "dispose" }) } } class ln extends an { constructor(t = null, e = 1, n = 1, i = 1) { super(null), this.isDataArrayTexture = !0, this.image = { data: t, width: e, height: n, depth: i }, this.magFilter = ut, this.minFilter = ut, this.wrapR = lt, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1 } } class cn extends an { constructor(t = null, e = 1, n = 1, i = 1) { super(null), this.isData3DTexture = !0, this.image = { data: t, width: e, height: n, depth: i }, this.magFilter = ut, this.minFilter = ut, this.wrapR = lt, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1 } } class un { constructor(t = new Ge(1 / 0, 1 / 0, 1 / 0), e = new Ge(-1 / 0, -1 / 0, -1 / 0)) { this.isBox3 = !0, this.min = t, this.max = e } set(t, e) { return this.min.copy(t), this.max.copy(e), this } setFromArray(t) { let e = 1 / 0, n = 1 / 0, i = 1 / 0, r = -1 / 0, a = -1 / 0, o = -1 / 0; for (let s = 0, l = t.length; s < l; s += 3) { const l = t[s], c = t[s + 1], u = t[s + 2]; l < e && (e = l), c < n && (n = c), u < i && (i = u), l > r && (r = l), c > a && (a = c), u > o && (o = u) } return this.min.set(e, n, i), this.max.set(r, a, o), this } setFromBufferAttribute(t) { let e = 1 / 0, n = 1 / 0, i = 1 / 0, r = -1 / 0, a = -1 / 0, o = -1 / 0; for (let s = 0, l = t.count; s < l; s++) { const l = t.getX(s), c = t.getY(s), u = t.getZ(s); l < e && (e = l), c < n && (n = c), u < i && (i = u), l > r && (r = l), c > a && (a = c), u > o && (o = u) } return this.min.set(e, n, i), this.max.set(r, a, o), this } setFromPoints(t) { this.makeEmpty(); for (let e = 0, n = t.length; e < n; e++)this.expandByPoint(t[e]); return this } setFromCenterAndSize(t, e) { const n = dn.copy(e).multiplyScalar(.5); return this.min.copy(t).sub(n), this.max.copy(t).add(n), this } setFromObject(t, e = !1) { return this.makeEmpty(), this.expandByObject(t, e) } clone() { return (new this.constructor).copy(this) } copy(t) { return this.min.copy(t.min), this.max.copy(t.max), this } makeEmpty() { return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this } isEmpty() { return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z } getCenter(t) { return this.isEmpty() ? t.set(0, 0, 0) : t.addVectors(this.min, this.max).multiplyScalar(.5) } getSize(t) { return this.isEmpty() ? t.set(0, 0, 0) : t.subVectors(this.max, this.min) } expandByPoint(t) { return this.min.min(t), this.max.max(t), this } expandByVector(t) { return this.min.sub(t), this.max.add(t), this } expandByScalar(t) { return this.min.addScalar(-t), this.max.addScalar(t), this } expandByObject(t, e = !1) { t.updateWorldMatrix(!1, !1); const n = t.geometry; if (void 0 !== n) if (e && null != n.attributes && void 0 !== n.attributes.position) { const e = n.attributes.position; for (let n = 0, i = e.count; n < i; n++)dn.fromBufferAttribute(e, n).applyMatrix4(t.matrixWorld), this.expandByPoint(dn) } else null === n.boundingBox && n.computeBoundingBox(), pn.copy(n.boundingBox), pn.applyMatrix4(t.matrixWorld), this.union(pn); const i = t.children; for (let t = 0, n = i.length; t < n; t++)this.expandByObject(i[t], e); return this } containsPoint(t) { return !(t.x < this.min.x || t.x > this.max.x || t.y < this.min.y || t.y > this.max.y || t.z < this.min.z || t.z > this.max.z) } containsBox(t) { return this.min.x <= t.min.x && t.max.x <= this.max.x && this.min.y <= t.min.y && t.max.y <= this.max.y && this.min.z <= t.min.z && t.max.z <= this.max.z } getParameter(t, e) { return e.set((t.x - this.min.x) / (this.max.x - this.min.x), (t.y - this.min.y) / (this.max.y - this.min.y), (t.z - this.min.z) / (this.max.z - this.min.z)) } intersectsBox(t) { return !(t.max.x < this.min.x || t.min.x > this.max.x || t.max.y < this.min.y || t.min.y > this.max.y || t.max.z < this.min.z || t.min.z > this.max.z) } intersectsSphere(t) { return this.clampPoint(t.center, dn), dn.distanceToSquared(t.center) <= t.radius * t.radius } intersectsPlane(t) { let e, n; return t.normal.x > 0 ? (e = t.normal.x * this.min.x, n = t.normal.x * this.max.x) : (e = t.normal.x * this.max.x, n = t.normal.x * this.min.x), t.normal.y > 0 ? (e += t.normal.y * this.min.y, n += t.normal.y * this.max.y) : (e += t.normal.y * this.max.y, n += t.normal.y * this.min.y), t.normal.z > 0 ? (e += t.normal.z * this.min.z, n += t.normal.z * this.max.z) : (e += t.normal.z * this.max.z, n += t.normal.z * this.min.z), e <= -t.constant && n >= -t.constant } intersectsTriangle(t) { if (this.isEmpty()) return !1; this.getCenter(xn), bn.subVectors(this.max, xn), fn.subVectors(t.a, xn), mn.subVectors(t.b, xn), gn.subVectors(t.c, xn), vn.subVectors(mn, fn), _n.subVectors(gn, mn), yn.subVectors(fn, gn); let e = [0, -vn.z, vn.y, 0, -_n.z, _n.y, 0, -yn.z, yn.y, vn.z, 0, -vn.x, _n.z, 0, -_n.x, yn.z, 0, -yn.x, -vn.y, vn.x, 0, -_n.y, _n.x, 0, -yn.y, yn.x, 0]; return !!Sn(e, fn, mn, gn, bn) && (e = [1, 0, 0, 0, 1, 0, 0, 0, 1], !!Sn(e, fn, mn, gn, bn) && (wn.crossVectors(vn, _n), e = [wn.x, wn.y, wn.z], Sn(e, fn, mn, gn, bn))) } clampPoint(t, e) { return e.copy(t).clamp(this.min, this.max) } distanceToPoint(t) { return this.clampPoint(t, dn).distanceTo(t) } getBoundingSphere(t) { return this.isEmpty() ? t.makeEmpty() : (this.getCenter(t.center), t.radius = .5 * this.getSize(dn).length()), t } intersect(t) { return this.min.max(t.min), this.max.min(t.max), this.isEmpty() && this.makeEmpty(), this } union(t) { return this.min.min(t.min), this.max.max(t.max), this } applyMatrix4(t) { return this.isEmpty() || (hn[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(t), hn[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(t), hn[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(t), hn[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(t), hn[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(t), hn[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(t), hn[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(t), hn[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(t), this.setFromPoints(hn)), this } translate(t) { return this.min.add(t), this.max.add(t), this } equals(t) { return t.min.equals(this.min) && t.max.equals(this.max) } } const hn = [new Ge, new Ge, new Ge, new Ge, new Ge, new Ge, new Ge, new Ge], dn = new Ge, pn = new un, fn = new Ge, mn = new Ge, gn = new Ge, vn = new Ge, _n = new Ge, yn = new Ge, xn = new Ge, bn = new Ge, wn = new Ge, Mn = new Ge; function Sn(t, e, n, i, r) { for (let a = 0, o = t.length - 3; a <= o; a += 3) { Mn.fromArray(t, a); const o = r.x * Math.abs(Mn.x) + r.y * Math.abs(Mn.y) + r.z * Math.abs(Mn.z), s = e.dot(Mn), l = n.dot(Mn), c = i.dot(Mn); if (Math.max(-Math.max(s, l, c), Math.min(s, l, c)) > o) return !1 } return !0 } const En = new un, Tn = new Ge, An = new Ge; class Cn { constructor(t = new Ge, e = -1) { this.center = t, this.radius = e } set(t, e) { return this.center.copy(t), this.radius = e, this } setFromPoints(t, e) { const n = this.center; void 0 !== e ? n.copy(e) : En.setFromPoints(t).getCenter(n); let i = 0; for (let e = 0, r = t.length; e < r; e++)i = Math.max(i, n.distanceToSquared(t[e])); return this.radius = Math.sqrt(i), this } copy(t) { return this.center.copy(t.center), this.radius = t.radius, this } isEmpty() { return this.radius < 0 } makeEmpty() { return this.center.set(0, 0, 0), this.radius = -1, this } containsPoint(t) { return t.distanceToSquared(this.center) <= this.radius * this.radius } distanceToPoint(t) { return t.distanceTo(this.center) - this.radius } intersectsSphere(t) { const e = this.radius + t.radius; return t.center.distanceToSquared(this.center) <= e * e } intersectsBox(t) { return t.intersectsSphere(this) } intersectsPlane(t) { return Math.abs(t.distanceToPoint(this.center)) <= this.radius } clampPoint(t, e) { const n = this.center.distanceToSquared(t); return e.copy(t), n > this.radius * this.radius && (e.sub(this.center).normalize(), e.multiplyScalar(this.radius).add(this.center)), e } getBoundingBox(t) { return this.isEmpty() ? (t.makeEmpty(), t) : (t.set(this.center, this.center), t.expandByScalar(this.radius), t) } applyMatrix4(t) { return this.center.applyMatrix4(t), this.radius = this.radius * t.getMaxScaleOnAxis(), this } translate(t) { return this.center.add(t), this } expandByPoint(t) { if (this.isEmpty()) return this.center.copy(t), this.radius = 0, this; Tn.subVectors(t, this.center); const e = Tn.lengthSq(); if (e > this.radius * this.radius) { const t = Math.sqrt(e), n = .5 * (t - this.radius); this.center.addScaledVector(Tn, n / t), this.radius += n } return this } union(t) { return t.isEmpty() ? this : this.isEmpty() ? (this.copy(t), this) : (!0 === this.center.equals(t.center) ? this.radius = Math.max(this.radius, t.radius) : (An.subVectors(t.center, this.center).setLength(t.radius), this.expandByPoint(Tn.copy(t.center).add(An)), this.expandByPoint(Tn.copy(t.center).sub(An))), this) } equals(t) { return t.center.equals(this.center) && t.radius === this.radius } clone() { return (new this.constructor).copy(this) } } const Ln = new Ge, Pn = new Ge, Rn = new Ge, Dn = new Ge, On = new Ge, In = new Ge, Nn = new Ge; class kn { constructor(t = new Ge, e = new Ge(0, 0, -1)) { this.origin = t, this.direction = e } set(t, e) { return this.origin.copy(t), this.direction.copy(e), this } copy(t) { return this.origin.copy(t.origin), this.direction.copy(t.direction), this } at(t, e) { return e.copy(this.origin).addScaledVector(this.direction, t) } lookAt(t) { return this.direction.copy(t).sub(this.origin).normalize(), this } recast(t) { return this.origin.copy(this.at(t, Ln)), this } closestPointToPoint(t, e) { e.subVectors(t, this.origin); const n = e.dot(this.direction); return n < 0 ? e.copy(this.origin) : e.copy(this.origin).addScaledVector(this.direction, n) } distanceToPoint(t) { return Math.sqrt(this.distanceSqToPoint(t)) } distanceSqToPoint(t) { const e = Ln.subVectors(t, this.origin).dot(this.direction); return e < 0 ? this.origin.distanceToSquared(t) : (Ln.copy(this.origin).addScaledVector(this.direction, e), Ln.distanceToSquared(t)) } distanceSqToSegment(t, e, n, i) { Pn.copy(t).add(e).multiplyScalar(.5), Rn.copy(e).sub(t).normalize(), Dn.copy(this.origin).sub(Pn); const r = .5 * t.distanceTo(e), a = -this.direction.dot(Rn), o = Dn.dot(this.direction), s = -Dn.dot(Rn), l = Dn.lengthSq(), c = Math.abs(1 - a * a); let u, h, d, p; if (c > 0) if (u = a * s - o, h = a * o - s, p = r * c, u >= 0) if (h >= -p) if (h <= p) { const t = 1 / c; u *= t, h *= t, d = u * (u + a * h + 2 * o) + h * (a * u + h + 2 * s) + l } else h = r, u = Math.max(0, -(a * h + o)), d = -u * u + h * (h + 2 * s) + l; else h = -r, u = Math.max(0, -(a * h + o)), d = -u * u + h * (h + 2 * s) + l; else h <= -p ? (u = Math.max(0, -(-a * r + o)), h = u > 0 ? -r : Math.min(Math.max(-r, -s), r), d = -u * u + h * (h + 2 * s) + l) : h <= p ? (u = 0, h = Math.min(Math.max(-r, -s), r), d = h * (h + 2 * s) + l) : (u = Math.max(0, -(a * r + o)), h = u > 0 ? r : Math.min(Math.max(-r, -s), r), d = -u * u + h * (h + 2 * s) + l); else h = a > 0 ? -r : r, u = Math.max(0, -(a * h + o)), d = -u * u + h * (h + 2 * s) + l; return n && n.copy(this.origin).addScaledVector(this.direction, u), i && i.copy(Pn).addScaledVector(Rn, h), d } intersectSphere(t, e) { Ln.subVectors(t.center, this.origin); const n = Ln.dot(this.direction), i = Ln.dot(Ln) - n * n, r = t.radius * t.radius; if (i > r) return null; const a = Math.sqrt(r - i), o = n - a, s = n + a; return s < 0 ? null : o < 0 ? this.at(s, e) : this.at(o, e) } intersectsSphere(t) { return this.distanceSqToPoint(t.center) <= t.radius * t.radius } distanceToPlane(t) { const e = t.normal.dot(this.direction); if (0 === e) return 0 === t.distanceToPoint(this.origin) ? 0 : null; const n = -(this.origin.dot(t.normal) + t.constant) / e; return n >= 0 ? n : null } intersectPlane(t, e) { const n = this.distanceToPlane(t); return null === n ? null : this.at(n, e) } intersectsPlane(t) { const e = t.distanceToPoint(this.origin); if (0 === e) return !0; return t.normal.dot(this.direction) * e < 0 } intersectBox(t, e) { let n, i, r, a, o, s; const l = 1 / this.direction.x, c = 1 / this.direction.y, u = 1 / this.direction.z, h = this.origin; return l >= 0 ? (n = (t.min.x - h.x) * l, i = (t.max.x - h.x) * l) : (n = (t.max.x - h.x) * l, i = (t.min.x - h.x) * l), c >= 0 ? (r = (t.min.y - h.y) * c, a = (t.max.y - h.y) * c) : (r = (t.max.y - h.y) * c, a = (t.min.y - h.y) * c), n > a || r > i ? null : ((r > n || isNaN(n)) && (n = r), (a < i || isNaN(i)) && (i = a), u >= 0 ? (o = (t.min.z - h.z) * u, s = (t.max.z - h.z) * u) : (o = (t.max.z - h.z) * u, s = (t.min.z - h.z) * u), n > s || o > i ? null : ((o > n || n != n) && (n = o), (s < i || i != i) && (i = s), i < 0 ? null : this.at(n >= 0 ? n : i, e))) } intersectsBox(t) { return null !== this.intersectBox(t, Ln) } intersectTriangle(t, e, n, i, r) { On.subVectors(e, t), In.subVectors(n, t), Nn.crossVectors(On, In); let a, o = this.direction.dot(Nn); if (o > 0) { if (i) return null; a = 1 } else { if (!(o < 0)) return null; a = -1, o = -o } Dn.subVectors(this.origin, t); const s = a * this.direction.dot(In.crossVectors(Dn, In)); if (s < 0) return null; const l = a * this.direction.dot(On.cross(Dn)); if (l < 0) return null; if (s + l > o) return null; const c = -a * Dn.dot(Nn); return c < 0 ? null : this.at(c / o, r) } applyMatrix4(t) { return this.origin.applyMatrix4(t), this.direction.transformDirection(t), this } equals(t) { return t.origin.equals(this.origin) && t.direction.equals(this.direction) } clone() { return (new this.constructor).copy(this) } } class zn { constructor() { zn.prototype.isMatrix4 = !0, this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1] } set(t, e, n, i, r, a, o, s, l, c, u, h, d, p, f, m) { const g = this.elements; return g[0] = t, g[4] = e, g[8] = n, g[12] = i, g[1] = r, g[5] = a, g[9] = o, g[13] = s, g[2] = l, g[6] = c, g[10] = u, g[14] = h, g[3] = d, g[7] = p, g[11] = f, g[15] = m, this } identity() { return this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this } clone() { return (new zn).fromArray(this.elements) } copy(t) { const e = this.elements, n = t.elements; return e[0] = n[0], e[1] = n[1], e[2] = n[2], e[3] = n[3], e[4] = n[4], e[5] = n[5], e[6] = n[6], e[7] = n[7], e[8] = n[8], e[9] = n[9], e[10] = n[10], e[11] = n[11], e[12] = n[12], e[13] = n[13], e[14] = n[14], e[15] = n[15], this } copyPosition(t) { const e = this.elements, n = t.elements; return e[12] = n[12], e[13] = n[13], e[14] = n[14], this } setFromMatrix3(t) { const e = t.elements; return this.set(e[0], e[3], e[6], 0, e[1], e[4], e[7], 0, e[2], e[5], e[8], 0, 0, 0, 0, 1), this } extractBasis(t, e, n) { return t.setFromMatrixColumn(this, 0), e.setFromMatrixColumn(this, 1), n.setFromMatrixColumn(this, 2), this } makeBasis(t, e, n) { return this.set(t.x, e.x, n.x, 0, t.y, e.y, n.y, 0, t.z, e.z, n.z, 0, 0, 0, 0, 1), this } extractRotation(t) { const e = this.elements, n = t.elements, i = 1 / Un.setFromMatrixColumn(t, 0).length(), r = 1 / Un.setFromMatrixColumn(t, 1).length(), a = 1 / Un.setFromMatrixColumn(t, 2).length(); return e[0] = n[0] * i, e[1] = n[1] * i, e[2] = n[2] * i, e[3] = 0, e[4] = n[4] * r, e[5] = n[5] * r, e[6] = n[6] * r, e[7] = 0, e[8] = n[8] * a, e[9] = n[9] * a, e[10] = n[10] * a, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, this } makeRotationFromEuler(t) { const e = this.elements, n = t.x, i = t.y, r = t.z, a = Math.cos(n), o = Math.sin(n), s = Math.cos(i), l = Math.sin(i), c = Math.cos(r), u = Math.sin(r); if ("XYZ" === t.order) { const t = a * c, n = a * u, i = o * c, r = o * u; e[0] = s * c, e[4] = -s * u, e[8] = l, e[1] = n + i * l, e[5] = t - r * l, e[9] = -o * s, e[2] = r - t * l, e[6] = i + n * l, e[10] = a * s } else if ("YXZ" === t.order) { const t = s * c, n = s * u, i = l * c, r = l * u; e[0] = t + r * o, e[4] = i * o - n, e[8] = a * l, e[1] = a * u, e[5] = a * c, e[9] = -o, e[2] = n * o - i, e[6] = r + t * o, e[10] = a * s } else if ("ZXY" === t.order) { const t = s * c, n = s * u, i = l * c, r = l * u; e[0] = t - r * o, e[4] = -a * u, e[8] = i + n * o, e[1] = n + i * o, e[5] = a * c, e[9] = r - t * o, e[2] = -a * l, e[6] = o, e[10] = a * s } else if ("ZYX" === t.order) { const t = a * c, n = a * u, i = o * c, r = o * u; e[0] = s * c, e[4] = i * l - n, e[8] = t * l + r, e[1] = s * u, e[5] = r * l + t, e[9] = n * l - i, e[2] = -l, e[6] = o * s, e[10] = a * s } else if ("YZX" === t.order) { const t = a * s, n = a * l, i = o * s, r = o * l; e[0] = s * c, e[4] = r - t * u, e[8] = i * u + n, e[1] = u, e[5] = a * c, e[9] = -o * c, e[2] = -l * c, e[6] = n * u + i, e[10] = t - r * u } else if ("XZY" === t.order) { const t = a * s, n = a * l, i = o * s, r = o * l; e[0] = s * c, e[4] = -u, e[8] = l * c, e[1] = t * u + r, e[5] = a * c, e[9] = n * u - i, e[2] = i * u - n, e[6] = o * c, e[10] = r * u + t } return e[3] = 0, e[7] = 0, e[11] = 0, e[12] = 0, e[13] = 0, e[14] = 0, e[15] = 1, this } makeRotationFromQuaternion(t) { return this.compose(Bn, t, jn) } lookAt(t, e, n) { const i = this.elements; return Vn.subVectors(t, e), 0 === Vn.lengthSq() && (Vn.z = 1), Vn.normalize(), Gn.crossVectors(n, Vn), 0 === Gn.lengthSq() && (1 === Math.abs(n.z) ? Vn.x += 1e-4 : Vn.z += 1e-4, Vn.normalize(), Gn.crossVectors(n, Vn)), Gn.normalize(), Hn.crossVectors(Vn, Gn), i[0] = Gn.x, i[4] = Hn.x, i[8] = Vn.x, i[1] = Gn.y, i[5] = Hn.y, i[9] = Vn.y, i[2] = Gn.z, i[6] = Hn.z, i[10] = Vn.z, this } multiply(t) { return this.multiplyMatrices(this, t) } premultiply(t) { return this.multiplyMatrices(t, this) } multiplyMatrices(t, e) { const n = t.elements, i = e.elements, r = this.elements, a = n[0], o = n[4], s = n[8], l = n[12], c = n[1], u = n[5], h = n[9], d = n[13], p = n[2], f = n[6], m = n[10], g = n[14], v = n[3], _ = n[7], y = n[11], x = n[15], b = i[0], w = i[4], M = i[8], S = i[12], E = i[1], T = i[5], A = i[9], C = i[13], L = i[2], P = i[6], R = i[10], D = i[14], O = i[3], I = i[7], N = i[11], k = i[15]; return r[0] = a * b + o * E + s * L + l * O, r[4] = a * w + o * T + s * P + l * I, r[8] = a * M + o * A + s * R + l * N, r[12] = a * S + o * C + s * D + l * k, r[1] = c * b + u * E + h * L + d * O, r[5] = c * w + u * T + h * P + d * I, r[9] = c * M + u * A + h * R + d * N, r[13] = c * S + u * C + h * D + d * k, r[2] = p * b + f * E + m * L + g * O, r[6] = p * w + f * T + m * P + g * I, r[10] = p * M + f * A + m * R + g * N, r[14] = p * S + f * C + m * D + g * k, r[3] = v * b + _ * E + y * L + x * O, r[7] = v * w + _ * T + y * P + x * I, r[11] = v * M + _ * A + y * R + x * N, r[15] = v * S + _ * C + y * D + x * k, this } multiplyScalar(t) { const e = this.elements; return e[0] *= t, e[4] *= t, e[8] *= t, e[12] *= t, e[1] *= t, e[5] *= t, e[9] *= t, e[13] *= t, e[2] *= t, e[6] *= t, e[10] *= t, e[14] *= t, e[3] *= t, e[7] *= t, e[11] *= t, e[15] *= t, this } determinant() { const t = this.elements, e = t[0], n = t[4], i = t[8], r = t[12], a = t[1], o = t[5], s = t[9], l = t[13], c = t[2], u = t[6], h = t[10], d = t[14]; return t[3] * (+r * s * u - i * l * u - r * o * h + n * l * h + i * o * d - n * s * d) + t[7] * (+e * s * d - e * l * h + r * a * h - i * a * d + i * l * c - r * s * c) + t[11] * (+e * l * u - e * o * d - r * a * u + n * a * d + r * o * c - n * l * c) + t[15] * (-i * o * c - e * s * u + e * o * h + i * a * u - n * a * h + n * s * c) } transpose() { const t = this.elements; let e; return e = t[1], t[1] = t[4], t[4] = e, e = t[2], t[2] = t[8], t[8] = e, e = t[6], t[6] = t[9], t[9] = e, e = t[3], t[3] = t[12], t[12] = e, e = t[7], t[7] = t[13], t[13] = e, e = t[11], t[11] = t[14], t[14] = e, this } setPosition(t, e, n) { const i = this.elements; return t.isVector3 ? (i[12] = t.x, i[13] = t.y, i[14] = t.z) : (i[12] = t, i[13] = e, i[14] = n), this } invert() { const t = this.elements, e = t[0], n = t[1], i = t[2], r = t[3], a = t[4], o = t[5], s = t[6], l = t[7], c = t[8], u = t[9], h = t[10], d = t[11], p = t[12], f = t[13], m = t[14], g = t[15], v = u * m * l - f * h * l + f * s * d - o * m * d - u * s * g + o * h * g, _ = p * h * l - c * m * l - p * s * d + a * m * d + c * s * g - a * h * g, y = c * f * l - p * u * l + p * o * d - a * f * d - c * o * g + a * u * g, x = p * u * s - c * f * s - p * o * h + a * f * h + c * o * m - a * u * m, b = e * v + n * _ + i * y + r * x; if (0 === b) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); const w = 1 / b; return t[0] = v * w, t[1] = (f * h * r - u * m * r - f * i * d + n * m * d + u * i * g - n * h * g) * w, t[2] = (o * m * r - f * s * r + f * i * l - n * m * l - o * i * g + n * s * g) * w, t[3] = (u * s * r - o * h * r - u * i * l + n * h * l + o * i * d - n * s * d) * w, t[4] = _ * w, t[5] = (c * m * r - p * h * r + p * i * d - e * m * d - c * i * g + e * h * g) * w, t[6] = (p * s * r - a * m * r - p * i * l + e * m * l + a * i * g - e * s * g) * w, t[7] = (a * h * r - c * s * r + c * i * l - e * h * l - a * i * d + e * s * d) * w, t[8] = y * w, t[9] = (p * u * r - c * f * r - p * n * d + e * f * d + c * n * g - e * u * g) * w, t[10] = (a * f * r - p * o * r + p * n * l - e * f * l - a * n * g + e * o * g) * w, t[11] = (c * o * r - a * u * r - c * n * l + e * u * l + a * n * d - e * o * d) * w, t[12] = x * w, t[13] = (c * f * i - p * u * i + p * n * h - e * f * h - c * n * m + e * u * m) * w, t[14] = (p * o * i - a * f * i - p * n * s + e * f * s + a * n * m - e * o * m) * w, t[15] = (a * u * i - c * o * i + c * n * s - e * u * s - a * n * h + e * o * h) * w, this } scale(t) { const e = this.elements, n = t.x, i = t.y, r = t.z; return e[0] *= n, e[4] *= i, e[8] *= r, e[1] *= n, e[5] *= i, e[9] *= r, e[2] *= n, e[6] *= i, e[10] *= r, e[3] *= n, e[7] *= i, e[11] *= r, this } getMaxScaleOnAxis() { const t = this.elements, e = t[0] * t[0] + t[1] * t[1] + t[2] * t[2], n = t[4] * t[4] + t[5] * t[5] + t[6] * t[6], i = t[8] * t[8] + t[9] * t[9] + t[10] * t[10]; return Math.sqrt(Math.max(e, n, i)) } makeTranslation(t, e, n) { return this.set(1, 0, 0, t, 0, 1, 0, e, 0, 0, 1, n, 0, 0, 0, 1), this } makeRotationX(t) { const e = Math.cos(t), n = Math.sin(t); return this.set(1, 0, 0, 0, 0, e, -n, 0, 0, n, e, 0, 0, 0, 0, 1), this } makeRotationY(t) { const e = Math.cos(t), n = Math.sin(t); return this.set(e, 0, n, 0, 0, 1, 0, 0, -n, 0, e, 0, 0, 0, 0, 1), this } makeRotationZ(t) { const e = Math.cos(t), n = Math.sin(t); return this.set(e, -n, 0, 0, n, e, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), this } makeRotationAxis(t, e) { const n = Math.cos(e), i = Math.sin(e), r = 1 - n, a = t.x, o = t.y, s = t.z, l = r * a, c = r * o; return this.set(l * a + n, l * o - i * s, l * s + i * o, 0, l * o + i * s, c * o + n, c * s - i * a, 0, l * s - i * o, c * s + i * a, r * s * s + n, 0, 0, 0, 0, 1), this } makeScale(t, e, n) { return this.set(t, 0, 0, 0, 0, e, 0, 0, 0, 0, n, 0, 0, 0, 0, 1), this } makeShear(t, e, n, i, r, a) { return this.set(1, n, r, 0, t, 1, a, 0, e, i, 1, 0, 0, 0, 0, 1), this } compose(t, e, n) { const i = this.elements, r = e._x, a = e._y, o = e._z, s = e._w, l = r + r, c = a + a, u = o + o, h = r * l, d = r * c, p = r * u, f = a * c, m = a * u, g = o * u, v = s * l, _ = s * c, y = s * u, x = n.x, b = n.y, w = n.z; return i[0] = (1 - (f + g)) * x, i[1] = (d + y) * x, i[2] = (p - _) * x, i[3] = 0, i[4] = (d - y) * b, i[5] = (1 - (h + g)) * b, i[6] = (m + v) * b, i[7] = 0, i[8] = (p + _) * w, i[9] = (m - v) * w, i[10] = (1 - (h + f)) * w, i[11] = 0, i[12] = t.x, i[13] = t.y, i[14] = t.z, i[15] = 1, this } decompose(t, e, n) { const i = this.elements; let r = Un.set(i[0], i[1], i[2]).length(); const a = Un.set(i[4], i[5], i[6]).length(), o = Un.set(i[8], i[9], i[10]).length(); this.determinant() < 0 && (r = -r), t.x = i[12], t.y = i[13], t.z = i[14], Fn.copy(this); const s = 1 / r, l = 1 / a, c = 1 / o; return Fn.elements[0] *= s, Fn.elements[1] *= s, Fn.elements[2] *= s, Fn.elements[4] *= l, Fn.elements[5] *= l, Fn.elements[6] *= l, Fn.elements[8] *= c, Fn.elements[9] *= c, Fn.elements[10] *= c, e.setFromRotationMatrix(Fn), n.x = r, n.y = a, n.z = o, this } makePerspective(t, e, n, i, r, a) { const o = this.elements, s = 2 * r / (e - t), l = 2 * r / (n - i), c = (e + t) / (e - t), u = (n + i) / (n - i), h = -(a + r) / (a - r), d = -2 * a * r / (a - r); return o[0] = s, o[4] = 0, o[8] = c, o[12] = 0, o[1] = 0, o[5] = l, o[9] = u, o[13] = 0, o[2] = 0, o[6] = 0, o[10] = h, o[14] = d, o[3] = 0, o[7] = 0, o[11] = -1, o[15] = 0, this } makeOrthographic(t, e, n, i, r, a) { const o = this.elements, s = 1 / (e - t), l = 1 / (n - i), c = 1 / (a - r), u = (e + t) * s, h = (n + i) * l, d = (a + r) * c; return o[0] = 2 * s, o[4] = 0, o[8] = 0, o[12] = -u, o[1] = 0, o[5] = 2 * l, o[9] = 0, o[13] = -h, o[2] = 0, o[6] = 0, o[10] = -2 * c, o[14] = -d, o[3] = 0, o[7] = 0, o[11] = 0, o[15] = 1, this } equals(t) { const e = this.elements, n = t.elements; for (let t = 0; t < 16; t++)if (e[t] !== n[t]) return !1; return !0 } fromArray(t, e = 0) { for (let n = 0; n < 16; n++)this.elements[n] = t[n + e]; return this } toArray(t = [], e = 0) { const n = this.elements; return t[e] = n[0], t[e + 1] = n[1], t[e + 2] = n[2], t[e + 3] = n[3], t[e + 4] = n[4], t[e + 5] = n[5], t[e + 6] = n[6], t[e + 7] = n[7], t[e + 8] = n[8], t[e + 9] = n[9], t[e + 10] = n[10], t[e + 11] = n[11], t[e + 12] = n[12], t[e + 13] = n[13], t[e + 14] = n[14], t[e + 15] = n[15], t } } const Un = new Ge, Fn = new zn, Bn = new Ge(0, 0, 0), jn = new Ge(1, 1, 1), Gn = new Ge, Hn = new Ge, Vn = new Ge, Wn = new zn, qn = new je; class Xn { constructor(t = 0, e = 0, n = 0, i = Xn.DEFAULT_ORDER) { this.isEuler = !0, this._x = t, this._y = e, this._z = n, this._order = i } get x() { return this._x } set x(t) { this._x = t, this._onChangeCallback() } get y() { return this._y } set y(t) { this._y = t, this._onChangeCallback() } get z() { return this._z } set z(t) { this._z = t, this._onChangeCallback() } get order() { return this._order } set order(t) { this._order = t, this._onChangeCallback() } set(t, e, n, i = this._order) { return this._x = t, this._y = e, this._z = n, this._order = i, this._onChangeCallback(), this } clone() { return new this.constructor(this._x, this._y, this._z, this._order) } copy(t) { return this._x = t._x, this._y = t._y, this._z = t._z, this._order = t._order, this._onChangeCallback(), this } setFromRotationMatrix(t, e = this._order, n = !0) { const i = t.elements, r = i[0], a = i[4], o = i[8], s = i[1], l = i[5], c = i[9], u = i[2], h = i[6], d = i[10]; switch (e) { case "XYZ": this._y = Math.asin(Pe(o, -1, 1)), Math.abs(o) < .9999999 ? (this._x = Math.atan2(-c, d), this._z = Math.atan2(-a, r)) : (this._x = Math.atan2(h, l), this._z = 0); break; case "YXZ": this._x = Math.asin(-Pe(c, -1, 1)), Math.abs(c) < .9999999 ? (this._y = Math.atan2(o, d), this._z = Math.atan2(s, l)) : (this._y = Math.atan2(-u, r), this._z = 0); break; case "ZXY": this._x = Math.asin(Pe(h, -1, 1)), Math.abs(h) < .9999999 ? (this._y = Math.atan2(-u, d), this._z = Math.atan2(-a, l)) : (this._y = 0, this._z = Math.atan2(s, r)); break; case "ZYX": this._y = Math.asin(-Pe(u, -1, 1)), Math.abs(u) < .9999999 ? (this._x = Math.atan2(h, d), this._z = Math.atan2(s, r)) : (this._x = 0, this._z = Math.atan2(-a, l)); break; case "YZX": this._z = Math.asin(Pe(s, -1, 1)), Math.abs(s) < .9999999 ? (this._x = Math.atan2(-c, l), this._y = Math.atan2(-u, r)) : (this._x = 0, this._y = Math.atan2(o, d)); break; case "XZY": this._z = Math.asin(-Pe(a, -1, 1)), Math.abs(a) < .9999999 ? (this._x = Math.atan2(h, l), this._y = Math.atan2(o, r)) : (this._x = Math.atan2(-c, d), this._y = 0); break; default: console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + e) }return this._order = e, !0 === n && this._onChangeCallback(), this } setFromQuaternion(t, e, n) { return Wn.makeRotationFromQuaternion(t), this.setFromRotationMatrix(Wn, e, n) } setFromVector3(t, e = this._order) { return this.set(t.x, t.y, t.z, e) } reorder(t) { return qn.setFromEuler(this), this.setFromQuaternion(qn, t) } equals(t) { return t._x === this._x && t._y === this._y && t._z === this._z && t._order === this._order } fromArray(t) { return this._x = t[0], this._y = t[1], this._z = t[2], void 0 !== t[3] && (this._order = t[3]), this._onChangeCallback(), this } toArray(t = [], e = 0) { return t[e] = this._x, t[e + 1] = this._y, t[e + 2] = this._z, t[e + 3] = this._order, t } _onChange(t) { return this._onChangeCallback = t, this } _onChangeCallback() { } *[Symbol.iterator]() { yield this._x, yield this._y, yield this._z, yield this._order } } Xn.DEFAULT_ORDER = "XYZ"; class Yn { constructor() { this.mask = 1 } set(t) { this.mask = (1 << t | 0) >>> 0 } enable(t) { this.mask |= 1 << t | 0 } enableAll() { this.mask = -1 } toggle(t) { this.mask ^= 1 << t | 0 } disable(t) { this.mask &= ~(1 << t | 0) } disableAll() { this.mask = 0 } test(t) { return 0 != (this.mask & t.mask) } isEnabled(t) { return 0 != (this.mask & (1 << t | 0)) } } let $n = 0; const Zn = new Ge, Jn = new je, Kn = new zn, Qn = new Ge, ti = new Ge, ei = new Ge, ni = new je, ii = new Ge(1, 0, 0), ri = new Ge(0, 1, 0), ai = new Ge(0, 0, 1), oi = { type: "added" }, si = { type: "removed" }; class li extends Ee { constructor() { super(), this.isObject3D = !0, Object.defineProperty(this, "id", { value: $n++ }), this.uuid = Le(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = li.DEFAULT_UP.clone(); const t = new Ge, e = new Xn, n = new je, i = new Ge(1, 1, 1); e._onChange((function () { n.setFromEuler(e, !1) })), n._onChange((function () { e.setFromQuaternion(n, void 0, !1) })), Object.defineProperties(this, { position: { configurable: !0, enumerable: !0, value: t }, rotation: { configurable: !0, enumerable: !0, value: e }, quaternion: { configurable: !0, enumerable: !0, value: n }, scale: { configurable: !0, enumerable: !0, value: i }, modelViewMatrix: { value: new zn }, normalMatrix: { value: new ze } }), this.matrix = new zn, this.matrixWorld = new zn, this.matrixAutoUpdate = li.DEFAULT_MATRIX_AUTO_UPDATE, this.matrixWorldNeedsUpdate = !1, this.matrixWorldAutoUpdate = li.DEFAULT_MATRIX_WORLD_AUTO_UPDATE, this.layers = new Yn, this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.animations = [], this.userData = {} } onBeforeRender() { } onAfterRender() { } applyMatrix4(t) { this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(t), this.matrix.decompose(this.position, this.quaternion, this.scale) } applyQuaternion(t) { return this.quaternion.premultiply(t), this } setRotationFromAxisAngle(t, e) { this.quaternion.setFromAxisAngle(t, e) } setRotationFromEuler(t) { this.quaternion.setFromEuler(t, !0) } setRotationFromMatrix(t) { this.quaternion.setFromRotationMatrix(t) } setRotationFromQuaternion(t) { this.quaternion.copy(t) } rotateOnAxis(t, e) { return Jn.setFromAxisAngle(t, e), this.quaternion.multiply(Jn), this } rotateOnWorldAxis(t, e) { return Jn.setFromAxisAngle(t, e), this.quaternion.premultiply(Jn), this } rotateX(t) { return this.rotateOnAxis(ii, t) } rotateY(t) { return this.rotateOnAxis(ri, t) } rotateZ(t) { return this.rotateOnAxis(ai, t) } translateOnAxis(t, e) { return Zn.copy(t).applyQuaternion(this.quaternion), this.position.add(Zn.multiplyScalar(e)), this } translateX(t) { return this.translateOnAxis(ii, t) } translateY(t) { return this.translateOnAxis(ri, t) } translateZ(t) { return this.translateOnAxis(ai, t) } localToWorld(t) { return this.updateWorldMatrix(!0, !1), t.applyMatrix4(this.matrixWorld) } worldToLocal(t) { return this.updateWorldMatrix(!0, !1), t.applyMatrix4(Kn.copy(this.matrixWorld).invert()) } lookAt(t, e, n) { t.isVector3 ? Qn.copy(t) : Qn.set(t, e, n); const i = this.parent; this.updateWorldMatrix(!0, !1), ti.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? Kn.lookAt(ti, Qn, this.up) : Kn.lookAt(Qn, ti, this.up), this.quaternion.setFromRotationMatrix(Kn), i && (Kn.extractRotation(i.matrixWorld), Jn.setFromRotationMatrix(Kn), this.quaternion.premultiply(Jn.invert())) } add(t) { if (arguments.length > 1) { for (let t = 0; t < arguments.length; t++)this.add(arguments[t]); return this } return t === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", t), this) : (t && t.isObject3D ? (null !== t.parent && t.parent.remove(t), t.parent = this, this.children.push(t), t.dispatchEvent(oi)) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", t), this) } remove(t) { if (arguments.length > 1) { for (let t = 0; t < arguments.length; t++)this.remove(arguments[t]); return this } const e = this.children.indexOf(t); return -1 !== e && (t.parent = null, this.children.splice(e, 1), t.dispatchEvent(si)), this } removeFromParent() { const t = this.parent; return null !== t && t.remove(this), this } clear() { for (let t = 0; t < this.children.length; t++) { const e = this.children[t]; e.parent = null, e.dispatchEvent(si) } return this.children.length = 0, this } attach(t) { return this.updateWorldMatrix(!0, !1), Kn.copy(this.matrixWorld).invert(), null !== t.parent && (t.parent.updateWorldMatrix(!0, !1), Kn.multiply(t.parent.matrixWorld)), t.applyMatrix4(Kn), this.add(t), t.updateWorldMatrix(!1, !0), this } getObjectById(t) { return this.getObjectByProperty("id", t) } getObjectByName(t) { return this.getObjectByProperty("name", t) } getObjectByProperty(t, e) { if (this[t] === e) return this; for (let n = 0, i = this.children.length; n < i; n++) { const i = this.children[n].getObjectByProperty(t, e); if (void 0 !== i) return i } } getObjectsByProperty(t, e) { let n = []; this[t] === e && n.push(this); for (let i = 0, r = this.children.length; i < r; i++) { const r = this.children[i].getObjectsByProperty(t, e); r.length > 0 && (n = n.concat(r)) } return n } getWorldPosition(t) { return this.updateWorldMatrix(!0, !1), t.setFromMatrixPosition(this.matrixWorld) } getWorldQuaternion(t) { return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(ti, t, ei), t } getWorldScale(t) { return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(ti, ni, t), t } getWorldDirection(t) { this.updateWorldMatrix(!0, !1); const e = this.matrixWorld.elements; return t.set(e[8], e[9], e[10]).normalize() } raycast() { } traverse(t) { t(this); const e = this.children; for (let n = 0, i = e.length; n < i; n++)e[n].traverse(t) } traverseVisible(t) { if (!1 === this.visible) return; t(this); const e = this.children; for (let n = 0, i = e.length; n < i; n++)e[n].traverseVisible(t) } traverseAncestors(t) { const e = this.parent; null !== e && (t(e), e.traverseAncestors(t)) } updateMatrix() { this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0 } updateMatrixWorld(t) { this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || t) && (null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), this.matrixWorldNeedsUpdate = !1, t = !0); const e = this.children; for (let n = 0, i = e.length; n < i; n++) { const i = e[n]; !0 !== i.matrixWorldAutoUpdate && !0 !== t || i.updateMatrixWorld(t) } } updateWorldMatrix(t, e) { const n = this.parent; if (!0 === t && null !== n && !0 === n.matrixWorldAutoUpdate && n.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), null === this.parent ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix), !0 === e) { const t = this.children; for (let e = 0, n = t.length; e < n; e++) { const n = t[e]; !0 === n.matrixWorldAutoUpdate && n.updateWorldMatrix(!1, !0) } } } toJSON(t) { const e = void 0 === t || "string" == typeof t, n = {}; e && (t = { geometries: {}, materials: {}, textures: {}, images: {}, shapes: {}, skeletons: {}, animations: {}, nodes: {} }, n.metadata = { version: 4.5, type: "Object", generator: "Object3D.toJSON" }); const i = {}; function r(e, n) { return void 0 === e[n.uuid] && (e[n.uuid] = n.toJSON(t)), n.uuid } if (i.uuid = this.uuid, i.type = this.type, "" !== this.name && (i.name = this.name), !0 === this.castShadow && (i.castShadow = !0), !0 === this.receiveShadow && (i.receiveShadow = !0), !1 === this.visible && (i.visible = !1), !1 === this.frustumCulled && (i.frustumCulled = !1), 0 !== this.renderOrder && (i.renderOrder = this.renderOrder), Object.keys(this.userData).length > 0 && (i.userData = this.userData), i.layers = this.layers.mask, i.matrix = this.matrix.toArray(), !1 === this.matrixAutoUpdate && (i.matrixAutoUpdate = !1), this.isInstancedMesh && (i.type = "InstancedMesh", i.count = this.count, i.instanceMatrix = this.instanceMatrix.toJSON(), null !== this.instanceColor && (i.instanceColor = this.instanceColor.toJSON())), this.isScene) this.background && (this.background.isColor ? i.background = this.background.toJSON() : this.background.isTexture && (i.background = this.background.toJSON(t).uuid)), this.environment && this.environment.isTexture && !0 !== this.environment.isRenderTargetTexture && (i.environment = this.environment.toJSON(t).uuid); else if (this.isMesh || this.isLine || this.isPoints) { i.geometry = r(t.geometries, this.geometry); const e = this.geometry.parameters; if (void 0 !== e && void 0 !== e.shapes) { const n = e.shapes; if (Array.isArray(n)) for (let e = 0, i = n.length; e < i; e++) { const i = n[e]; r(t.shapes, i) } else r(t.shapes, n) } } if (this.isSkinnedMesh && (i.bindMode = this.bindMode, i.bindMatrix = this.bindMatrix.toArray(), void 0 !== this.skeleton && (r(t.skeletons, this.skeleton), i.skeleton = this.skeleton.uuid)), void 0 !== this.material) if (Array.isArray(this.material)) { const e = []; for (let n = 0, i = this.material.length; n < i; n++)e.push(r(t.materials, this.material[n])); i.material = e } else i.material = r(t.materials, this.material); if (this.children.length > 0) { i.children = []; for (let e = 0; e < this.children.length; e++)i.children.push(this.children[e].toJSON(t).object) } if (this.animations.length > 0) { i.animations = []; for (let e = 0; e < this.animations.length; e++) { const n = this.animations[e]; i.animations.push(r(t.animations, n)) } } if (e) { const e = a(t.geometries), i = a(t.materials), r = a(t.textures), o = a(t.images), s = a(t.shapes), l = a(t.skeletons), c = a(t.animations), u = a(t.nodes); e.length > 0 && (n.geometries = e), i.length > 0 && (n.materials = i), r.length > 0 && (n.textures = r), o.length > 0 && (n.images = o), s.length > 0 && (n.shapes = s), l.length > 0 && (n.skeletons = l), c.length > 0 && (n.animations = c), u.length > 0 && (n.nodes = u) } return n.object = i, n; function a(t) { const e = []; for (const n in t) { const i = t[n]; delete i.metadata, e.push(i) } return e } } clone(t) { return (new this.constructor).copy(this, t) } copy(t, e = !0) { if (this.name = t.name, this.up.copy(t.up), this.position.copy(t.position), this.rotation.order = t.rotation.order, this.quaternion.copy(t.quaternion), this.scale.copy(t.scale), this.matrix.copy(t.matrix), this.matrixWorld.copy(t.matrixWorld), this.matrixAutoUpdate = t.matrixAutoUpdate, this.matrixWorldNeedsUpdate = t.matrixWorldNeedsUpdate, this.matrixWorldAutoUpdate = t.matrixWorldAutoUpdate, this.layers.mask = t.layers.mask, this.visible = t.visible, this.castShadow = t.castShadow, this.receiveShadow = t.receiveShadow, this.frustumCulled = t.frustumCulled, this.renderOrder = t.renderOrder, this.userData = JSON.parse(JSON.stringify(t.userData)), !0 === e) for (let e = 0; e < t.children.length; e++) { const n = t.children[e]; this.add(n.clone()) } return this } } li.DEFAULT_UP = new Ge(0, 1, 0), li.DEFAULT_MATRIX_AUTO_UPDATE = !0, li.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0; const ci = new Ge, ui = new Ge, hi = new Ge, di = new Ge, pi = new Ge, fi = new Ge, mi = new Ge, gi = new Ge, vi = new Ge, _i = new Ge; class yi { constructor(t = new Ge, e = new Ge, n = new Ge) { this.a = t, this.b = e, this.c = n } static getNormal(t, e, n, i) { i.subVectors(n, e), ci.subVectors(t, e), i.cross(ci); const r = i.lengthSq(); return r > 0 ? i.multiplyScalar(1 / Math.sqrt(r)) : i.set(0, 0, 0) } static getBarycoord(t, e, n, i, r) { ci.subVectors(i, e), ui.subVectors(n, e), hi.subVectors(t, e); const a = ci.dot(ci), o = ci.dot(ui), s = ci.dot(hi), l = ui.dot(ui), c = ui.dot(hi), u = a * l - o * o; if (0 === u) return r.set(-2, -1, -1); const h = 1 / u, d = (l * s - o * c) * h, p = (a * c - o * s) * h; return r.set(1 - d - p, p, d) } static containsPoint(t, e, n, i) { return this.getBarycoord(t, e, n, i, di), di.x >= 0 && di.y >= 0 && di.x + di.y <= 1 } static getUV(t, e, n, i, r, a, o, s) { return this.getBarycoord(t, e, n, i, di), s.set(0, 0), s.addScaledVector(r, di.x), s.addScaledVector(a, di.y), s.addScaledVector(o, di.z), s } static isFrontFacing(t, e, n, i) { return ci.subVectors(n, e), ui.subVectors(t, e), ci.cross(ui).dot(i) < 0 } set(t, e, n) { return this.a.copy(t), this.b.copy(e), this.c.copy(n), this } setFromPointsAndIndices(t, e, n, i) { return this.a.copy(t[e]), this.b.copy(t[n]), this.c.copy(t[i]), this } setFromAttributeAndIndices(t, e, n, i) { return this.a.fromBufferAttribute(t, e), this.b.fromBufferAttribute(t, n), this.c.fromBufferAttribute(t, i), this } clone() { return (new this.constructor).copy(this) } copy(t) { return this.a.copy(t.a), this.b.copy(t.b), this.c.copy(t.c), this } getArea() { return ci.subVectors(this.c, this.b), ui.subVectors(this.a, this.b), .5 * ci.cross(ui).length() } getMidpoint(t) { return t.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3) } getNormal(t) { return yi.getNormal(this.a, this.b, this.c, t) } getPlane(t) { return t.setFromCoplanarPoints(this.a, this.b, this.c) } getBarycoord(t, e) { return yi.getBarycoord(t, this.a, this.b, this.c, e) } getUV(t, e, n, i, r) { return yi.getUV(t, this.a, this.b, this.c, e, n, i, r) } containsPoint(t) { return yi.containsPoint(t, this.a, this.b, this.c) } isFrontFacing(t) { return yi.isFrontFacing(this.a, this.b, this.c, t) } intersectsBox(t) { return t.intersectsTriangle(this) } closestPointToPoint(t, e) { const n = this.a, i = this.b, r = this.c; let a, o; pi.subVectors(i, n), fi.subVectors(r, n), gi.subVectors(t, n); const s = pi.dot(gi), l = fi.dot(gi); if (s <= 0 && l <= 0) return e.copy(n); vi.subVectors(t, i); const c = pi.dot(vi), u = fi.dot(vi); if (c >= 0 && u <= c) return e.copy(i); const h = s * u - c * l; if (h <= 0 && s >= 0 && c <= 0) return a = s / (s - c), e.copy(n).addScaledVector(pi, a); _i.subVectors(t, r); const d = pi.dot(_i), p = fi.dot(_i); if (p >= 0 && d <= p) return e.copy(r); const f = d * l - s * p; if (f <= 0 && l >= 0 && p <= 0) return o = l / (l - p), e.copy(n).addScaledVector(fi, o); const m = c * p - d * u; if (m <= 0 && u - c >= 0 && d - p >= 0) return mi.subVectors(r, i), o = (u - c) / (u - c + (d - p)), e.copy(i).addScaledVector(mi, o); const g = 1 / (m + f + h); return a = f * g, o = h * g, e.copy(n).addScaledVector(pi, a).addScaledVector(fi, o) } equals(t) { return t.a.equals(this.a) && t.b.equals(this.b) && t.c.equals(this.c) } } let xi = 0; class bi extends Ee { constructor() { super(), this.isMaterial = !0, Object.defineProperty(this, "id", { value: xi++ }), this.uuid = Le(), this.name = "", this.type = "Material", this.blending = _, this.side = f, this.vertexColors = !1, this.opacity = 1, this.transparent = !1, this.blendSrc = D, this.blendDst = O, this.blendEquation = M, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.depthFunc = G, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 255, this.stencilFunc = 519, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = we, this.stencilZFail = we, this.stencilZPass = we, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaToCoverage = !1, this.premultipliedAlpha = !1, this.forceSinglePass = !1, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0, this._alphaTest = 0 } get alphaTest() { return this._alphaTest } set alphaTest(t) { this._alphaTest > 0 != t > 0 && this.version++, this._alphaTest = t } onBuild() { } onBeforeRender() { } onBeforeCompile() { } customProgramCacheKey() { return this.onBeforeCompile.toString() } setValues(t) { if (void 0 !== t) for (const e in t) { const n = t[e]; if (void 0 === n) { console.warn("THREE.Material: '" + e + "' parameter is undefined."); continue } const i = this[e]; void 0 !== i ? i && i.isColor ? i.set(n) : i && i.isVector3 && n && n.isVector3 ? i.copy(n) : this[e] = n : console.warn("THREE." + this.type + ": '" + e + "' is not a property of this material.") } } toJSON(t) { const e = void 0 === t || "string" == typeof t; e && (t = { textures: {}, images: {} }); const n = { metadata: { version: 4.5, type: "Material", generator: "Material.toJSON" } }; function i(t) { const e = []; for (const n in t) { const i = t[n]; delete i.metadata, e.push(i) } return e } if (n.uuid = this.uuid, n.type = this.type, "" !== this.name && (n.name = this.name), this.color && this.color.isColor && (n.color = this.color.getHex()), void 0 !== this.roughness && (n.roughness = this.roughness), void 0 !== this.metalness && (n.metalness = this.metalness), void 0 !== this.sheen && (n.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (n.sheenColor = this.sheenColor.getHex()), void 0 !== this.sheenRoughness && (n.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (n.emissive = this.emissive.getHex()), this.emissiveIntensity && 1 !== this.emissiveIntensity && (n.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (n.specular = this.specular.getHex()), void 0 !== this.specularIntensity && (n.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (n.specularColor = this.specularColor.getHex()), void 0 !== this.shininess && (n.shininess = this.shininess), void 0 !== this.clearcoat && (n.clearcoat = this.clearcoat), void 0 !== this.clearcoatRoughness && (n.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (n.clearcoatMap = this.clearcoatMap.toJSON(t).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (n.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(t).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (n.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(t).uuid, n.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), void 0 !== this.iridescence && (n.iridescence = this.iridescence), void 0 !== this.iridescenceIOR && (n.iridescenceIOR = this.iridescenceIOR), void 0 !== this.iridescenceThicknessRange && (n.iridescenceThicknessRange = this.iridescenceThicknessRange), this.iridescenceMap && this.iridescenceMap.isTexture && (n.iridescenceMap = this.iridescenceMap.toJSON(t).uuid), this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture && (n.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(t).uuid), this.map && this.map.isTexture && (n.map = this.map.toJSON(t).uuid), this.matcap && this.matcap.isTexture && (n.matcap = this.matcap.toJSON(t).uuid), this.alphaMap && this.alphaMap.isTexture && (n.alphaMap = this.alphaMap.toJSON(t).uuid), this.lightMap && this.lightMap.isTexture && (n.lightMap = this.lightMap.toJSON(t).uuid, n.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (n.aoMap = this.aoMap.toJSON(t).uuid, n.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (n.bumpMap = this.bumpMap.toJSON(t).uuid, n.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (n.normalMap = this.normalMap.toJSON(t).uuid, n.normalMapType = this.normalMapType, n.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (n.displacementMap = this.displacementMap.toJSON(t).uuid, n.displacementScale = this.displacementScale, n.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (n.roughnessMap = this.roughnessMap.toJSON(t).uuid), this.metalnessMap && this.metalnessMap.isTexture && (n.metalnessMap = this.metalnessMap.toJSON(t).uuid), this.emissiveMap && this.emissiveMap.isTexture && (n.emissiveMap = this.emissiveMap.toJSON(t).uuid), this.specularMap && this.specularMap.isTexture && (n.specularMap = this.specularMap.toJSON(t).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (n.specularIntensityMap = this.specularIntensityMap.toJSON(t).uuid), this.specularColorMap && this.specularColorMap.isTexture && (n.specularColorMap = this.specularColorMap.toJSON(t).uuid), this.envMap && this.envMap.isTexture && (n.envMap = this.envMap.toJSON(t).uuid, void 0 !== this.combine && (n.combine = this.combine)), void 0 !== this.envMapIntensity && (n.envMapIntensity = this.envMapIntensity), void 0 !== this.reflectivity && (n.reflectivity = this.reflectivity), void 0 !== this.refractionRatio && (n.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (n.gradientMap = this.gradientMap.toJSON(t).uuid), void 0 !== this.transmission && (n.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (n.transmissionMap = this.transmissionMap.toJSON(t).uuid), void 0 !== this.thickness && (n.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (n.thicknessMap = this.thicknessMap.toJSON(t).uuid), void 0 !== this.attenuationDistance && this.attenuationDistance !== 1 / 0 && (n.attenuationDistance = this.attenuationDistance), void 0 !== this.attenuationColor && (n.attenuationColor = this.attenuationColor.getHex()), void 0 !== this.size && (n.size = this.size), null !== this.shadowSide && (n.shadowSide = this.shadowSide), void 0 !== this.sizeAttenuation && (n.sizeAttenuation = this.sizeAttenuation), this.blending !== _ && (n.blending = this.blending), this.side !== f && (n.side = this.side), this.vertexColors && (n.vertexColors = !0), this.opacity < 1 && (n.opacity = this.opacity), !0 === this.transparent && (n.transparent = this.transparent), n.depthFunc = this.depthFunc, n.depthTest = this.depthTest, n.depthWrite = this.depthWrite, n.colorWrite = this.colorWrite, n.stencilWrite = this.stencilWrite, n.stencilWriteMask = this.stencilWriteMask, n.stencilFunc = this.stencilFunc, n.stencilRef = this.stencilRef, n.stencilFuncMask = this.stencilFuncMask, n.stencilFail = this.stencilFail, n.stencilZFail = this.stencilZFail, n.stencilZPass = this.stencilZPass, void 0 !== this.rotation && 0 !== this.rotation && (n.rotation = this.rotation), !0 === this.polygonOffset && (n.polygonOffset = !0), 0 !== this.polygonOffsetFactor && (n.polygonOffsetFactor = this.polygonOffsetFactor), 0 !== this.polygonOffsetUnits && (n.polygonOffsetUnits = this.polygonOffsetUnits), void 0 !== this.linewidth && 1 !== this.linewidth && (n.linewidth = this.linewidth), void 0 !== this.dashSize && (n.dashSize = this.dashSize), void 0 !== this.gapSize && (n.gapSize = this.gapSize), void 0 !== this.scale && (n.scale = this.scale), !0 === this.dithering && (n.dithering = !0), this.alphaTest > 0 && (n.alphaTest = this.alphaTest), !0 === this.alphaToCoverage && (n.alphaToCoverage = this.alphaToCoverage), !0 === this.premultipliedAlpha && (n.premultipliedAlpha = this.premultipliedAlpha), !0 === this.forceSinglePass && (n.forceSinglePass = this.forceSinglePass), !0 === this.wireframe && (n.wireframe = this.wireframe), this.wireframeLinewidth > 1 && (n.wireframeLinewidth = this.wireframeLinewidth), "round" !== this.wireframeLinecap && (n.wireframeLinecap = this.wireframeLinecap), "round" !== this.wireframeLinejoin && (n.wireframeLinejoin = this.wireframeLinejoin), !0 === this.flatShading && (n.flatShading = this.flatShading), !1 === this.visible && (n.visible = !1), !1 === this.toneMapped && (n.toneMapped = !1), !1 === this.fog && (n.fog = !1), Object.keys(this.userData).length > 0 && (n.userData = this.userData), e) { const e = i(t.textures), r = i(t.images); e.length > 0 && (n.textures = e), r.length > 0 && (n.images = r) } return n } clone() { return (new this.constructor).copy(this) } copy(t) { this.name = t.name, this.blending = t.blending, this.side = t.side, this.vertexColors = t.vertexColors, this.opacity = t.opacity, this.transparent = t.transparent, this.blendSrc = t.blendSrc, this.blendDst = t.blendDst, this.blendEquation = t.blendEquation, this.blendSrcAlpha = t.blendSrcAlpha, this.blendDstAlpha = t.blendDstAlpha, this.blendEquationAlpha = t.blendEquationAlpha, this.depthFunc = t.depthFunc, this.depthTest = t.depthTest, this.depthWrite = t.depthWrite, this.stencilWriteMask = t.stencilWriteMask, this.stencilFunc = t.stencilFunc, this.stencilRef = t.stencilRef, this.stencilFuncMask = t.stencilFuncMask, this.stencilFail = t.stencilFail, this.stencilZFail = t.stencilZFail, this.stencilZPass = t.stencilZPass, this.stencilWrite = t.stencilWrite; const e = t.clippingPlanes; let n = null; if (null !== e) { const t = e.length; n = new Array(t); for (let i = 0; i !== t; ++i)n[i] = e[i].clone() } return this.clippingPlanes = n, this.clipIntersection = t.clipIntersection, this.clipShadows = t.clipShadows, this.shadowSide = t.shadowSide, this.colorWrite = t.colorWrite, this.precision = t.precision, this.polygonOffset = t.polygonOffset, this.polygonOffsetFactor = t.polygonOffsetFactor, this.polygonOffsetUnits = t.polygonOffsetUnits, this.dithering = t.dithering, this.alphaTest = t.alphaTest, this.alphaToCoverage = t.alphaToCoverage, this.premultipliedAlpha = t.premultipliedAlpha, this.forceSinglePass = t.forceSinglePass, this.visible = t.visible, this.toneMapped = t.toneMapped, this.userData = JSON.parse(JSON.stringify(t.userData)), this } dispose() { this.dispatchEvent({ type: "dispose" }) } set needsUpdate(t) { !0 === t && this.version++ } } const wi = { aliceblue: 15792383, antiquewhite: 16444375, aqua: 65535, aquamarine: 8388564, azure: 15794175, beige: 16119260, bisque: 16770244, black: 0, blanchedalmond: 16772045, blue: 255, blueviolet: 9055202, brown: 10824234, burlywood: 14596231, cadetblue: 6266528, chartreuse: 8388352, chocolate: 13789470, coral: 16744272, cornflowerblue: 6591981, cornsilk: 16775388, crimson: 14423100, cyan: 65535, darkblue: 139, darkcyan: 35723, darkgoldenrod: 12092939, darkgray: 11119017, darkgreen: 25600, darkgrey: 11119017, darkkhaki: 12433259, darkmagenta: 9109643, darkolivegreen: 5597999, darkorange: 16747520, darkorchid: 10040012, darkred: 9109504, darksalmon: 15308410, darkseagreen: 9419919, darkslateblue: 4734347, darkslategray: 3100495, darkslategrey: 3100495, darkturquoise: 52945, darkviolet: 9699539, deeppink: 16716947, deepskyblue: 49151, dimgray: 6908265, dimgrey: 6908265, dodgerblue: 2003199, firebrick: 11674146, floralwhite: 16775920, forestgreen: 2263842, fuchsia: 16711935, gainsboro: 14474460, ghostwhite: 16316671, gold: 16766720, goldenrod: 14329120, gray: 8421504, green: 32768, greenyellow: 11403055, grey: 8421504, honeydew: 15794160, hotpink: 16738740, indianred: 13458524, indigo: 4915330, ivory: 16777200, khaki: 15787660, lavender: 15132410, lavenderblush: 16773365, lawngreen: 8190976, lemonchiffon: 16775885, lightblue: 11393254, lightcoral: 15761536, lightcyan: 14745599, lightgoldenrodyellow: 16448210, lightgray: 13882323, lightgreen: 9498256, lightgrey: 13882323, lightpink: 16758465, lightsalmon: 16752762, lightseagreen: 2142890, lightskyblue: 8900346, lightslategray: 7833753, lightslategrey: 7833753, lightsteelblue: 11584734, lightyellow: 16777184, lime: 65280, limegreen: 3329330, linen: 16445670, magenta: 16711935, maroon: 8388608, mediumaquamarine: 6737322, mediumblue: 205, mediumorchid: 12211667, mediumpurple: 9662683, mediumseagreen: 3978097, mediumslateblue: 8087790, mediumspringgreen: 64154, mediumturquoise: 4772300, mediumvioletred: 13047173, midnightblue: 1644912, mintcream: 16121850, mistyrose: 16770273, moccasin: 16770229, navajowhite: 16768685, navy: 128, oldlace: 16643558, olive: 8421376, olivedrab: 7048739, orange: 16753920, orangered: 16729344, orchid: 14315734, palegoldenrod: 15657130, palegreen: 10025880, paleturquoise: 11529966, palevioletred: 14381203, papayawhip: 16773077, peachpuff: 16767673, peru: 13468991, pink: 16761035, plum: 14524637, powderblue: 11591910, purple: 8388736, rebeccapurple: 6697881, red: 16711680, rosybrown: 12357519, royalblue: 4286945, saddlebrown: 9127187, salmon: 16416882, sandybrown: 16032864, seagreen: 3050327, seashell: 16774638, sienna: 10506797, silver: 12632256, skyblue: 8900331, slateblue: 6970061, slategray: 7372944, slategrey: 7372944, snow: 16775930, springgreen: 65407, steelblue: 4620980, tan: 13808780, teal: 32896, thistle: 14204888, tomato: 16737095, turquoise: 4251856, violet: 15631086, wheat: 16113331, white: 16777215, whitesmoke: 16119285, yellow: 16776960, yellowgreen: 10145074 }, Mi = { h: 0, s: 0, l: 0 }, Si = { h: 0, s: 0, l: 0 }; function Ei(t, e, n) { return n < 0 && (n += 1), n > 1 && (n -= 1), n < 1 / 6 ? t + 6 * (e - t) * n : n < .5 ? e : n < 2 / 3 ? t + 6 * (e - t) * (2 / 3 - n) : t } class Ti { constructor(t, e, n) { return this.isColor = !0, this.r = 1, this.g = 1, this.b = 1, void 0 === e && void 0 === n ? this.set(t) : this.setRGB(t, e, n) } set(t) { return t && t.isColor ? this.copy(t) : "number" == typeof t ? this.setHex(t) : "string" == typeof t && this.setStyle(t), this } setScalar(t) { return this.r = t, this.g = t, this.b = t, this } setHex(t, e = ye) { return t = Math.floor(t), this.r = (t >> 16 & 255) / 255, this.g = (t >> 8 & 255) / 255, this.b = (255 & t) / 255, Ke.toWorkingColorSpace(this, e), this } setRGB(t, e, n, i = Ke.workingColorSpace) { return this.r = t, this.g = e, this.b = n, Ke.toWorkingColorSpace(this, i), this } setHSL(t, e, n, i = Ke.workingColorSpace) { if (t = function (t, e) { return (t % e + e) % e }(t, 1), e = Pe(e, 0, 1), n = Pe(n, 0, 1), 0 === e) this.r = this.g = this.b = n; else { const i = n <= .5 ? n * (1 + e) : n + e - n * e, r = 2 * n - i; this.r = Ei(r, i, t + 1 / 3), this.g = Ei(r, i, t), this.b = Ei(r, i, t - 1 / 3) } return Ke.toWorkingColorSpace(this, i), this } setStyle(t, e = ye) { function n(e) { void 0 !== e && parseFloat(e) < 1 && console.warn("THREE.Color: Alpha component of " + t + " will be ignored.") } let i; if (i = /^(\w+)\(([^\)]*)\)/.exec(t)) { let r; const a = i[1], o = i[2]; switch (a) { case "rgb": case "rgba": if (r = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) return this.r = Math.min(255, parseInt(r[1], 10)) / 255, this.g = Math.min(255, parseInt(r[2], 10)) / 255, this.b = Math.min(255, parseInt(r[3], 10)) / 255, Ke.toWorkingColorSpace(this, e), n(r[4]), this; if (r = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) return this.r = Math.min(100, parseInt(r[1], 10)) / 100, this.g = Math.min(100, parseInt(r[2], 10)) / 100, this.b = Math.min(100, parseInt(r[3], 10)) / 100, Ke.toWorkingColorSpace(this, e), n(r[4]), this; break; case "hsl": case "hsla": if (r = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(o)) { const t = parseFloat(r[1]) / 360, i = parseFloat(r[2]) / 100, a = parseFloat(r[3]) / 100; return n(r[4]), this.setHSL(t, i, a, e) } break; default: console.warn("THREE.Color: Unknown color model " + t) } } else if (i = /^\#([A-Fa-f\d]+)$/.exec(t)) { const n = i[1], r = n.length; if (3 === r) return this.r = parseInt(n.charAt(0) + n.charAt(0), 16) / 255, this.g = parseInt(n.charAt(1) + n.charAt(1), 16) / 255, this.b = parseInt(n.charAt(2) + n.charAt(2), 16) / 255, Ke.toWorkingColorSpace(this, e), this; if (6 === r) return this.r = parseInt(n.charAt(0) + n.charAt(1), 16) / 255, this.g = parseInt(n.charAt(2) + n.charAt(3), 16) / 255, this.b = parseInt(n.charAt(4) + n.charAt(5), 16) / 255, Ke.toWorkingColorSpace(this, e), this; console.warn("THREE.Color: Invalid hex color " + t) } else if (t && t.length > 0) return this.setColorName(t, e); return this } setColorName(t, e = ye) { const n = wi[t.toLowerCase()]; return void 0 !== n ? this.setHex(n, e) : console.warn("THREE.Color: Unknown color " + t), this } clone() { return new this.constructor(this.r, this.g, this.b) } copy(t) { return this.r = t.r, this.g = t.g, this.b = t.b, this } copySRGBToLinear(t) { return this.r = We(t.r), this.g = We(t.g), this.b = We(t.b), this } copyLinearToSRGB(t) { return this.r = qe(t.r), this.g = qe(t.g), this.b = qe(t.b), this } convertSRGBToLinear() { return this.copySRGBToLinear(this), this } convertLinearToSRGB() { return this.copyLinearToSRGB(this), this } getHex(t = ye) { return Ke.fromWorkingColorSpace(Ai.copy(this), t), Pe(255 * Ai.r, 0, 255) << 16 ^ Pe(255 * Ai.g, 0, 255) << 8 ^ Pe(255 * Ai.b, 0, 255) << 0 } getHexString(t = ye) { return ("000000" + this.getHex(t).toString(16)).slice(-6) } getHSL(t, e = Ke.workingColorSpace) { Ke.fromWorkingColorSpace(Ai.copy(this), e); const n = Ai.r, i = Ai.g, r = Ai.b, a = Math.max(n, i, r), o = Math.min(n, i, r); let s, l; const c = (o + a) / 2; if (o === a) s = 0, l = 0; else { const t = a - o; switch (l = c <= .5 ? t / (a + o) : t / (2 - a - o), a) { case n: s = (i - r) / t + (i < r ? 6 : 0); break; case i: s = (r - n) / t + 2; break; case r: s = (n - i) / t + 4 }s /= 6 } return t.h = s, t.s = l, t.l = c, t } getRGB(t, e = Ke.workingColorSpace) { return Ke.fromWorkingColorSpace(Ai.copy(this), e), t.r = Ai.r, t.g = Ai.g, t.b = Ai.b, t } getStyle(t = ye) { Ke.fromWorkingColorSpace(Ai.copy(this), t); const e = Ai.r, n = Ai.g, i = Ai.b; return t !== ye ? `color(${t} ${e.toFixed(3)} ${n.toFixed(3)} ${i.toFixed(3)})` : `rgb(${255 * e | 0},${255 * n | 0},${255 * i | 0})` } offsetHSL(t, e, n) { return this.getHSL(Mi), Mi.h += t, Mi.s += e, Mi.l += n, this.setHSL(Mi.h, Mi.s, Mi.l), this } add(t) { return this.r += t.r, this.g += t.g, this.b += t.b, this } addColors(t, e) { return this.r = t.r + e.r, this.g = t.g + e.g, this.b = t.b + e.b, this } addScalar(t) { return this.r += t, this.g += t, this.b += t, this } sub(t) { return this.r = Math.max(0, this.r - t.r), this.g = Math.max(0, this.g - t.g), this.b = Math.max(0, this.b - t.b), this } multiply(t) { return this.r *= t.r, this.g *= t.g, this.b *= t.b, this } multiplyScalar(t) { return this.r *= t, this.g *= t, this.b *= t, this } lerp(t, e) { return this.r += (t.r - this.r) * e, this.g += (t.g - this.g) * e, this.b += (t.b - this.b) * e, this } lerpColors(t, e, n) { return this.r = t.r + (e.r - t.r) * n, this.g = t.g + (e.g - t.g) * n, this.b = t.b + (e.b - t.b) * n, this } lerpHSL(t, e) { this.getHSL(Mi), t.getHSL(Si); const n = Re(Mi.h, Si.h, e), i = Re(Mi.s, Si.s, e), r = Re(Mi.l, Si.l, e); return this.setHSL(n, i, r), this } equals(t) { return t.r === this.r && t.g === this.g && t.b === this.b } fromArray(t, e = 0) { return this.r = t[e], this.g = t[e + 1], this.b = t[e + 2], this } toArray(t = [], e = 0) { return t[e] = this.r, t[e + 1] = this.g, t[e + 2] = this.b, t } fromBufferAttribute(t, e) { return this.r = t.getX(e), this.g = t.getY(e), this.b = t.getZ(e), this } toJSON() { return this.getHex() } *[Symbol.iterator]() { yield this.r, yield this.g, yield this.b } } const Ai = new Ti; Ti.NAMES = wi; class Ci extends bi { constructor(t) { super(), this.isMeshBasicMaterial = !0, this.type = "MeshBasicMaterial", this.color = new Ti(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = X, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(t) } copy(t) { return super.copy(t), this.color.copy(t.color), this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.specularMap = t.specularMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.combine = t.combine, this.reflectivity = t.reflectivity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.fog = t.fog, this } } const Li = new Ge, Pi = new ke; class Ri { constructor(t, e, n = !1) { if (Array.isArray(t)) throw new TypeError("THREE.BufferAttribute: array should be a Typed Array."); this.isBufferAttribute = !0, this.name = "", this.array = t, this.itemSize = e, this.count = void 0 !== t ? t.length / e : 0, this.normalized = n, this.usage = 35044, this.updateRange = { offset: 0, count: -1 }, this.version = 0 } onUploadCallback() { } set needsUpdate(t) { !0 === t && this.version++ } setUsage(t) { return this.usage = t, this } copy(t) { return this.name = t.name, this.array = new t.array.constructor(t.array), this.itemSize = t.itemSize, this.count = t.count, this.normalized = t.normalized, this.usage = t.usage, this } copyAt(t, e, n) { t *= this.itemSize, n *= e.itemSize; for (let i = 0, r = this.itemSize; i < r; i++)this.array[t + i] = e.array[n + i]; return this } copyArray(t) { return this.array.set(t), this } applyMatrix3(t) { if (2 === this.itemSize) for (let e = 0, n = this.count; e < n; e++)Pi.fromBufferAttribute(this, e), Pi.applyMatrix3(t), this.setXY(e, Pi.x, Pi.y); else if (3 === this.itemSize) for (let e = 0, n = this.count; e < n; e++)Li.fromBufferAttribute(this, e), Li.applyMatrix3(t), this.setXYZ(e, Li.x, Li.y, Li.z); return this } applyMatrix4(t) { for (let e = 0, n = this.count; e < n; e++)Li.fromBufferAttribute(this, e), Li.applyMatrix4(t), this.setXYZ(e, Li.x, Li.y, Li.z); return this } applyNormalMatrix(t) { for (let e = 0, n = this.count; e < n; e++)Li.fromBufferAttribute(this, e), Li.applyNormalMatrix(t), this.setXYZ(e, Li.x, Li.y, Li.z); return this } transformDirection(t) { for (let e = 0, n = this.count; e < n; e++)Li.fromBufferAttribute(this, e), Li.transformDirection(t), this.setXYZ(e, Li.x, Li.y, Li.z); return this } set(t, e = 0) { return this.array.set(t, e), this } getX(t) { let e = this.array[t * this.itemSize]; return this.normalized && (e = Ie(e, this.array)), e } setX(t, e) { return this.normalized && (e = Ne(e, this.array)), this.array[t * this.itemSize] = e, this } getY(t) { let e = this.array[t * this.itemSize + 1]; return this.normalized && (e = Ie(e, this.array)), e } setY(t, e) { return this.normalized && (e = Ne(e, this.array)), this.array[t * this.itemSize + 1] = e, this } getZ(t) { let e = this.array[t * this.itemSize + 2]; return this.normalized && (e = Ie(e, this.array)), e } setZ(t, e) { return this.normalized && (e = Ne(e, this.array)), this.array[t * this.itemSize + 2] = e, this } getW(t) { let e = this.array[t * this.itemSize + 3]; return this.normalized && (e = Ie(e, this.array)), e } setW(t, e) { return this.normalized && (e = Ne(e, this.array)), this.array[t * this.itemSize + 3] = e, this } setXY(t, e, n) { return t *= this.itemSize, this.normalized && (e = Ne(e, this.array), n = Ne(n, this.array)), this.array[t + 0] = e, this.array[t + 1] = n, this } setXYZ(t, e, n, i) { return t *= this.itemSize, this.normalized && (e = Ne(e, this.array), n = Ne(n, this.array), i = Ne(i, this.array)), this.array[t + 0] = e, this.array[t + 1] = n, this.array[t + 2] = i, this } setXYZW(t, e, n, i, r) { return t *= this.itemSize, this.normalized && (e = Ne(e, this.array), n = Ne(n, this.array), i = Ne(i, this.array), r = Ne(r, this.array)), this.array[t + 0] = e, this.array[t + 1] = n, this.array[t + 2] = i, this.array[t + 3] = r, this } onUpload(t) { return this.onUploadCallback = t, this } clone() { return new this.constructor(this.array, this.itemSize).copy(this) } toJSON() { const t = { itemSize: this.itemSize, type: this.array.constructor.name, array: Array.from(this.array), normalized: this.normalized }; return "" !== this.name && (t.name = this.name), 35044 !== this.usage && (t.usage = this.usage), 0 === this.updateRange.offset && -1 === this.updateRange.count || (t.updateRange = this.updateRange), t } copyColorsArray() { console.error("THREE.BufferAttribute: copyColorsArray() was removed in r144.") } copyVector2sArray() { console.error("THREE.BufferAttribute: copyVector2sArray() was removed in r144.") } copyVector3sArray() { console.error("THREE.BufferAttribute: copyVector3sArray() was removed in r144.") } copyVector4sArray() { console.error("THREE.BufferAttribute: copyVector4sArray() was removed in r144.") } } class Di extends Ri { constructor(t, e, n) { super(new Uint16Array(t), e, n) } } class Oi extends Ri { constructor(t, e, n) { super(new Uint32Array(t), e, n) } } class Ii extends Ri { constructor(t, e, n) { super(new Float32Array(t), e, n) } } let Ni = 0; const ki = new zn, zi = new li, Ui = new Ge, Fi = new un, Bi = new un, ji = new Ge; class Gi extends Ee { constructor() { super(), this.isBufferGeometry = !0, Object.defineProperty(this, "id", { value: Ni++ }), this.uuid = Le(), this.name = "", this.type = "BufferGeometry", this.index = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = { start: 0, count: 1 / 0 }, this.userData = {} } getIndex() { return this.index } setIndex(t) { return Array.isArray(t) ? this.index = new (Fe(t) ? Oi : Di)(t, 1) : this.index = t, this } getAttribute(t) { return this.attributes[t] } setAttribute(t, e) { return this.attributes[t] = e, this } deleteAttribute(t) { return delete this.attributes[t], this } hasAttribute(t) { return void 0 !== this.attributes[t] } addGroup(t, e, n = 0) { this.groups.push({ start: t, count: e, materialIndex: n }) } clearGroups() { this.groups = [] } setDrawRange(t, e) { this.drawRange.start = t, this.drawRange.count = e } applyMatrix4(t) { const e = this.attributes.position; void 0 !== e && (e.applyMatrix4(t), e.needsUpdate = !0); const n = this.attributes.normal; if (void 0 !== n) { const e = (new ze).getNormalMatrix(t); n.applyNormalMatrix(e), n.needsUpdate = !0 } const i = this.attributes.tangent; return void 0 !== i && (i.transformDirection(t), i.needsUpdate = !0), null !== this.boundingBox && this.computeBoundingBox(), null !== this.boundingSphere && this.computeBoundingSphere(), this } applyQuaternion(t) { return ki.makeRotationFromQuaternion(t), this.applyMatrix4(ki), this } rotateX(t) { return ki.makeRotationX(t), this.applyMatrix4(ki), this } rotateY(t) { return ki.makeRotationY(t), this.applyMatrix4(ki), this } rotateZ(t) { return ki.makeRotationZ(t), this.applyMatrix4(ki), this } translate(t, e, n) { return ki.makeTranslation(t, e, n), this.applyMatrix4(ki), this } scale(t, e, n) { return ki.makeScale(t, e, n), this.applyMatrix4(ki), this } lookAt(t) { return zi.lookAt(t), zi.updateMatrix(), this.applyMatrix4(zi.matrix), this } center() { return this.computeBoundingBox(), this.boundingBox.getCenter(Ui).negate(), this.translate(Ui.x, Ui.y, Ui.z), this } setFromPoints(t) { const e = []; for (let n = 0, i = t.length; n < i; n++) { const i = t[n]; e.push(i.x, i.y, i.z || 0) } return this.setAttribute("position", new Ii(e, 3)), this } computeBoundingBox() { null === this.boundingBox && (this.boundingBox = new un); const t = this.attributes.position, e = this.morphAttributes.position; if (t && t.isGLBufferAttribute) return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this), void this.boundingBox.set(new Ge(-1 / 0, -1 / 0, -1 / 0), new Ge(1 / 0, 1 / 0, 1 / 0)); if (void 0 !== t) { if (this.boundingBox.setFromBufferAttribute(t), e) for (let t = 0, n = e.length; t < n; t++) { const n = e[t]; Fi.setFromBufferAttribute(n), this.morphTargetsRelative ? (ji.addVectors(this.boundingBox.min, Fi.min), this.boundingBox.expandByPoint(ji), ji.addVectors(this.boundingBox.max, Fi.max), this.boundingBox.expandByPoint(ji)) : (this.boundingBox.expandByPoint(Fi.min), this.boundingBox.expandByPoint(Fi.max)) } } else this.boundingBox.makeEmpty(); (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this) } computeBoundingSphere() { null === this.boundingSphere && (this.boundingSphere = new Cn); const t = this.attributes.position, e = this.morphAttributes.position; if (t && t.isGLBufferAttribute) return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this), void this.boundingSphere.set(new Ge, 1 / 0); if (t) { const n = this.boundingSphere.center; if (Fi.setFromBufferAttribute(t), e) for (let t = 0, n = e.length; t < n; t++) { const n = e[t]; Bi.setFromBufferAttribute(n), this.morphTargetsRelative ? (ji.addVectors(Fi.min, Bi.min), Fi.expandByPoint(ji), ji.addVectors(Fi.max, Bi.max), Fi.expandByPoint(ji)) : (Fi.expandByPoint(Bi.min), Fi.expandByPoint(Bi.max)) } Fi.getCenter(n); let i = 0; for (let e = 0, r = t.count; e < r; e++)ji.fromBufferAttribute(t, e), i = Math.max(i, n.distanceToSquared(ji)); if (e) for (let r = 0, a = e.length; r < a; r++) { const a = e[r], o = this.morphTargetsRelative; for (let e = 0, r = a.count; e < r; e++)ji.fromBufferAttribute(a, e), o && (Ui.fromBufferAttribute(t, e), ji.add(Ui)), i = Math.max(i, n.distanceToSquared(ji)) } this.boundingSphere.radius = Math.sqrt(i), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this) } } computeTangents() { const t = this.index, e = this.attributes; if (null === t || void 0 === e.position || void 0 === e.normal || void 0 === e.uv) return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)"); const n = t.array, i = e.position.array, r = e.normal.array, a = e.uv.array, o = i.length / 3; !1 === this.hasAttribute("tangent") && this.setAttribute("tangent", new Ri(new Float32Array(4 * o), 4)); const s = this.getAttribute("tangent").array, l = [], c = []; for (let t = 0; t < o; t++)l[t] = new Ge, c[t] = new Ge; const u = new Ge, h = new Ge, d = new Ge, p = new ke, f = new ke, m = new ke, g = new Ge, v = new Ge; function _(t, e, n) { u.fromArray(i, 3 * t), h.fromArray(i, 3 * e), d.fromArray(i, 3 * n), p.fromArray(a, 2 * t), f.fromArray(a, 2 * e), m.fromArray(a, 2 * n), h.sub(u), d.sub(u), f.sub(p), m.sub(p); const r = 1 / (f.x * m.y - m.x * f.y); isFinite(r) && (g.copy(h).multiplyScalar(m.y).addScaledVector(d, -f.y).multiplyScalar(r), v.copy(d).multiplyScalar(f.x).addScaledVector(h, -m.x).multiplyScalar(r), l[t].add(g), l[e].add(g), l[n].add(g), c[t].add(v), c[e].add(v), c[n].add(v)) } let y = this.groups; 0 === y.length && (y = [{ start: 0, count: n.length }]); for (let t = 0, e = y.length; t < e; ++t) { const e = y[t], i = e.start; for (let t = i, r = i + e.count; t < r; t += 3)_(n[t + 0], n[t + 1], n[t + 2]) } const x = new Ge, b = new Ge, w = new Ge, M = new Ge; function S(t) { w.fromArray(r, 3 * t), M.copy(w); const e = l[t]; x.copy(e), x.sub(w.multiplyScalar(w.dot(e))).normalize(), b.crossVectors(M, e); const n = b.dot(c[t]) < 0 ? -1 : 1; s[4 * t] = x.x, s[4 * t + 1] = x.y, s[4 * t + 2] = x.z, s[4 * t + 3] = n } for (let t = 0, e = y.length; t < e; ++t) { const e = y[t], i = e.start; for (let t = i, r = i + e.count; t < r; t += 3)S(n[t + 0]), S(n[t + 1]), S(n[t + 2]) } } computeVertexNormals() { const t = this.index, e = this.getAttribute("position"); if (void 0 !== e) { let n = this.getAttribute("normal"); if (void 0 === n) n = new Ri(new Float32Array(3 * e.count), 3), this.setAttribute("normal", n); else for (let t = 0, e = n.count; t < e; t++)n.setXYZ(t, 0, 0, 0); const i = new Ge, r = new Ge, a = new Ge, o = new Ge, s = new Ge, l = new Ge, c = new Ge, u = new Ge; if (t) for (let h = 0, d = t.count; h < d; h += 3) { const d = t.getX(h + 0), p = t.getX(h + 1), f = t.getX(h + 2); i.fromBufferAttribute(e, d), r.fromBufferAttribute(e, p), a.fromBufferAttribute(e, f), c.subVectors(a, r), u.subVectors(i, r), c.cross(u), o.fromBufferAttribute(n, d), s.fromBufferAttribute(n, p), l.fromBufferAttribute(n, f), o.add(c), s.add(c), l.add(c), n.setXYZ(d, o.x, o.y, o.z), n.setXYZ(p, s.x, s.y, s.z), n.setXYZ(f, l.x, l.y, l.z) } else for (let t = 0, o = e.count; t < o; t += 3)i.fromBufferAttribute(e, t + 0), r.fromBufferAttribute(e, t + 1), a.fromBufferAttribute(e, t + 2), c.subVectors(a, r), u.subVectors(i, r), c.cross(u), n.setXYZ(t + 0, c.x, c.y, c.z), n.setXYZ(t + 1, c.x, c.y, c.z), n.setXYZ(t + 2, c.x, c.y, c.z); this.normalizeNormals(), n.needsUpdate = !0 } } merge() { return console.error("THREE.BufferGeometry.merge() has been removed. Use THREE.BufferGeometryUtils.mergeBufferGeometries() instead."), this } normalizeNormals() { const t = this.attributes.normal; for (let e = 0, n = t.count; e < n; e++)ji.fromBufferAttribute(t, e), ji.normalize(), t.setXYZ(e, ji.x, ji.y, ji.z) } toNonIndexed() { function t(t, e) { const n = t.array, i = t.itemSize, r = t.normalized, a = new n.constructor(e.length * i); let o = 0, s = 0; for (let r = 0, l = e.length; r < l; r++) { o = t.isInterleavedBufferAttribute ? e[r] * t.data.stride + t.offset : e[r] * i; for (let t = 0; t < i; t++)a[s++] = n[o++] } return new Ri(a, i, r) } if (null === this.index) return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this; const e = new Gi, n = this.index.array, i = this.attributes; for (const r in i) { const a = t(i[r], n); e.setAttribute(r, a) } const r = this.morphAttributes; for (const i in r) { const a = [], o = r[i]; for (let e = 0, i = o.length; e < i; e++) { const i = t(o[e], n); a.push(i) } e.morphAttributes[i] = a } e.morphTargetsRelative = this.morphTargetsRelative; const a = this.groups; for (let t = 0, n = a.length; t < n; t++) { const n = a[t]; e.addGroup(n.start, n.count, n.materialIndex) } return e } toJSON() { const t = { metadata: { version: 4.5, type: "BufferGeometry", generator: "BufferGeometry.toJSON" } }; if (t.uuid = this.uuid, t.type = this.type, "" !== this.name && (t.name = this.name), Object.keys(this.userData).length > 0 && (t.userData = this.userData), void 0 !== this.parameters) { const e = this.parameters; for (const n in e) void 0 !== e[n] && (t[n] = e[n]); return t } t.data = { attributes: {} }; const e = this.index; null !== e && (t.data.index = { type: e.array.constructor.name, array: Array.prototype.slice.call(e.array) }); const n = this.attributes; for (const e in n) { const i = n[e]; t.data.attributes[e] = i.toJSON(t.data) } const i = {}; let r = !1; for (const e in this.morphAttributes) { const n = this.morphAttributes[e], a = []; for (let e = 0, i = n.length; e < i; e++) { const i = n[e]; a.push(i.toJSON(t.data)) } a.length > 0 && (i[e] = a, r = !0) } r && (t.data.morphAttributes = i, t.data.morphTargetsRelative = this.morphTargetsRelative); const a = this.groups; a.length > 0 && (t.data.groups = JSON.parse(JSON.stringify(a))); const o = this.boundingSphere; return null !== o && (t.data.boundingSphere = { center: o.center.toArray(), radius: o.radius }), t } clone() { return (new this.constructor).copy(this) } copy(t) { this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null; const e = {}; this.name = t.name; const n = t.index; null !== n && this.setIndex(n.clone(e)); const i = t.attributes; for (const t in i) { const n = i[t]; this.setAttribute(t, n.clone(e)) } const r = t.morphAttributes; for (const t in r) { const n = [], i = r[t]; for (let t = 0, r = i.length; t < r; t++)n.push(i[t].clone(e)); this.morphAttributes[t] = n } this.morphTargetsRelative = t.morphTargetsRelative; const a = t.groups; for (let t = 0, e = a.length; t < e; t++) { const e = a[t]; this.addGroup(e.start, e.count, e.materialIndex) } const o = t.boundingBox; null !== o && (this.boundingBox = o.clone()); const s = t.boundingSphere; return null !== s && (this.boundingSphere = s.clone()), this.drawRange.start = t.drawRange.start, this.drawRange.count = t.drawRange.count, this.userData = t.userData, this } dispose() { this.dispatchEvent({ type: "dispose" }) } } const Hi = new zn, Vi = new kn, Wi = new Cn, qi = new Ge, Xi = new Ge, Yi = new Ge, $i = new Ge, Zi = new Ge, Ji = new Ge, Ki = new ke, Qi = new ke, tr = new ke, er = new Ge, nr = new Ge; class ir extends li { constructor(t = new Gi, e = new Ci) { super(), this.isMesh = !0, this.type = "Mesh", this.geometry = t, this.material = e, this.updateMorphTargets() } copy(t, e) { return super.copy(t, e), void 0 !== t.morphTargetInfluences && (this.morphTargetInfluences = t.morphTargetInfluences.slice()), void 0 !== t.morphTargetDictionary && (this.morphTargetDictionary = Object.assign({}, t.morphTargetDictionary)), this.material = t.material, this.geometry = t.geometry, this } updateMorphTargets() { const t = this.geometry.morphAttributes, e = Object.keys(t); if (e.length > 0) { const n = t[e[0]]; if (void 0 !== n) { this.morphTargetInfluences = [], this.morphTargetDictionary = {}; for (let t = 0, e = n.length; t < e; t++) { const e = n[t].name || String(t); this.morphTargetInfluences.push(0), this.morphTargetDictionary[e] = t } } } } getVertexPosition(t, e) { const n = this.geometry, i = n.attributes.position, r = n.morphAttributes.position, a = n.morphTargetsRelative; e.fromBufferAttribute(i, t); const o = this.morphTargetInfluences; if (r && o) { Ji.set(0, 0, 0); for (let n = 0, i = r.length; n < i; n++) { const i = o[n], s = r[n]; 0 !== i && (Zi.fromBufferAttribute(s, t), a ? Ji.addScaledVector(Zi, i) : Ji.addScaledVector(Zi.sub(e), i)) } e.add(Ji) } return this.isSkinnedMesh && this.boneTransform(t, e), e } raycast(t, e) { const n = this.geometry, i = this.material, r = this.matrixWorld; if (void 0 === i) return; if (null === n.boundingSphere && n.computeBoundingSphere(), Wi.copy(n.boundingSphere), Wi.applyMatrix4(r), Vi.copy(t.ray).recast(t.near), !1 === Wi.containsPoint(Vi.origin)) { if (null === Vi.intersectSphere(Wi, qi)) return; if (Vi.origin.distanceToSquared(qi) > (t.far - t.near) ** 2) return } if (Hi.copy(r).invert(), Vi.copy(t.ray).applyMatrix4(Hi), null !== n.boundingBox && !1 === Vi.intersectsBox(n.boundingBox)) return; let a; const o = n.index, s = n.attributes.position, l = n.attributes.uv, c = n.attributes.uv2, u = n.groups, h = n.drawRange; if (null !== o) if (Array.isArray(i)) for (let n = 0, r = u.length; n < r; n++) { const r = u[n], s = i[r.materialIndex]; for (let n = Math.max(r.start, h.start), i = Math.min(o.count, Math.min(r.start + r.count, h.start + h.count)); n < i; n += 3) { const i = o.getX(n), u = o.getX(n + 1), h = o.getX(n + 2); a = rr(this, s, t, Vi, l, c, i, u, h), a && (a.faceIndex = Math.floor(n / 3), a.face.materialIndex = r.materialIndex, e.push(a)) } } else { for (let n = Math.max(0, h.start), r = Math.min(o.count, h.start + h.count); n < r; n += 3) { const r = o.getX(n), s = o.getX(n + 1), u = o.getX(n + 2); a = rr(this, i, t, Vi, l, c, r, s, u), a && (a.faceIndex = Math.floor(n / 3), e.push(a)) } } else if (void 0 !== s) if (Array.isArray(i)) for (let n = 0, r = u.length; n < r; n++) { const r = u[n], o = i[r.materialIndex]; for (let n = Math.max(r.start, h.start), i = Math.min(s.count, Math.min(r.start + r.count, h.start + h.count)); n < i; n += 3) { a = rr(this, o, t, Vi, l, c, n, n + 1, n + 2), a && (a.faceIndex = Math.floor(n / 3), a.face.materialIndex = r.materialIndex, e.push(a)) } } else { for (let n = Math.max(0, h.start), r = Math.min(s.count, h.start + h.count); n < r; n += 3) { a = rr(this, i, t, Vi, l, c, n, n + 1, n + 2), a && (a.faceIndex = Math.floor(n / 3), e.push(a)) } } } } function rr(t, e, n, i, r, a, o, s, l) { t.getVertexPosition(o, Xi), t.getVertexPosition(s, Yi), t.getVertexPosition(l, $i); const c = function (t, e, n, i, r, a, o, s) { let l; if (l = e.side === m ? i.intersectTriangle(o, a, r, !0, s) : i.intersectTriangle(r, a, o, e.side === f, s), null === l) return null; nr.copy(s), nr.applyMatrix4(t.matrixWorld); const c = n.ray.origin.distanceTo(nr); return c < n.near || c > n.far ? null : { distance: c, point: nr.clone(), object: t } }(t, e, n, i, Xi, Yi, $i, er); if (c) { r && (Ki.fromBufferAttribute(r, o), Qi.fromBufferAttribute(r, s), tr.fromBufferAttribute(r, l), c.uv = yi.getUV(er, Xi, Yi, $i, Ki, Qi, tr, new ke)), a && (Ki.fromBufferAttribute(a, o), Qi.fromBufferAttribute(a, s), tr.fromBufferAttribute(a, l), c.uv2 = yi.getUV(er, Xi, Yi, $i, Ki, Qi, tr, new ke)); const t = { a: o, b: s, c: l, normal: new Ge, materialIndex: 0 }; yi.getNormal(Xi, Yi, $i, t.normal), c.face = t } return c } class ar extends Gi { constructor(t = 1, e = 1, n = 1, i = 1, r = 1, a = 1) { super(), this.type = "BoxGeometry", this.parameters = { width: t, height: e, depth: n, widthSegments: i, heightSegments: r, depthSegments: a }; const o = this; i = Math.floor(i), r = Math.floor(r), a = Math.floor(a); const s = [], l = [], c = [], u = []; let h = 0, d = 0; function p(t, e, n, i, r, a, p, f, m, g, v) { const _ = a / m, y = p / g, x = a / 2, b = p / 2, w = f / 2, M = m + 1, S = g + 1; let E = 0, T = 0; const A = new Ge; for (let a = 0; a < S; a++) { const o = a * y - b; for (let s = 0; s < M; s++) { const h = s * _ - x; A[t] = h * i, A[e] = o * r, A[n] = w, l.push(A.x, A.y, A.z), A[t] = 0, A[e] = 0, A[n] = f > 0 ? 1 : -1, c.push(A.x, A.y, A.z), u.push(s / m), u.push(1 - a / g), E += 1 } } for (let t = 0; t < g; t++)for (let e = 0; e < m; e++) { const n = h + e + M * t, i = h + e + M * (t + 1), r = h + (e + 1) + M * (t + 1), a = h + (e + 1) + M * t; s.push(n, i, a), s.push(i, r, a), T += 6 } o.addGroup(d, T, v), d += T, h += E } p("z", "y", "x", -1, -1, n, e, t, a, r, 0), p("z", "y", "x", 1, -1, n, e, -t, a, r, 1), p("x", "z", "y", 1, 1, t, n, e, i, a, 2), p("x", "z", "y", 1, -1, t, n, -e, i, a, 3), p("x", "y", "z", 1, -1, t, e, n, i, r, 4), p("x", "y", "z", -1, -1, t, e, -n, i, r, 5), this.setIndex(s), this.setAttribute("position", new Ii(l, 3)), this.setAttribute("normal", new Ii(c, 3)), this.setAttribute("uv", new Ii(u, 2)) } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } static fromJSON(t) { return new ar(t.width, t.height, t.depth, t.widthSegments, t.heightSegments, t.depthSegments) } } function or(t) { const e = {}; for (const n in t) { e[n] = {}; for (const i in t[n]) { const r = t[n][i]; r && (r.isColor || r.isMatrix3 || r.isMatrix4 || r.isVector2 || r.isVector3 || r.isVector4 || r.isTexture || r.isQuaternion) ? e[n][i] = r.clone() : Array.isArray(r) ? e[n][i] = r.slice() : e[n][i] = r } } return e } function sr(t) { const e = {}; for (let n = 0; n < t.length; n++) { const i = or(t[n]); for (const t in i) e[t] = i[t] } return e } function lr(t) { return null === t.getRenderTarget() && t.outputEncoding === me ? ye : xe } const cr = { clone: or, merge: sr }; class ur extends bi { constructor(t) { super(), this.isShaderMaterial = !0, this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.uniformsGroups = [], this.vertexShader = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}", this.fragmentShader = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}", this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.extensions = { derivatives: !1, fragDepth: !1, drawBuffers: !1, shaderTextureLOD: !1 }, this.defaultAttributeValues = { color: [1, 1, 1], uv: [0, 0], uv2: [0, 0] }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, this.glslVersion = null, void 0 !== t && this.setValues(t) } copy(t) { return super.copy(t), this.fragmentShader = t.fragmentShader, this.vertexShader = t.vertexShader, this.uniforms = or(t.uniforms), this.uniformsGroups = function (t) { const e = []; for (let n = 0; n < t.length; n++)e.push(t[n].clone()); return e }(t.uniformsGroups), this.defines = Object.assign({}, t.defines), this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.fog = t.fog, this.lights = t.lights, this.clipping = t.clipping, this.extensions = Object.assign({}, t.extensions), this.glslVersion = t.glslVersion, this } toJSON(t) { const e = super.toJSON(t); e.glslVersion = this.glslVersion, e.uniforms = {}; for (const n in this.uniforms) { const i = this.uniforms[n].value; i && i.isTexture ? e.uniforms[n] = { type: "t", value: i.toJSON(t).uuid } : i && i.isColor ? e.uniforms[n] = { type: "c", value: i.getHex() } : i && i.isVector2 ? e.uniforms[n] = { type: "v2", value: i.toArray() } : i && i.isVector3 ? e.uniforms[n] = { type: "v3", value: i.toArray() } : i && i.isVector4 ? e.uniforms[n] = { type: "v4", value: i.toArray() } : i && i.isMatrix3 ? e.uniforms[n] = { type: "m3", value: i.toArray() } : i && i.isMatrix4 ? e.uniforms[n] = { type: "m4", value: i.toArray() } : e.uniforms[n] = { value: i } } Object.keys(this.defines).length > 0 && (e.defines = this.defines), e.vertexShader = this.vertexShader, e.fragmentShader = this.fragmentShader; const n = {}; for (const t in this.extensions) !0 === this.extensions[t] && (n[t] = !0); return Object.keys(n).length > 0 && (e.extensions = n), e } } class hr extends li { constructor() { super(), this.isCamera = !0, this.type = "Camera", this.matrixWorldInverse = new zn, this.projectionMatrix = new zn, this.projectionMatrixInverse = new zn } copy(t, e) { return super.copy(t, e), this.matrixWorldInverse.copy(t.matrixWorldInverse), this.projectionMatrix.copy(t.projectionMatrix), this.projectionMatrixInverse.copy(t.projectionMatrixInverse), this } getWorldDirection(t) { this.updateWorldMatrix(!0, !1); const e = this.matrixWorld.elements; return t.set(-e[8], -e[9], -e[10]).normalize() } updateMatrixWorld(t) { super.updateMatrixWorld(t), this.matrixWorldInverse.copy(this.matrixWorld).invert() } updateWorldMatrix(t, e) { super.updateWorldMatrix(t, e), this.matrixWorldInverse.copy(this.matrixWorld).invert() } clone() { return (new this.constructor).copy(this) } } class dr extends hr { constructor(t = 50, e = 1, n = .1, i = 2e3) { super(), this.isPerspectiveCamera = !0, this.type = "PerspectiveCamera", this.fov = t, this.zoom = 1, this.near = n, this.far = i, this.focus = 10, this.aspect = e, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix() } copy(t, e) { return super.copy(t, e), this.fov = t.fov, this.zoom = t.zoom, this.near = t.near, this.far = t.far, this.focus = t.focus, this.aspect = t.aspect, this.view = null === t.view ? null : Object.assign({}, t.view), this.filmGauge = t.filmGauge, this.filmOffset = t.filmOffset, this } setFocalLength(t) { const e = .5 * this.getFilmHeight() / t; this.fov = 2 * Ce * Math.atan(e), this.updateProjectionMatrix() } getFocalLength() { const t = Math.tan(.5 * Ae * this.fov); return .5 * this.getFilmHeight() / t } getEffectiveFOV() { return 2 * Ce * Math.atan(Math.tan(.5 * Ae * this.fov) / this.zoom) } getFilmWidth() { return this.filmGauge * Math.min(this.aspect, 1) } getFilmHeight() { return this.filmGauge / Math.max(this.aspect, 1) } setViewOffset(t, e, n, i, r, a) { this.aspect = t / e, null === this.view && (this.view = { enabled: !0, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }), this.view.enabled = !0, this.view.fullWidth = t, this.view.fullHeight = e, this.view.offsetX = n, this.view.offsetY = i, this.view.width = r, this.view.height = a, this.updateProjectionMatrix() } clearViewOffset() { null !== this.view && (this.view.enabled = !1), this.updateProjectionMatrix() } updateProjectionMatrix() { const t = this.near; let e = t * Math.tan(.5 * Ae * this.fov) / this.zoom, n = 2 * e, i = this.aspect * n, r = -.5 * i; const a = this.view; if (null !== this.view && this.view.enabled) { const t = a.fullWidth, o = a.fullHeight; r += a.offsetX * i / t, e -= a.offsetY * n / o, i *= a.width / t, n *= a.height / o } const o = this.filmOffset; 0 !== o && (r += t * o / this.getFilmWidth()), this.projectionMatrix.makePerspective(r, r + i, e, e - n, t, this.far), this.projectionMatrixInverse.copy(this.projectionMatrix).invert() } toJSON(t) { const e = super.toJSON(t); return e.object.fov = this.fov, e.object.zoom = this.zoom, e.object.near = this.near, e.object.far = this.far, e.object.focus = this.focus, e.object.aspect = this.aspect, null !== this.view && (e.object.view = Object.assign({}, this.view)), e.object.filmGauge = this.filmGauge, e.object.filmOffset = this.filmOffset, e } } const pr = -90; class fr extends li { constructor(t, e, n) { super(), this.type = "CubeCamera", this.renderTarget = n; const i = new dr(pr, 1, t, e); i.layers = this.layers, i.up.set(0, 1, 0), i.lookAt(1, 0, 0), this.add(i); const r = new dr(pr, 1, t, e); r.layers = this.layers, r.up.set(0, 1, 0), r.lookAt(-1, 0, 0), this.add(r); const a = new dr(pr, 1, t, e); a.layers = this.layers, a.up.set(0, 0, -1), a.lookAt(0, 1, 0), this.add(a); const o = new dr(pr, 1, t, e); o.layers = this.layers, o.up.set(0, 0, 1), o.lookAt(0, -1, 0), this.add(o); const s = new dr(pr, 1, t, e); s.layers = this.layers, s.up.set(0, 1, 0), s.lookAt(0, 0, 1), this.add(s); const l = new dr(pr, 1, t, e); l.layers = this.layers, l.up.set(0, 1, 0), l.lookAt(0, 0, -1), this.add(l) } update(t, e) { null === this.parent && this.updateMatrixWorld(); const n = this.renderTarget, [i, r, a, o, s, l] = this.children, c = t.getRenderTarget(), u = t.toneMapping, h = t.xr.enabled; t.toneMapping = Z, t.xr.enabled = !1; const d = n.texture.generateMipmaps; n.texture.generateMipmaps = !1, t.setRenderTarget(n, 0), t.render(e, i), t.setRenderTarget(n, 1), t.render(e, r), t.setRenderTarget(n, 2), t.render(e, a), t.setRenderTarget(n, 3), t.render(e, o), t.setRenderTarget(n, 4), t.render(e, s), n.texture.generateMipmaps = d, t.setRenderTarget(n, 5), t.render(e, l), t.setRenderTarget(c), t.toneMapping = u, t.xr.enabled = h, n.texture.needsPMREMUpdate = !0 } } class mr extends an { constructor(t, e, n, i, r, a, o, s, l, c) { super(t = void 0 !== t ? t : [], e = void 0 !== e ? e : nt, n, i, r, a, o, s, l, c), this.isCubeTexture = !0, this.flipY = !1 } get images() { return this.image } set images(t) { this.image = t } } class gr extends sn { constructor(t = 1, e = {}) { super(t, t, e), this.isWebGLCubeRenderTarget = !0; const n = { width: t, height: t, depth: 1 }, i = [n, n, n, n, n, n]; this.texture = new mr(i, e.mapping, e.wrapS, e.wrapT, e.magFilter, e.minFilter, e.format, e.type, e.anisotropy, e.encoding), this.texture.isRenderTargetTexture = !0, this.texture.generateMipmaps = void 0 !== e.generateMipmaps && e.generateMipmaps, this.texture.minFilter = void 0 !== e.minFilter ? e.minFilter : pt } fromEquirectangularTexture(t, e) { this.texture.type = e.type, this.texture.encoding = e.encoding, this.texture.generateMipmaps = e.generateMipmaps, this.texture.minFilter = e.minFilter, this.texture.magFilter = e.magFilter; const n = { uniforms: { tEquirect: { value: null } }, vertexShader: "\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t", fragmentShader: "\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t" }, i = new ar(5, 5, 5), r = new ur({ name: "CubemapFromEquirect", uniforms: or(n.uniforms), vertexShader: n.vertexShader, fragmentShader: n.fragmentShader, side: m, blending: v }); r.uniforms.tEquirect.value = e; const a = new ir(i, r), o = e.minFilter; e.minFilter === mt && (e.minFilter = pt); return new fr(1, 10, this).update(t, a), e.minFilter = o, a.geometry.dispose(), a.material.dispose(), this } clear(t, e, n, i) { const r = t.getRenderTarget(); for (let r = 0; r < 6; r++)t.setRenderTarget(this, r), t.clear(e, n, i); t.setRenderTarget(r) } } const vr = new Ge, _r = new Ge, yr = new ze; class xr { constructor(t = new Ge(1, 0, 0), e = 0) { this.isPlane = !0, this.normal = t, this.constant = e } set(t, e) { return this.normal.copy(t), this.constant = e, this } setComponents(t, e, n, i) { return this.normal.set(t, e, n), this.constant = i, this } setFromNormalAndCoplanarPoint(t, e) { return this.normal.copy(t), this.constant = -e.dot(this.normal), this } setFromCoplanarPoints(t, e, n) { const i = vr.subVectors(n, e).cross(_r.subVectors(t, e)).normalize(); return this.setFromNormalAndCoplanarPoint(i, t), this } copy(t) { return this.normal.copy(t.normal), this.constant = t.constant, this } normalize() { const t = 1 / this.normal.length(); return this.normal.multiplyScalar(t), this.constant *= t, this } negate() { return this.constant *= -1, this.normal.negate(), this } distanceToPoint(t) { return this.normal.dot(t) + this.constant } distanceToSphere(t) { return this.distanceToPoint(t.center) - t.radius } projectPoint(t, e) { return e.copy(t).addScaledVector(this.normal, -this.distanceToPoint(t)) } intersectLine(t, e) { const n = t.delta(vr), i = this.normal.dot(n); if (0 === i) return 0 === this.distanceToPoint(t.start) ? e.copy(t.start) : null; const r = -(t.start.dot(this.normal) + this.constant) / i; return r < 0 || r > 1 ? null : e.copy(t.start).addScaledVector(n, r) } intersectsLine(t) { const e = this.distanceToPoint(t.start), n = this.distanceToPoint(t.end); return e < 0 && n > 0 || n < 0 && e > 0 } intersectsBox(t) { return t.intersectsPlane(this) } intersectsSphere(t) { return t.intersectsPlane(this) } coplanarPoint(t) { return t.copy(this.normal).multiplyScalar(-this.constant) } applyMatrix4(t, e) { const n = e || yr.getNormalMatrix(t), i = this.coplanarPoint(vr).applyMatrix4(t), r = this.normal.applyMatrix3(n).normalize(); return this.constant = -i.dot(r), this } translate(t) { return this.constant -= t.dot(this.normal), this } equals(t) { return t.normal.equals(this.normal) && t.constant === this.constant } clone() { return (new this.constructor).copy(this) } } const br = new Cn, wr = new Ge; class Mr { constructor(t = new xr, e = new xr, n = new xr, i = new xr, r = new xr, a = new xr) { this.planes = [t, e, n, i, r, a] } set(t, e, n, i, r, a) { const o = this.planes; return o[0].copy(t), o[1].copy(e), o[2].copy(n), o[3].copy(i), o[4].copy(r), o[5].copy(a), this } copy(t) { const e = this.planes; for (let n = 0; n < 6; n++)e[n].copy(t.planes[n]); return this } setFromProjectionMatrix(t) { const e = this.planes, n = t.elements, i = n[0], r = n[1], a = n[2], o = n[3], s = n[4], l = n[5], c = n[6], u = n[7], h = n[8], d = n[9], p = n[10], f = n[11], m = n[12], g = n[13], v = n[14], _ = n[15]; return e[0].setComponents(o - i, u - s, f - h, _ - m).normalize(), e[1].setComponents(o + i, u + s, f + h, _ + m).normalize(), e[2].setComponents(o + r, u + l, f + d, _ + g).normalize(), e[3].setComponents(o - r, u - l, f - d, _ - g).normalize(), e[4].setComponents(o - a, u - c, f - p, _ - v).normalize(), e[5].setComponents(o + a, u + c, f + p, _ + v).normalize(), this } intersectsObject(t) { const e = t.geometry; return null === e.boundingSphere && e.computeBoundingSphere(), br.copy(e.boundingSphere).applyMatrix4(t.matrixWorld), this.intersectsSphere(br) } intersectsSprite(t) { return br.center.set(0, 0, 0), br.radius = .7071067811865476, br.applyMatrix4(t.matrixWorld), this.intersectsSphere(br) } intersectsSphere(t) { const e = this.planes, n = t.center, i = -t.radius; for (let t = 0; t < 6; t++) { if (e[t].distanceToPoint(n) < i) return !1 } return !0 } intersectsBox(t) { const e = this.planes; for (let n = 0; n < 6; n++) { const i = e[n]; if (wr.x = i.normal.x > 0 ? t.max.x : t.min.x, wr.y = i.normal.y > 0 ? t.max.y : t.min.y, wr.z = i.normal.z > 0 ? t.max.z : t.min.z, i.distanceToPoint(wr) < 0) return !1 } return !0 } containsPoint(t) { const e = this.planes; for (let n = 0; n < 6; n++)if (e[n].distanceToPoint(t) < 0) return !1; return !0 } clone() { return (new this.constructor).copy(this) } } function Sr() { let t = null, e = !1, n = null, i = null; function r(e, a) { n(e, a), i = t.requestAnimationFrame(r) } return { start: function () { !0 !== e && null !== n && (i = t.requestAnimationFrame(r), e = !0) }, stop: function () { t.cancelAnimationFrame(i), e = !1 }, setAnimationLoop: function (t) { n = t }, setContext: function (e) { t = e } } } function Er(t, e) { const n = e.isWebGL2, i = new WeakMap; return { get: function (t) { return t.isInterleavedBufferAttribute && (t = t.data), i.get(t) }, remove: function (e) { e.isInterleavedBufferAttribute && (e = e.data); const n = i.get(e); n && (t.deleteBuffer(n.buffer), i.delete(e)) }, update: function (e, r) { if (e.isGLBufferAttribute) { const t = i.get(e); return void ((!t || t.version < e.version) && i.set(e, { buffer: e.buffer, type: e.type, bytesPerElement: e.elementSize, version: e.version })) } e.isInterleavedBufferAttribute && (e = e.data); const a = i.get(e); void 0 === a ? i.set(e, function (e, i) { const r = e.array, a = e.usage, o = t.createBuffer(); let s; if (t.bindBuffer(i, o), t.bufferData(i, r, a), e.onUploadCallback(), r instanceof Float32Array) s = 5126; else if (r instanceof Uint16Array) if (e.isFloat16BufferAttribute) { if (!n) throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2."); s = 5131 } else s = 5123; else if (r instanceof Int16Array) s = 5122; else if (r instanceof Uint32Array) s = 5125; else if (r instanceof Int32Array) s = 5124; else if (r instanceof Int8Array) s = 5120; else if (r instanceof Uint8Array) s = 5121; else { if (!(r instanceof Uint8ClampedArray)) throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + r); s = 5121 } return { buffer: o, type: s, bytesPerElement: r.BYTES_PER_ELEMENT, version: e.version } }(e, r)) : a.version < e.version && (!function (e, i, r) { const a = i.array, o = i.updateRange; t.bindBuffer(r, e), -1 === o.count ? t.bufferSubData(r, 0, a) : (n ? t.bufferSubData(r, o.offset * a.BYTES_PER_ELEMENT, a, o.offset, o.count) : t.bufferSubData(r, o.offset * a.BYTES_PER_ELEMENT, a.subarray(o.offset, o.offset + o.count)), o.count = -1), i.onUploadCallback() }(a.buffer, e, r), a.version = e.version) } } } class Tr extends Gi { constructor(t = 1, e = 1, n = 1, i = 1) { super(), this.type = "PlaneGeometry", this.parameters = { width: t, height: e, widthSegments: n, heightSegments: i }; const r = t / 2, a = e / 2, o = Math.floor(n), s = Math.floor(i), l = o + 1, c = s + 1, u = t / o, h = e / s, d = [], p = [], f = [], m = []; for (let t = 0; t < c; t++) { const e = t * h - a; for (let n = 0; n < l; n++) { const i = n * u - r; p.push(i, -e, 0), f.push(0, 0, 1), m.push(n / o), m.push(1 - t / s) } } for (let t = 0; t < s; t++)for (let e = 0; e < o; e++) { const n = e + l * t, i = e + l * (t + 1), r = e + 1 + l * (t + 1), a = e + 1 + l * t; d.push(n, i, a), d.push(i, r, a) } this.setIndex(d), this.setAttribute("position", new Ii(p, 3)), this.setAttribute("normal", new Ii(f, 3)), this.setAttribute("uv", new Ii(m, 2)) } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } static fromJSON(t) { return new Tr(t.width, t.height, t.widthSegments, t.heightSegments) } } const Ar = { alphamap_fragment: "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif", alphamap_pars_fragment: "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif", alphatest_fragment: "#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif", alphatest_pars_fragment: "#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif", aomap_fragment: "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif", aomap_pars_fragment: "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif", begin_vertex: "vec3 transformed = vec3( position );", beginnormal_vertex: "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif", bsdfs: "vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\n#ifdef USE_IRIDESCENCE\n\tvec3 BRDF_GGX_Iridescence( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float iridescence, const in vec3 iridescenceFresnel, const in float roughness ) {\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = mix( F_Schlick( f0, f90, dotVH ), iridescenceFresnel, iridescence );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif", iridescence_fragment: "#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\t return vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat R21 = R12;\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif", bumpmap_pars_fragment: "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos.xyz );\n\t\tvec3 vSigmaY = dFdy( surf_pos.xyz );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif", clipping_planes_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif", clipping_planes_pars_fragment: "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif", clipping_planes_pars_vertex: "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif", clipping_planes_vertex: "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif", color_fragment: "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif", color_pars_fragment: "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif", color_pars_vertex: "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif", color_vertex: "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif", common: "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nfloat w0( float a ) {\n\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n}\nfloat w1( float a ) {\n\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n}\nfloat w2( float a ){\n    return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n}\nfloat w3( float a ) {\n\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n}\nfloat g0( float a ) {\n\treturn w0( a ) + w1( a );\n}\nfloat g1( float a ) {\n\treturn w2( a ) + w3( a );\n}\nfloat h0( float a ) {\n\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n}\nfloat h1( float a ) {\n    return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n}\nvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, vec2 fullSize, float lod ) {\n\tuv = uv * texelSize.zw + 0.5;\n\tvec2 iuv = floor( uv );\n    vec2 fuv = fract( uv );\n    float g0x = g0( fuv.x );\n    float g1x = g1( fuv.x );\n    float h0x = h0( fuv.x );\n    float h1x = h1( fuv.x );\n    float h0y = h0( fuv.y );\n    float h1y = h1( fuv.y );\n    vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n    vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n    vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n    vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n    \n    vec2 lodFudge = pow( 1.95, lod ) / fullSize;\n\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t   g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n}\nvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\tvec2 fullSize = vec2( textureSize( sampler, 0 ) );\n\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), fullSize, floor( lod ) );\n\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), fullSize, ceil( lod ) );\n\treturn mix( fSample, cSample, fract( lod ) );\n}", cube_uv_reflection_fragment: "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_v0 0.339\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_v1 0.276\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_v4 0.046\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_v5 0.016\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_v6 0.0038\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif", defaultnormal_vertex: "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif", displacementmap_pars_vertex: "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif", displacementmap_vertex: "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif", emissivemap_fragment: "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif", emissivemap_pars_fragment: "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif", encodings_fragment: "gl_FragColor = linearToOutputTexel( gl_FragColor );", encodings_pars_fragment: "vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}", envmap_fragment: "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif", envmap_common_pars_fragment: "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif", envmap_pars_fragment: "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif", envmap_pars_vertex: "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif", envmap_physical_pars_fragment: "#if defined( USE_ENVMAP )\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif", envmap_vertex: "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif", fog_vertex: "#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif", fog_pars_vertex: "#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif", fog_fragment: "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif", fog_pars_fragment: "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif", gradientmap_pars_fragment: "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}", lightmap_fragment: "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif", lightmap_pars_fragment: "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif", lights_lambert_fragment: "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;", lights_lambert_pars_fragment: "varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert", lights_pars_begin: "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( LEGACY_LIGHTS )\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#else\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif", lights_toon_fragment: "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;", lights_toon_pars_fragment: "varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon", lights_phong_fragment: "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;", lights_phong_pars_fragment: "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong", lights_physical_fragment: "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif", lights_physical_pars_fragment: "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX_Iridescence( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness );\n\t#else\n\t\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\t#endif\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}", lights_fragment_begin: "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometry.viewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif", lights_fragment_maps: "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif", lights_fragment_end: "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif", logdepthbuf_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif", logdepthbuf_pars_fragment: "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif", logdepthbuf_pars_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif", logdepthbuf_vertex: "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif", map_fragment: "#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif", map_pars_fragment: "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif", map_particle_fragment: "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif", map_particle_pars_fragment: "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif", metalnessmap_fragment: "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif", metalnessmap_pars_fragment: "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif", morphcolor_vertex: "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif", morphnormal_vertex: "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif", morphtarget_pars_vertex: "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif", morphtarget_vertex: "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif", normal_fragment_begin: "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;", normal_fragment_maps: "#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif", normal_pars_fragment: "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif", normal_pars_vertex: "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif", normal_vertex: "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif", normalmap_pars_fragment: "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif", clearcoat_normal_fragment_begin: "#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif", clearcoat_normal_fragment_maps: "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif", clearcoat_pars_fragment: "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif", iridescence_pars_fragment: "#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif", output_fragment: "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );", packing: "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n\treturn packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}", premultiplied_alpha_fragment: "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif", project_vertex: "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;", dithering_fragment: "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif", dithering_pars_fragment: "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif", roughnessmap_fragment: "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif", roughnessmap_pars_fragment: "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif", shadowmap_pars_fragment: "#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif", shadowmap_pars_vertex: "#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif", shadowmap_vertex: "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif", shadowmask_pars_fragment: "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}", skinbase_vertex: "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif", skinning_pars_vertex: "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tuniform int boneTextureSize;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tfloat j = i * 4.0;\n\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\ty = dy * ( y + 0.5 );\n\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\treturn bone;\n\t}\n#endif", skinning_vertex: "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif", skinnormal_vertex: "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif", specularmap_fragment: "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif", specularmap_pars_fragment: "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif", tonemapping_fragment: "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif", tonemapping_pars_fragment: "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }", transmission_fragment: "#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmission.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, material.transmission );\n#endif", transmission_pars_fragment: "#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif", uv_pars_fragment: "#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif", uv_pars_vertex: "#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif", uv_vertex: "#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif", uv2_pars_fragment: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif", uv2_pars_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif", uv2_vertex: "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif", worldpos_vertex: "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif", background_vert: "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}", background_frag: "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}", backgroundCube_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}", backgroundCube_frag: "#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}", cube_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}", cube_frag: "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}", depth_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}", depth_frag: "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}", distanceRGBA_vert: "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}", distanceRGBA_frag: "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}", equirect_vert: "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}", equirect_frag: "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}", linedashed_vert: "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}", linedashed_frag: "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}", meshbasic_vert: "#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}", meshbasic_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}", meshlambert_vert: "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}", meshlambert_frag: "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}", meshmatcap_vert: "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}", meshmatcap_frag: "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}", meshnormal_vert: "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}", meshnormal_frag: "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}", meshphong_vert: "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}", meshphong_frag: "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}", meshphysical_vert: "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}", meshphysical_frag: "#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}", meshtoon_vert: "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}", meshtoon_frag: "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}", points_vert: "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}", points_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}", shadow_vert: "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}", shadow_frag: "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}", sprite_vert: "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}", sprite_frag: "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}" }, Cr = { common: { diffuse: { value: new Ti(16777215) }, opacity: { value: 1 }, map: { value: null }, uvTransform: { value: new ze }, uv2Transform: { value: new ze }, alphaMap: { value: null }, alphaTest: { value: 0 } }, specularmap: { specularMap: { value: null } }, envmap: { envMap: { value: null }, flipEnvMap: { value: -1 }, reflectivity: { value: 1 }, ior: { value: 1.5 }, refractionRatio: { value: .98 } }, aomap: { aoMap: { value: null }, aoMapIntensity: { value: 1 } }, lightmap: { lightMap: { value: null }, lightMapIntensity: { value: 1 } }, emissivemap: { emissiveMap: { value: null } }, bumpmap: { bumpMap: { value: null }, bumpScale: { value: 1 } }, normalmap: { normalMap: { value: null }, normalScale: { value: new ke(1, 1) } }, displacementmap: { displacementMap: { value: null }, displacementScale: { value: 1 }, displacementBias: { value: 0 } }, roughnessmap: { roughnessMap: { value: null } }, metalnessmap: { metalnessMap: { value: null } }, gradientmap: { gradientMap: { value: null } }, fog: { fogDensity: { value: 25e-5 }, fogNear: { value: 1 }, fogFar: { value: 2e3 }, fogColor: { value: new Ti(16777215) } }, lights: { ambientLightColor: { value: [] }, lightProbe: { value: [] }, directionalLights: { value: [], properties: { direction: {}, color: {} } }, directionalLightShadows: { value: [], properties: { shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {} } }, directionalShadowMap: { value: [] }, directionalShadowMatrix: { value: [] }, spotLights: { value: [], properties: { color: {}, position: {}, direction: {}, distance: {}, coneCos: {}, penumbraCos: {}, decay: {} } }, spotLightShadows: { value: [], properties: { shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {} } }, spotLightMap: { value: [] }, spotShadowMap: { value: [] }, spotLightMatrix: { value: [] }, pointLights: { value: [], properties: { color: {}, position: {}, decay: {}, distance: {} } }, pointLightShadows: { value: [], properties: { shadowBias: {}, shadowNormalBias: {}, shadowRadius: {}, shadowMapSize: {}, shadowCameraNear: {}, shadowCameraFar: {} } }, pointShadowMap: { value: [] }, pointShadowMatrix: { value: [] }, hemisphereLights: { value: [], properties: { direction: {}, skyColor: {}, groundColor: {} } }, rectAreaLights: { value: [], properties: { color: {}, position: {}, width: {}, height: {} } }, ltc_1: { value: null }, ltc_2: { value: null } }, points: { diffuse: { value: new Ti(16777215) }, opacity: { value: 1 }, size: { value: 1 }, scale: { value: 1 }, map: { value: null }, alphaMap: { value: null }, alphaTest: { value: 0 }, uvTransform: { value: new ze } }, sprite: { diffuse: { value: new Ti(16777215) }, opacity: { value: 1 }, center: { value: new ke(.5, .5) }, rotation: { value: 0 }, map: { value: null }, alphaMap: { value: null }, alphaTest: { value: 0 }, uvTransform: { value: new ze } } }, Lr = { basic: { uniforms: sr([Cr.common, Cr.specularmap, Cr.envmap, Cr.aomap, Cr.lightmap, Cr.fog]), vertexShader: Ar.meshbasic_vert, fragmentShader: Ar.meshbasic_frag }, lambert: { uniforms: sr([Cr.common, Cr.specularmap, Cr.envmap, Cr.aomap, Cr.lightmap, Cr.emissivemap, Cr.bumpmap, Cr.normalmap, Cr.displacementmap, Cr.fog, Cr.lights, { emissive: { value: new Ti(0) } }]), vertexShader: Ar.meshlambert_vert, fragmentShader: Ar.meshlambert_frag }, phong: { uniforms: sr([Cr.common, Cr.specularmap, Cr.envmap, Cr.aomap, Cr.lightmap, Cr.emissivemap, Cr.bumpmap, Cr.normalmap, Cr.displacementmap, Cr.fog, Cr.lights, { emissive: { value: new Ti(0) }, specular: { value: new Ti(1118481) }, shininess: { value: 30 } }]), vertexShader: Ar.meshphong_vert, fragmentShader: Ar.meshphong_frag }, standard: { uniforms: sr([Cr.common, Cr.envmap, Cr.aomap, Cr.lightmap, Cr.emissivemap, Cr.bumpmap, Cr.normalmap, Cr.displacementmap, Cr.roughnessmap, Cr.metalnessmap, Cr.fog, Cr.lights, { emissive: { value: new Ti(0) }, roughness: { value: 1 }, metalness: { value: 0 }, envMapIntensity: { value: 1 } }]), vertexShader: Ar.meshphysical_vert, fragmentShader: Ar.meshphysical_frag }, toon: { uniforms: sr([Cr.common, Cr.aomap, Cr.lightmap, Cr.emissivemap, Cr.bumpmap, Cr.normalmap, Cr.displacementmap, Cr.gradientmap, Cr.fog, Cr.lights, { emissive: { value: new Ti(0) } }]), vertexShader: Ar.meshtoon_vert, fragmentShader: Ar.meshtoon_frag }, matcap: { uniforms: sr([Cr.common, Cr.bumpmap, Cr.normalmap, Cr.displacementmap, Cr.fog, { matcap: { value: null } }]), vertexShader: Ar.meshmatcap_vert, fragmentShader: Ar.meshmatcap_frag }, points: { uniforms: sr([Cr.points, Cr.fog]), vertexShader: Ar.points_vert, fragmentShader: Ar.points_frag }, dashed: { uniforms: sr([Cr.common, Cr.fog, { scale: { value: 1 }, dashSize: { value: 1 }, totalSize: { value: 2 } }]), vertexShader: Ar.linedashed_vert, fragmentShader: Ar.linedashed_frag }, depth: { uniforms: sr([Cr.common, Cr.displacementmap]), vertexShader: Ar.depth_vert, fragmentShader: Ar.depth_frag }, normal: { uniforms: sr([Cr.common, Cr.bumpmap, Cr.normalmap, Cr.displacementmap, { opacity: { value: 1 } }]), vertexShader: Ar.meshnormal_vert, fragmentShader: Ar.meshnormal_frag }, sprite: { uniforms: sr([Cr.sprite, Cr.fog]), vertexShader: Ar.sprite_vert, fragmentShader: Ar.sprite_frag }, background: { uniforms: { uvTransform: { value: new ze }, t2D: { value: null }, backgroundIntensity: { value: 1 } }, vertexShader: Ar.background_vert, fragmentShader: Ar.background_frag }, backgroundCube: { uniforms: { envMap: { value: null }, flipEnvMap: { value: -1 }, backgroundBlurriness: { value: 0 }, backgroundIntensity: { value: 1 } }, vertexShader: Ar.backgroundCube_vert, fragmentShader: Ar.backgroundCube_frag }, cube: { uniforms: { tCube: { value: null }, tFlip: { value: -1 }, opacity: { value: 1 } }, vertexShader: Ar.cube_vert, fragmentShader: Ar.cube_frag }, equirect: { uniforms: { tEquirect: { value: null } }, vertexShader: Ar.equirect_vert, fragmentShader: Ar.equirect_frag }, distanceRGBA: { uniforms: sr([Cr.common, Cr.displacementmap, { referencePosition: { value: new Ge }, nearDistance: { value: 1 }, farDistance: { value: 1e3 } }]), vertexShader: Ar.distanceRGBA_vert, fragmentShader: Ar.distanceRGBA_frag }, shadow: { uniforms: sr([Cr.lights, Cr.fog, { color: { value: new Ti(0) }, opacity: { value: 1 } }]), vertexShader: Ar.shadow_vert, fragmentShader: Ar.shadow_frag } }; Lr.physical = { uniforms: sr([Lr.standard.uniforms, { clearcoat: { value: 0 }, clearcoatMap: { value: null }, clearcoatRoughness: { value: 0 }, clearcoatRoughnessMap: { value: null }, clearcoatNormalScale: { value: new ke(1, 1) }, clearcoatNormalMap: { value: null }, iridescence: { value: 0 }, iridescenceMap: { value: null }, iridescenceIOR: { value: 1.3 }, iridescenceThicknessMinimum: { value: 100 }, iridescenceThicknessMaximum: { value: 400 }, iridescenceThicknessMap: { value: null }, sheen: { value: 0 }, sheenColor: { value: new Ti(0) }, sheenColorMap: { value: null }, sheenRoughness: { value: 1 }, sheenRoughnessMap: { value: null }, transmission: { value: 0 }, transmissionMap: { value: null }, transmissionSamplerSize: { value: new ke }, transmissionSamplerMap: { value: null }, thickness: { value: 0 }, thicknessMap: { value: null }, attenuationDistance: { value: 0 }, attenuationColor: { value: new Ti(0) }, specularIntensity: { value: 1 }, specularIntensityMap: { value: null }, specularColor: { value: new Ti(1, 1, 1) }, specularColorMap: { value: null } }]), vertexShader: Ar.meshphysical_vert, fragmentShader: Ar.meshphysical_frag }; const Pr = { r: 0, b: 0, g: 0 }; function Rr(t, e, n, i, r, a, o) { const s = new Ti(0); let l, c, u = !0 === a ? 0 : 1, h = null, d = 0, p = null; function g(e, n) { e.getRGB(Pr, lr(t)), i.buffers.color.setClear(Pr.r, Pr.g, Pr.b, n, o) } return { getClearColor: function () { return s }, setClearColor: function (t, e = 1) { s.set(t), u = e, g(s, u) }, getClearAlpha: function () { return u }, setClearAlpha: function (t) { u = t, g(s, u) }, render: function (i, a) { let o = !1, v = !0 === a.isScene ? a.background : null; if (v && v.isTexture) { v = (a.backgroundBlurriness > 0 ? n : e).get(v) } const _ = t.xr, y = _.getSession && _.getSession(); y && "additive" === y.environmentBlendMode && (v = null), null === v ? g(s, u) : v && v.isColor && (g(v, 1), o = !0), (t.autoClear || o) && t.clear(t.autoClearColor, t.autoClearDepth, t.autoClearStencil), v && (v.isCubeTexture || v.mapping === ot) ? (void 0 === c && (c = new ir(new ar(1, 1, 1), new ur({ name: "BackgroundCubeMaterial", uniforms: or(Lr.backgroundCube.uniforms), vertexShader: Lr.backgroundCube.vertexShader, fragmentShader: Lr.backgroundCube.fragmentShader, side: m, depthTest: !1, depthWrite: !1, fog: !1 })), c.geometry.deleteAttribute("normal"), c.geometry.deleteAttribute("uv"), c.onBeforeRender = function (t, e, n) { this.matrixWorld.copyPosition(n.matrixWorld) }, Object.defineProperty(c.material, "envMap", { get: function () { return this.uniforms.envMap.value } }), r.update(c)), c.material.uniforms.envMap.value = v, c.material.uniforms.flipEnvMap.value = v.isCubeTexture && !1 === v.isRenderTargetTexture ? -1 : 1, c.material.uniforms.backgroundBlurriness.value = a.backgroundBlurriness, c.material.uniforms.backgroundIntensity.value = a.backgroundIntensity, c.material.toneMapped = v.encoding !== me, h === v && d === v.version && p === t.toneMapping || (c.material.needsUpdate = !0, h = v, d = v.version, p = t.toneMapping), c.layers.enableAll(), i.unshift(c, c.geometry, c.material, 0, 0, null)) : v && v.isTexture && (void 0 === l && (l = new ir(new Tr(2, 2), new ur({ name: "BackgroundMaterial", uniforms: or(Lr.background.uniforms), vertexShader: Lr.background.vertexShader, fragmentShader: Lr.background.fragmentShader, side: f, depthTest: !1, depthWrite: !1, fog: !1 })), l.geometry.deleteAttribute("normal"), Object.defineProperty(l.material, "map", { get: function () { return this.uniforms.t2D.value } }), r.update(l)), l.material.uniforms.t2D.value = v, l.material.uniforms.backgroundIntensity.value = a.backgroundIntensity, l.material.toneMapped = v.encoding !== me, !0 === v.matrixAutoUpdate && v.updateMatrix(), l.material.uniforms.uvTransform.value.copy(v.matrix), h === v && d === v.version && p === t.toneMapping || (l.material.needsUpdate = !0, h = v, d = v.version, p = t.toneMapping), l.layers.enableAll(), i.unshift(l, l.geometry, l.material, 0, 0, null)) } } } function Dr(t, e, n, i) { const r = t.getParameter(34921), a = i.isWebGL2 ? null : e.get("OES_vertex_array_object"), o = i.isWebGL2 || null !== a, s = {}, l = p(null); let c = l, u = !1; function h(e) { return i.isWebGL2 ? t.bindVertexArray(e) : a.bindVertexArrayOES(e) } function d(e) { return i.isWebGL2 ? t.deleteVertexArray(e) : a.deleteVertexArrayOES(e) } function p(t) { const e = [], n = [], i = []; for (let t = 0; t < r; t++)e[t] = 0, n[t] = 0, i[t] = 0; return { geometry: null, program: null, wireframe: !1, newAttributes: e, enabledAttributes: n, attributeDivisors: i, object: t, attributes: {}, index: null } } function f() { const t = c.newAttributes; for (let e = 0, n = t.length; e < n; e++)t[e] = 0 } function m(t) { g(t, 0) } function g(n, r) { const a = c.newAttributes, o = c.enabledAttributes, s = c.attributeDivisors; if (a[n] = 1, 0 === o[n] && (t.enableVertexAttribArray(n), o[n] = 1), s[n] !== r) { (i.isWebGL2 ? t : e.get("ANGLE_instanced_arrays"))[i.isWebGL2 ? "vertexAttribDivisor" : "vertexAttribDivisorANGLE"](n, r), s[n] = r } } function v() { const e = c.newAttributes, n = c.enabledAttributes; for (let i = 0, r = n.length; i < r; i++)n[i] !== e[i] && (t.disableVertexAttribArray(i), n[i] = 0) } function _(e, n, r, a, o, s) { !0 !== i.isWebGL2 || 5124 !== r && 5125 !== r ? t.vertexAttribPointer(e, n, r, a, o, s) : t.vertexAttribIPointer(e, n, r, o, s) } function y() { x(), u = !0, c !== l && (c = l, h(c.object)) } function x() { l.geometry = null, l.program = null, l.wireframe = !1 } return { setup: function (r, l, d, y, x) { let b = !1; if (o) { const e = function (e, n, r) { const o = !0 === r.wireframe; let l = s[e.id]; void 0 === l && (l = {}, s[e.id] = l); let c = l[n.id]; void 0 === c && (c = {}, l[n.id] = c); let u = c[o]; void 0 === u && (u = p(i.isWebGL2 ? t.createVertexArray() : a.createVertexArrayOES()), c[o] = u); return u }(y, d, l); c !== e && (c = e, h(c.object)), b = function (t, e, n, i) { const r = c.attributes, a = e.attributes; let o = 0; const s = n.getAttributes(); for (const e in s) { if (s[e].location >= 0) { const n = r[e]; let i = a[e]; if (void 0 === i && ("instanceMatrix" === e && t.instanceMatrix && (i = t.instanceMatrix), "instanceColor" === e && t.instanceColor && (i = t.instanceColor)), void 0 === n) return !0; if (n.attribute !== i) return !0; if (i && n.data !== i.data) return !0; o++ } } return c.attributesNum !== o || c.index !== i }(r, y, d, x), b && function (t, e, n, i) { const r = {}, a = e.attributes; let o = 0; const s = n.getAttributes(); for (const e in s) { if (s[e].location >= 0) { let n = a[e]; void 0 === n && ("instanceMatrix" === e && t.instanceMatrix && (n = t.instanceMatrix), "instanceColor" === e && t.instanceColor && (n = t.instanceColor)); const i = {}; i.attribute = n, n && n.data && (i.data = n.data), r[e] = i, o++ } } c.attributes = r, c.attributesNum = o, c.index = i }(r, y, d, x) } else { const t = !0 === l.wireframe; c.geometry === y.id && c.program === d.id && c.wireframe === t || (c.geometry = y.id, c.program = d.id, c.wireframe = t, b = !0) } null !== x && n.update(x, 34963), (b || u) && (u = !1, function (r, a, o, s) { if (!1 === i.isWebGL2 && (r.isInstancedMesh || s.isInstancedBufferGeometry) && null === e.get("ANGLE_instanced_arrays")) return; f(); const l = s.attributes, c = o.getAttributes(), u = a.defaultAttributeValues; for (const e in c) { const i = c[e]; if (i.location >= 0) { let a = l[e]; if (void 0 === a && ("instanceMatrix" === e && r.instanceMatrix && (a = r.instanceMatrix), "instanceColor" === e && r.instanceColor && (a = r.instanceColor)), void 0 !== a) { const e = a.normalized, o = a.itemSize, l = n.get(a); if (void 0 === l) continue; const c = l.buffer, u = l.type, h = l.bytesPerElement; if (a.isInterleavedBufferAttribute) { const n = a.data, l = n.stride, d = a.offset; if (n.isInstancedInterleavedBuffer) { for (let t = 0; t < i.locationSize; t++)g(i.location + t, n.meshPerAttribute); !0 !== r.isInstancedMesh && void 0 === s._maxInstanceCount && (s._maxInstanceCount = n.meshPerAttribute * n.count) } else for (let t = 0; t < i.locationSize; t++)m(i.location + t); t.bindBuffer(34962, c); for (let t = 0; t < i.locationSize; t++)_(i.location + t, o / i.locationSize, u, e, l * h, (d + o / i.locationSize * t) * h) } else { if (a.isInstancedBufferAttribute) { for (let t = 0; t < i.locationSize; t++)g(i.location + t, a.meshPerAttribute); !0 !== r.isInstancedMesh && void 0 === s._maxInstanceCount && (s._maxInstanceCount = a.meshPerAttribute * a.count) } else for (let t = 0; t < i.locationSize; t++)m(i.location + t); t.bindBuffer(34962, c); for (let t = 0; t < i.locationSize; t++)_(i.location + t, o / i.locationSize, u, e, o * h, o / i.locationSize * t * h) } } else if (void 0 !== u) { const n = u[e]; if (void 0 !== n) switch (n.length) { case 2: t.vertexAttrib2fv(i.location, n); break; case 3: t.vertexAttrib3fv(i.location, n); break; case 4: t.vertexAttrib4fv(i.location, n); break; default: t.vertexAttrib1fv(i.location, n) } } } } v() }(r, l, d, y), null !== x && t.bindBuffer(34963, n.get(x).buffer)) }, reset: y, resetDefaultState: x, dispose: function () { y(); for (const t in s) { const e = s[t]; for (const t in e) { const n = e[t]; for (const t in n) d(n[t].object), delete n[t]; delete e[t] } delete s[t] } }, releaseStatesOfGeometry: function (t) { if (void 0 === s[t.id]) return; const e = s[t.id]; for (const t in e) { const n = e[t]; for (const t in n) d(n[t].object), delete n[t]; delete e[t] } delete s[t.id] }, releaseStatesOfProgram: function (t) { for (const e in s) { const n = s[e]; if (void 0 === n[t.id]) continue; const i = n[t.id]; for (const t in i) d(i[t].object), delete i[t]; delete n[t.id] } }, initAttributes: f, enableAttribute: m, disableUnusedAttributes: v } } function Or(t, e, n, i) { const r = i.isWebGL2; let a; this.setMode = function (t) { a = t }, this.render = function (e, i) { t.drawArrays(a, e, i), n.update(i, a, 1) }, this.renderInstances = function (i, o, s) { if (0 === s) return; let l, c; if (r) l = t, c = "drawArraysInstanced"; else if (l = e.get("ANGLE_instanced_arrays"), c = "drawArraysInstancedANGLE", null === l) return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays."); l[c](a, i, o, s), n.update(o, a, s) } } function Ir(t, e, n) { let i; function r(e) { if ("highp" === e) { if (t.getShaderPrecisionFormat(35633, 36338).precision > 0 && t.getShaderPrecisionFormat(35632, 36338).precision > 0) return "highp"; e = "mediump" } return "mediump" === e && t.getShaderPrecisionFormat(35633, 36337).precision > 0 && t.getShaderPrecisionFormat(35632, 36337).precision > 0 ? "mediump" : "lowp" } const a = "undefined" != typeof WebGL2RenderingContext && t instanceof WebGL2RenderingContext; let o = void 0 !== n.precision ? n.precision : "highp"; const s = r(o); s !== o && (console.warn("THREE.WebGLRenderer:", o, "not supported, using", s, "instead."), o = s); const l = a || e.has("WEBGL_draw_buffers"), c = !0 === n.logarithmicDepthBuffer, u = t.getParameter(34930), h = t.getParameter(35660), d = t.getParameter(3379), p = t.getParameter(34076), f = t.getParameter(34921), m = t.getParameter(36347), g = t.getParameter(36348), v = t.getParameter(36349), _ = h > 0, y = a || e.has("OES_texture_float"); return { isWebGL2: a, drawBuffers: l, getMaxAnisotropy: function () { if (void 0 !== i) return i; if (!0 === e.has("EXT_texture_filter_anisotropic")) { const n = e.get("EXT_texture_filter_anisotropic"); i = t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT) } else i = 0; return i }, getMaxPrecision: r, precision: o, logarithmicDepthBuffer: c, maxTextures: u, maxVertexTextures: h, maxTextureSize: d, maxCubemapSize: p, maxAttributes: f, maxVertexUniforms: m, maxVaryings: g, maxFragmentUniforms: v, vertexTextures: _, floatFragmentTextures: y, floatVertexTextures: _ && y, maxSamples: a ? t.getParameter(36183) : 0 } } function Nr(t) { const e = this; let n = null, i = 0, r = !1, a = !1; const o = new xr, s = new ze, l = { value: null, needsUpdate: !1 }; function c(t, n, i, r) { const a = null !== t ? t.length : 0; let c = null; if (0 !== a) { if (c = l.value, !0 !== r || null === c) { const e = i + 4 * a, r = n.matrixWorldInverse; s.getNormalMatrix(r), (null === c || c.length < e) && (c = new Float32Array(e)); for (let e = 0, n = i; e !== a; ++e, n += 4)o.copy(t[e]).applyMatrix4(r, s), o.normal.toArray(c, n), c[n + 3] = o.constant } l.value = c, l.needsUpdate = !0 } return e.numPlanes = a, e.numIntersection = 0, c } this.uniform = l, this.numPlanes = 0, this.numIntersection = 0, this.init = function (t, e) { const n = 0 !== t.length || e || 0 !== i || r; return r = e, i = t.length, n }, this.beginShadows = function () { a = !0, c(null) }, this.endShadows = function () { a = !1 }, this.setGlobalState = function (t, e) { n = c(t, e, 0) }, this.setState = function (o, s, u) { const h = o.clippingPlanes, d = o.clipIntersection, p = o.clipShadows, f = t.get(o); if (!r || null === h || 0 === h.length || a && !p) a ? c(null) : function () { l.value !== n && (l.value = n, l.needsUpdate = i > 0); e.numPlanes = i, e.numIntersection = 0 }(); else { const t = a ? 0 : i, e = 4 * t; let r = f.clippingState || null; l.value = r, r = c(h, s, e, u); for (let t = 0; t !== e; ++t)r[t] = n[t]; f.clippingState = r, this.numIntersection = d ? this.numPlanes : 0, this.numPlanes += t } } } function kr(t) { let e = new WeakMap; function n(t, e) { return e === rt ? t.mapping = nt : e === at && (t.mapping = it), t } function i(t) { const n = t.target; n.removeEventListener("dispose", i); const r = e.get(n); void 0 !== r && (e.delete(n), r.dispose()) } return { get: function (r) { if (r && r.isTexture && !1 === r.isRenderTargetTexture) { const a = r.mapping; if (a === rt || a === at) { if (e.has(r)) { return n(e.get(r).texture, r.mapping) } { const a = r.image; if (a && a.height > 0) { const o = new gr(a.height / 2); return o.fromEquirectangularTexture(t, r), e.set(r, o), r.addEventListener("dispose", i), n(o.texture, r.mapping) } return null } } } return r }, dispose: function () { e = new WeakMap } } } class zr extends hr { constructor(t = -1, e = 1, n = 1, i = -1, r = .1, a = 2e3) { super(), this.isOrthographicCamera = !0, this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = t, this.right = e, this.top = n, this.bottom = i, this.near = r, this.far = a, this.updateProjectionMatrix() } copy(t, e) { return super.copy(t, e), this.left = t.left, this.right = t.right, this.top = t.top, this.bottom = t.bottom, this.near = t.near, this.far = t.far, this.zoom = t.zoom, this.view = null === t.view ? null : Object.assign({}, t.view), this } setViewOffset(t, e, n, i, r, a) { null === this.view && (this.view = { enabled: !0, fullWidth: 1, fullHeight: 1, offsetX: 0, offsetY: 0, width: 1, height: 1 }), this.view.enabled = !0, this.view.fullWidth = t, this.view.fullHeight = e, this.view.offsetX = n, this.view.offsetY = i, this.view.width = r, this.view.height = a, this.updateProjectionMatrix() } clearViewOffset() { null !== this.view && (this.view.enabled = !1), this.updateProjectionMatrix() } updateProjectionMatrix() { const t = (this.right - this.left) / (2 * this.zoom), e = (this.top - this.bottom) / (2 * this.zoom), n = (this.right + this.left) / 2, i = (this.top + this.bottom) / 2; let r = n - t, a = n + t, o = i + e, s = i - e; if (null !== this.view && this.view.enabled) { const t = (this.right - this.left) / this.view.fullWidth / this.zoom, e = (this.top - this.bottom) / this.view.fullHeight / this.zoom; r += t * this.view.offsetX, a = r + t * this.view.width, o -= e * this.view.offsetY, s = o - e * this.view.height } this.projectionMatrix.makeOrthographic(r, a, o, s, this.near, this.far), this.projectionMatrixInverse.copy(this.projectionMatrix).invert() } toJSON(t) { const e = super.toJSON(t); return e.object.zoom = this.zoom, e.object.left = this.left, e.object.right = this.right, e.object.top = this.top, e.object.bottom = this.bottom, e.object.near = this.near, e.object.far = this.far, null !== this.view && (e.object.view = Object.assign({}, this.view)), e } } const Ur = 4, Fr = [.125, .215, .35, .446, .526, .582], Br = 20, jr = new zr, Gr = new Ti; let Hr = null; const Vr = (1 + Math.sqrt(5)) / 2, Wr = 1 / Vr, qr = [new Ge(1, 1, 1), new Ge(-1, 1, 1), new Ge(1, 1, -1), new Ge(-1, 1, -1), new Ge(0, Vr, Wr), new Ge(0, Vr, -Wr), new Ge(Wr, 0, Vr), new Ge(-Wr, 0, Vr), new Ge(Vr, Wr, 0), new Ge(-Vr, Wr, 0)]; class Xr { constructor(t) { this._renderer = t, this._pingPongRenderTarget = null, this._lodMax = 0, this._cubeSize = 0, this._lodPlanes = [], this._sizeLods = [], this._sigmas = [], this._blurMaterial = null, this._cubemapMaterial = null, this._equirectMaterial = null, this._compileMaterial(this._blurMaterial) } fromScene(t, e = 0, n = .1, i = 100) { Hr = this._renderer.getRenderTarget(), this._setSize(256); const r = this._allocateTargets(); return r.depthBuffer = !0, this._sceneToCubeUV(t, n, i, r), e > 0 && this._blur(r, 0, 0, e), this._applyPMREM(r), this._cleanup(r), r } fromEquirectangular(t, e = null) { return this._fromTexture(t, e) } fromCubemap(t, e = null) { return this._fromTexture(t, e) } compileCubemapShader() { null === this._cubemapMaterial && (this._cubemapMaterial = Jr(), this._compileMaterial(this._cubemapMaterial)) } compileEquirectangularShader() { null === this._equirectMaterial && (this._equirectMaterial = Zr(), this._compileMaterial(this._equirectMaterial)) } dispose() { this._dispose(), null !== this._cubemapMaterial && this._cubemapMaterial.dispose(), null !== this._equirectMaterial && this._equirectMaterial.dispose() } _setSize(t) { this._lodMax = Math.floor(Math.log2(t)), this._cubeSize = Math.pow(2, this._lodMax) } _dispose() { null !== this._blurMaterial && this._blurMaterial.dispose(), null !== this._pingPongRenderTarget && this._pingPongRenderTarget.dispose(); for (let t = 0; t < this._lodPlanes.length; t++)this._lodPlanes[t].dispose() } _cleanup(t) { this._renderer.setRenderTarget(Hr), t.scissorTest = !1, $r(t, 0, 0, t.width, t.height) } _fromTexture(t, e) { t.mapping === nt || t.mapping === it ? this._setSize(0 === t.image.length ? 16 : t.image[0].width || t.image[0].image.width) : this._setSize(t.image.width / 4), Hr = this._renderer.getRenderTarget(); const n = e || this._allocateTargets(); return this._textureToCubeUV(t, n), this._applyPMREM(n), this._cleanup(n), n } _allocateTargets() { const t = 3 * Math.max(this._cubeSize, 112), e = 4 * this._cubeSize, n = { magFilter: pt, minFilter: pt, generateMipmaps: !1, type: Mt, format: Ct, encoding: fe, depthBuffer: !1 }, i = Yr(t, e, n); if (null === this._pingPongRenderTarget || this._pingPongRenderTarget.width !== t || this._pingPongRenderTarget.height !== e) { null !== this._pingPongRenderTarget && this._dispose(), this._pingPongRenderTarget = Yr(t, e, n); const { _lodMax: i } = this; ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = function (t) { const e = [], n = [], i = []; let r = t; const a = t - Ur + 1 + Fr.length; for (let o = 0; o < a; o++) { const a = Math.pow(2, r); n.push(a); let s = 1 / a; o > t - Ur ? s = Fr[o - t + Ur - 1] : 0 === o && (s = 0), i.push(s); const l = 1 / (a - 2), c = -l, u = 1 + l, h = [c, c, u, c, u, u, c, c, u, u, c, u], d = 6, p = 6, f = 3, m = 2, g = 1, v = new Float32Array(f * p * d), _ = new Float32Array(m * p * d), y = new Float32Array(g * p * d); for (let t = 0; t < d; t++) { const e = t % 3 * 2 / 3 - 1, n = t > 2 ? 0 : -1, i = [e, n, 0, e + 2 / 3, n, 0, e + 2 / 3, n + 1, 0, e, n, 0, e + 2 / 3, n + 1, 0, e, n + 1, 0]; v.set(i, f * p * t), _.set(h, m * p * t); const r = [t, t, t, t, t, t]; y.set(r, g * p * t) } const x = new Gi; x.setAttribute("position", new Ri(v, f)), x.setAttribute("uv", new Ri(_, m)), x.setAttribute("faceIndex", new Ri(y, g)), e.push(x), r > Ur && r-- } return { lodPlanes: e, sizeLods: n, sigmas: i } }(i)), this._blurMaterial = function (t, e, n) { const i = new Float32Array(Br), r = new Ge(0, 1, 0), a = new ur({ name: "SphericalGaussianBlur", defines: { n: Br, CUBEUV_TEXEL_WIDTH: 1 / e, CUBEUV_TEXEL_HEIGHT: 1 / n, CUBEUV_MAX_MIP: `${t}.0` }, uniforms: { envMap: { value: null }, samples: { value: 1 }, weights: { value: i }, latitudinal: { value: !1 }, dTheta: { value: 0 }, mipInt: { value: 0 }, poleAxis: { value: r } }, vertexShader: Kr(), fragmentShader: "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t", blending: v, depthTest: !1, depthWrite: !1 }); return a }(i, t, e) } return i } _compileMaterial(t) { const e = new ir(this._lodPlanes[0], t); this._renderer.compile(e, jr) } _sceneToCubeUV(t, e, n, i) { const r = new dr(90, 1, e, n), a = [1, -1, 1, 1, 1, 1], o = [1, 1, 1, -1, -1, -1], s = this._renderer, l = s.autoClear, c = s.toneMapping; s.getClearColor(Gr), s.toneMapping = Z, s.autoClear = !1; const u = new Ci({ name: "PMREM.Background", side: m, depthWrite: !1, depthTest: !1 }), h = new ir(new ar, u); let d = !1; const p = t.background; p ? p.isColor && (u.color.copy(p), t.background = null, d = !0) : (u.color.copy(Gr), d = !0); for (let e = 0; e < 6; e++) { const n = e % 3; 0 === n ? (r.up.set(0, a[e], 0), r.lookAt(o[e], 0, 0)) : 1 === n ? (r.up.set(0, 0, a[e]), r.lookAt(0, o[e], 0)) : (r.up.set(0, a[e], 0), r.lookAt(0, 0, o[e])); const l = this._cubeSize; $r(i, n * l, e > 2 ? l : 0, l, l), s.setRenderTarget(i), d && s.render(h, r), s.render(t, r) } h.geometry.dispose(), h.material.dispose(), s.toneMapping = c, s.autoClear = l, t.background = p } _textureToCubeUV(t, e) { const n = this._renderer, i = t.mapping === nt || t.mapping === it; i ? (null === this._cubemapMaterial && (this._cubemapMaterial = Jr()), this._cubemapMaterial.uniforms.flipEnvMap.value = !1 === t.isRenderTargetTexture ? -1 : 1) : null === this._equirectMaterial && (this._equirectMaterial = Zr()); const r = i ? this._cubemapMaterial : this._equirectMaterial, a = new ir(this._lodPlanes[0], r); r.uniforms.envMap.value = t; const o = this._cubeSize; $r(e, 0, 0, 3 * o, 2 * o), n.setRenderTarget(e), n.render(a, jr) } _applyPMREM(t) { const e = this._renderer, n = e.autoClear; e.autoClear = !1; for (let e = 1; e < this._lodPlanes.length; e++) { const n = Math.sqrt(this._sigmas[e] * this._sigmas[e] - this._sigmas[e - 1] * this._sigmas[e - 1]), i = qr[(e - 1) % qr.length]; this._blur(t, e - 1, e, n, i) } e.autoClear = n } _blur(t, e, n, i, r) { const a = this._pingPongRenderTarget; this._halfBlur(t, a, e, n, i, "latitudinal", r), this._halfBlur(a, t, n, n, i, "longitudinal", r) } _halfBlur(t, e, n, i, r, a, o) { const s = this._renderer, l = this._blurMaterial; "latitudinal" !== a && "longitudinal" !== a && console.error("blur direction must be either latitudinal or longitudinal!"); const c = new ir(this._lodPlanes[i], l), u = l.uniforms, h = this._sizeLods[n] - 1, d = isFinite(r) ? Math.PI / (2 * h) : 2 * Math.PI / (2 * Br - 1), p = r / d, f = isFinite(r) ? 1 + Math.floor(3 * p) : Br; f > Br && console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${f} samples when the maximum is set to ${Br}`); const m = []; let g = 0; for (let t = 0; t < Br; ++t) { const e = t / p, n = Math.exp(-e * e / 2); m.push(n), 0 === t ? g += n : t < f && (g += 2 * n) } for (let t = 0; t < m.length; t++)m[t] = m[t] / g; u.envMap.value = t.texture, u.samples.value = f, u.weights.value = m, u.latitudinal.value = "latitudinal" === a, o && (u.poleAxis.value = o); const { _lodMax: v } = this; u.dTheta.value = d, u.mipInt.value = v - n; const _ = this._sizeLods[i]; $r(e, 3 * _ * (i > v - Ur ? i - v + Ur : 0), 4 * (this._cubeSize - _), 3 * _, 2 * _), s.setRenderTarget(e), s.render(c, jr) } } function Yr(t, e, n) { const i = new sn(t, e, n); return i.texture.mapping = ot, i.texture.name = "PMREM.cubeUv", i.scissorTest = !0, i } function $r(t, e, n, i, r) { t.viewport.set(e, n, i, r), t.scissor.set(e, n, i, r) } function Zr() { return new ur({ name: "EquirectangularToCubeUV", uniforms: { envMap: { value: null } }, vertexShader: Kr(), fragmentShader: "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t", blending: v, depthTest: !1, depthWrite: !1 }) } function Jr() { return new ur({ name: "CubemapToCubeUV", uniforms: { envMap: { value: null }, flipEnvMap: { value: -1 } }, vertexShader: Kr(), fragmentShader: "\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t", blending: v, depthTest: !1, depthWrite: !1 }) } function Kr() { return "\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t" } function Qr(t) { let e = new WeakMap, n = null; function i(t) { const n = t.target; n.removeEventListener("dispose", i); const r = e.get(n); void 0 !== r && (e.delete(n), r.dispose()) } return { get: function (r) { if (r && r.isTexture) { const a = r.mapping, o = a === rt || a === at, s = a === nt || a === it; if (o || s) { if (r.isRenderTargetTexture && !0 === r.needsPMREMUpdate) { r.needsPMREMUpdate = !1; let i = e.get(r); return null === n && (n = new Xr(t)), i = o ? n.fromEquirectangular(r, i) : n.fromCubemap(r, i), e.set(r, i), i.texture } if (e.has(r)) return e.get(r).texture; { const a = r.image; if (o && a && a.height > 0 || s && a && function (t) { let e = 0; const n = 6; for (let i = 0; i < n; i++)void 0 !== t[i] && e++; return e === n }(a)) { null === n && (n = new Xr(t)); const a = o ? n.fromEquirectangular(r) : n.fromCubemap(r); return e.set(r, a), r.addEventListener("dispose", i), a.texture } return null } } } return r }, dispose: function () { e = new WeakMap, null !== n && (n.dispose(), n = null) } } } function ta(t) { const e = {}; function n(n) { if (void 0 !== e[n]) return e[n]; let i; switch (n) { case "WEBGL_depth_texture": i = t.getExtension("WEBGL_depth_texture") || t.getExtension("MOZ_WEBGL_depth_texture") || t.getExtension("WEBKIT_WEBGL_depth_texture"); break; case "EXT_texture_filter_anisotropic": i = t.getExtension("EXT_texture_filter_anisotropic") || t.getExtension("MOZ_EXT_texture_filter_anisotropic") || t.getExtension("WEBKIT_EXT_texture_filter_anisotropic"); break; case "WEBGL_compressed_texture_s3tc": i = t.getExtension("WEBGL_compressed_texture_s3tc") || t.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc"); break; case "WEBGL_compressed_texture_pvrtc": i = t.getExtension("WEBGL_compressed_texture_pvrtc") || t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc"); break; default: i = t.getExtension(n) }return e[n] = i, i } return { has: function (t) { return null !== n(t) }, init: function (t) { t.isWebGL2 ? n("EXT_color_buffer_float") : (n("WEBGL_depth_texture"), n("OES_texture_float"), n("OES_texture_half_float"), n("OES_texture_half_float_linear"), n("OES_standard_derivatives"), n("OES_element_index_uint"), n("OES_vertex_array_object"), n("ANGLE_instanced_arrays")), n("OES_texture_float_linear"), n("EXT_color_buffer_half_float"), n("WEBGL_multisampled_render_to_texture") }, get: function (t) { const e = n(t); return null === e && console.warn("THREE.WebGLRenderer: " + t + " extension not supported."), e } } } function ea(t, e, n, i) { const r = {}, a = new WeakMap; function o(t) { const s = t.target; null !== s.index && e.remove(s.index); for (const t in s.attributes) e.remove(s.attributes[t]); s.removeEventListener("dispose", o), delete r[s.id]; const l = a.get(s); l && (e.remove(l), a.delete(s)), i.releaseStatesOfGeometry(s), !0 === s.isInstancedBufferGeometry && delete s._maxInstanceCount, n.memory.geometries-- } function s(t) { const n = [], i = t.index, r = t.attributes.position; let o = 0; if (null !== i) { const t = i.array; o = i.version; for (let e = 0, i = t.length; e < i; e += 3) { const i = t[e + 0], r = t[e + 1], a = t[e + 2]; n.push(i, r, r, a, a, i) } } else { const t = r.array; o = r.version; for (let e = 0, i = t.length / 3 - 1; e < i; e += 3) { const t = e + 0, i = e + 1, r = e + 2; n.push(t, i, i, r, r, t) } } const s = new (Fe(n) ? Oi : Di)(n, 1); s.version = o; const l = a.get(t); l && e.remove(l), a.set(t, s) } return { get: function (t, e) { return !0 === r[e.id] || (e.addEventListener("dispose", o), r[e.id] = !0, n.memory.geometries++), e }, update: function (t) { const n = t.attributes; for (const t in n) e.update(n[t], 34962); const i = t.morphAttributes; for (const t in i) { const n = i[t]; for (let t = 0, i = n.length; t < i; t++)e.update(n[t], 34962) } }, getWireframeAttribute: function (t) { const e = a.get(t); if (e) { const n = t.index; null !== n && e.version < n.version && s(t) } else s(t); return a.get(t) } } } function na(t, e, n, i) { const r = i.isWebGL2; let a, o, s; this.setMode = function (t) { a = t }, this.setIndex = function (t) { o = t.type, s = t.bytesPerElement }, this.render = function (e, i) { t.drawElements(a, i, o, e * s), n.update(i, a, 1) }, this.renderInstances = function (i, l, c) { if (0 === c) return; let u, h; if (r) u = t, h = "drawElementsInstanced"; else if (u = e.get("ANGLE_instanced_arrays"), h = "drawElementsInstancedANGLE", null === u) return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays."); u[h](a, l, o, i * s, c), n.update(l, a, c) } } function ia(t) { const e = { frame: 0, calls: 0, triangles: 0, points: 0, lines: 0 }; return { memory: { geometries: 0, textures: 0 }, render: e, programs: null, autoReset: !0, reset: function () { e.frame++, e.calls = 0, e.triangles = 0, e.points = 0, e.lines = 0 }, update: function (t, n, i) { switch (e.calls++, n) { case 4: e.triangles += i * (t / 3); break; case 1: e.lines += i * (t / 2); break; case 3: e.lines += i * (t - 1); break; case 2: e.lines += i * t; break; case 0: e.points += i * t; break; default: console.error("THREE.WebGLInfo: Unknown draw mode:", n) } } } } function ra(t, e) { return t[0] - e[0] } function aa(t, e) { return Math.abs(e[1]) - Math.abs(t[1]) } function oa(t, e, n) { const i = {}, r = new Float32Array(8), a = new WeakMap, o = new on, s = []; for (let t = 0; t < 8; t++)s[t] = [t, 0]; return { update: function (l, c, u) { const h = l.morphTargetInfluences; if (!0 === e.isWebGL2) { const d = c.morphAttributes.position || c.morphAttributes.normal || c.morphAttributes.color, p = void 0 !== d ? d.length : 0; let f = a.get(c); if (void 0 === f || f.count !== p) { void 0 !== f && f.texture.dispose(); const v = void 0 !== c.morphAttributes.position, _ = void 0 !== c.morphAttributes.normal, y = void 0 !== c.morphAttributes.color, x = c.morphAttributes.position || [], b = c.morphAttributes.normal || [], w = c.morphAttributes.color || []; let M = 0; !0 === v && (M = 1), !0 === _ && (M = 2), !0 === y && (M = 3); let S = c.attributes.position.count * M, E = 1; S > e.maxTextureSize && (E = Math.ceil(S / e.maxTextureSize), S = e.maxTextureSize); const T = new Float32Array(S * E * 4 * p), A = new ln(T, S, E, p); A.type = wt, A.needsUpdate = !0; const C = 4 * M; for (let P = 0; P < p; P++) { const R = x[P], D = b[P], O = w[P], I = S * E * 4 * P; for (let N = 0; N < R.count; N++) { const k = N * C; !0 === v && (o.fromBufferAttribute(R, N), T[I + k + 0] = o.x, T[I + k + 1] = o.y, T[I + k + 2] = o.z, T[I + k + 3] = 0), !0 === _ && (o.fromBufferAttribute(D, N), T[I + k + 4] = o.x, T[I + k + 5] = o.y, T[I + k + 6] = o.z, T[I + k + 7] = 0), !0 === y && (o.fromBufferAttribute(O, N), T[I + k + 8] = o.x, T[I + k + 9] = o.y, T[I + k + 10] = o.z, T[I + k + 11] = 4 === O.itemSize ? o.w : 1) } } function L() { A.dispose(), a.delete(c), c.removeEventListener("dispose", L) } f = { count: p, texture: A, size: new ke(S, E) }, a.set(c, f), c.addEventListener("dispose", L) } let m = 0; for (let z = 0; z < h.length; z++)m += h[z]; const g = c.morphTargetsRelative ? 1 : 1 - m; u.getUniforms().setValue(t, "morphTargetBaseInfluence", g), u.getUniforms().setValue(t, "morphTargetInfluences", h), u.getUniforms().setValue(t, "morphTargetsTexture", f.texture, n), u.getUniforms().setValue(t, "morphTargetsTextureSize", f.size) } else { const U = void 0 === h ? 0 : h.length; let F = i[c.id]; if (void 0 === F || F.length !== U) { F = []; for (let V = 0; V < U; V++)F[V] = [V, 0]; i[c.id] = F } for (let W = 0; W < U; W++) { const q = F[W]; q[0] = W, q[1] = h[W] } F.sort(aa); for (let X = 0; X < 8; X++)X < U && F[X][1] ? (s[X][0] = F[X][0], s[X][1] = F[X][1]) : (s[X][0] = Number.MAX_SAFE_INTEGER, s[X][1] = 0); s.sort(ra); const B = c.morphAttributes.position, j = c.morphAttributes.normal; let G = 0; for (let Y = 0; Y < 8; Y++) { const $ = s[Y], Z = $[0], J = $[1]; Z !== Number.MAX_SAFE_INTEGER && J ? (B && c.getAttribute("morphTarget" + Y) !== B[Z] && c.setAttribute("morphTarget" + Y, B[Z]), j && c.getAttribute("morphNormal" + Y) !== j[Z] && c.setAttribute("morphNormal" + Y, j[Z]), r[Y] = J, G += J) : (B && !0 === c.hasAttribute("morphTarget" + Y) && c.deleteAttribute("morphTarget" + Y), j && !0 === c.hasAttribute("morphNormal" + Y) && c.deleteAttribute("morphNormal" + Y), r[Y] = 0) } const H = c.morphTargetsRelative ? 1 : 1 - G; u.getUniforms().setValue(t, "morphTargetBaseInfluence", H), u.getUniforms().setValue(t, "morphTargetInfluences", r) } } } } function sa(t, e, n, i) { let r = new WeakMap; function a(t) { const e = t.target; e.removeEventListener("dispose", a), n.remove(e.instanceMatrix), null !== e.instanceColor && n.remove(e.instanceColor) } return { update: function (t) { const o = i.render.frame, s = t.geometry, l = e.get(t, s); return r.get(l) !== o && (e.update(l), r.set(l, o)), t.isInstancedMesh && (!1 === t.hasEventListener("dispose", a) && t.addEventListener("dispose", a), n.update(t.instanceMatrix, 34962), null !== t.instanceColor && n.update(t.instanceColor, 34962)), l }, dispose: function () { r = new WeakMap } } } const la = new an, ca = new ln, ua = new cn, ha = new mr, da = [], pa = [], fa = new Float32Array(16), ma = new Float32Array(9), ga = new Float32Array(4); function va(t, e, n) { const i = t[0]; if (i <= 0 || i > 0) return t; const r = e * n; let a = da[r]; if (void 0 === a && (a = new Float32Array(r), da[r] = a), 0 !== e) { i.toArray(a, 0); for (let i = 1, r = 0; i !== e; ++i)r += n, t[i].toArray(a, r) } return a } function _a(t, e) { if (t.length !== e.length) return !1; for (let n = 0, i = t.length; n < i; n++)if (t[n] !== e[n]) return !1; return !0 } function ya(t, e) { for (let n = 0, i = e.length; n < i; n++)t[n] = e[n] } function xa(t, e) { let n = pa[e]; void 0 === n && (n = new Int32Array(e), pa[e] = n); for (let i = 0; i !== e; ++i)n[i] = t.allocateTextureUnit(); return n } function ba(t, e) { const n = this.cache; n[0] !== e && (t.uniform1f(this.addr, e), n[0] = e) } function wa(t, e) { const n = this.cache; if (void 0 !== e.x) n[0] === e.x && n[1] === e.y || (t.uniform2f(this.addr, e.x, e.y), n[0] = e.x, n[1] = e.y); else { if (_a(n, e)) return; t.uniform2fv(this.addr, e), ya(n, e) } } function Ma(t, e) { const n = this.cache; if (void 0 !== e.x) n[0] === e.x && n[1] === e.y && n[2] === e.z || (t.uniform3f(this.addr, e.x, e.y, e.z), n[0] = e.x, n[1] = e.y, n[2] = e.z); else if (void 0 !== e.r) n[0] === e.r && n[1] === e.g && n[2] === e.b || (t.uniform3f(this.addr, e.r, e.g, e.b), n[0] = e.r, n[1] = e.g, n[2] = e.b); else { if (_a(n, e)) return; t.uniform3fv(this.addr, e), ya(n, e) } } function Sa(t, e) { const n = this.cache; if (void 0 !== e.x) n[0] === e.x && n[1] === e.y && n[2] === e.z && n[3] === e.w || (t.uniform4f(this.addr, e.x, e.y, e.z, e.w), n[0] = e.x, n[1] = e.y, n[2] = e.z, n[3] = e.w); else { if (_a(n, e)) return; t.uniform4fv(this.addr, e), ya(n, e) } } function Ea(t, e) { const n = this.cache, i = e.elements; if (void 0 === i) { if (_a(n, e)) return; t.uniformMatrix2fv(this.addr, !1, e), ya(n, e) } else { if (_a(n, i)) return; ga.set(i), t.uniformMatrix2fv(this.addr, !1, ga), ya(n, i) } } function Ta(t, e) { const n = this.cache, i = e.elements; if (void 0 === i) { if (_a(n, e)) return; t.uniformMatrix3fv(this.addr, !1, e), ya(n, e) } else { if (_a(n, i)) return; ma.set(i), t.uniformMatrix3fv(this.addr, !1, ma), ya(n, i) } } function Aa(t, e) { const n = this.cache, i = e.elements; if (void 0 === i) { if (_a(n, e)) return; t.uniformMatrix4fv(this.addr, !1, e), ya(n, e) } else { if (_a(n, i)) return; fa.set(i), t.uniformMatrix4fv(this.addr, !1, fa), ya(n, i) } } function Ca(t, e) { const n = this.cache; n[0] !== e && (t.uniform1i(this.addr, e), n[0] = e) } function La(t, e) { const n = this.cache; if (void 0 !== e.x) n[0] === e.x && n[1] === e.y || (t.uniform2i(this.addr, e.x, e.y), n[0] = e.x, n[1] = e.y); else { if (_a(n, e)) return; t.uniform2iv(this.addr, e), ya(n, e) } } function Pa(t, e) { const n = this.cache; if (void 0 !== e.x) n[0] === e.x && n[1] === e.y && n[2] === e.z || (t.uniform3i(this.addr, e.x, e.y, e.z), n[0] = e.x, n[1] = e.y, n[2] = e.z); else { if (_a(n, e)) return; t.uniform3iv(this.addr, e), ya(n, e) } } function Ra(t, e) { const n = this.cache; if (void 0 !== e.x) n[0] === e.x && n[1] === e.y && n[2] === e.z && n[3] === e.w || (t.uniform4i(this.addr, e.x, e.y, e.z, e.w), n[0] = e.x, n[1] = e.y, n[2] = e.z, n[3] = e.w); else { if (_a(n, e)) return; t.uniform4iv(this.addr, e), ya(n, e) } } function Da(t, e) { const n = this.cache; n[0] !== e && (t.uniform1ui(this.addr, e), n[0] = e) } function Oa(t, e) { const n = this.cache; if (void 0 !== e.x) n[0] === e.x && n[1] === e.y || (t.uniform2ui(this.addr, e.x, e.y), n[0] = e.x, n[1] = e.y); else { if (_a(n, e)) return; t.uniform2uiv(this.addr, e), ya(n, e) } } function Ia(t, e) { const n = this.cache; if (void 0 !== e.x) n[0] === e.x && n[1] === e.y && n[2] === e.z || (t.uniform3ui(this.addr, e.x, e.y, e.z), n[0] = e.x, n[1] = e.y, n[2] = e.z); else { if (_a(n, e)) return; t.uniform3uiv(this.addr, e), ya(n, e) } } function Na(t, e) { const n = this.cache; if (void 0 !== e.x) n[0] === e.x && n[1] === e.y && n[2] === e.z && n[3] === e.w || (t.uniform4ui(this.addr, e.x, e.y, e.z, e.w), n[0] = e.x, n[1] = e.y, n[2] = e.z, n[3] = e.w); else { if (_a(n, e)) return; t.uniform4uiv(this.addr, e), ya(n, e) } } function ka(t, e, n) { const i = this.cache, r = n.allocateTextureUnit(); i[0] !== r && (t.uniform1i(this.addr, r), i[0] = r), n.setTexture2D(e || la, r) } function za(t, e, n) { const i = this.cache, r = n.allocateTextureUnit(); i[0] !== r && (t.uniform1i(this.addr, r), i[0] = r), n.setTexture3D(e || ua, r) } function Ua(t, e, n) { const i = this.cache, r = n.allocateTextureUnit(); i[0] !== r && (t.uniform1i(this.addr, r), i[0] = r), n.setTextureCube(e || ha, r) } function Fa(t, e, n) { const i = this.cache, r = n.allocateTextureUnit(); i[0] !== r && (t.uniform1i(this.addr, r), i[0] = r), n.setTexture2DArray(e || ca, r) } function Ba(t, e) { t.uniform1fv(this.addr, e) } function ja(t, e) { const n = va(e, this.size, 2); t.uniform2fv(this.addr, n) } function Ga(t, e) { const n = va(e, this.size, 3); t.uniform3fv(this.addr, n) } function Ha(t, e) { const n = va(e, this.size, 4); t.uniform4fv(this.addr, n) } function Va(t, e) { const n = va(e, this.size, 4); t.uniformMatrix2fv(this.addr, !1, n) } function Wa(t, e) { const n = va(e, this.size, 9); t.uniformMatrix3fv(this.addr, !1, n) } function qa(t, e) { const n = va(e, this.size, 16); t.uniformMatrix4fv(this.addr, !1, n) } function Xa(t, e) { t.uniform1iv(this.addr, e) } function Ya(t, e) { t.uniform2iv(this.addr, e) } function $a(t, e) { t.uniform3iv(this.addr, e) } function Za(t, e) { t.uniform4iv(this.addr, e) } function Ja(t, e) { t.uniform1uiv(this.addr, e) } function Ka(t, e) { t.uniform2uiv(this.addr, e) } function Qa(t, e) { t.uniform3uiv(this.addr, e) } function to(t, e) { t.uniform4uiv(this.addr, e) } function eo(t, e, n) { const i = this.cache, r = e.length, a = xa(n, r); _a(i, a) || (t.uniform1iv(this.addr, a), ya(i, a)); for (let t = 0; t !== r; ++t)n.setTexture2D(e[t] || la, a[t]) } function no(t, e, n) { const i = this.cache, r = e.length, a = xa(n, r); _a(i, a) || (t.uniform1iv(this.addr, a), ya(i, a)); for (let t = 0; t !== r; ++t)n.setTexture3D(e[t] || ua, a[t]) } function io(t, e, n) { const i = this.cache, r = e.length, a = xa(n, r); _a(i, a) || (t.uniform1iv(this.addr, a), ya(i, a)); for (let t = 0; t !== r; ++t)n.setTextureCube(e[t] || ha, a[t]) } function ro(t, e, n) { const i = this.cache, r = e.length, a = xa(n, r); _a(i, a) || (t.uniform1iv(this.addr, a), ya(i, a)); for (let t = 0; t !== r; ++t)n.setTexture2DArray(e[t] || ca, a[t]) } class ao { constructor(t, e, n) { this.id = t, this.addr = n, this.cache = [], this.setValue = function (t) { switch (t) { case 5126: return ba; case 35664: return wa; case 35665: return Ma; case 35666: return Sa; case 35674: return Ea; case 35675: return Ta; case 35676: return Aa; case 5124: case 35670: return Ca; case 35667: case 35671: return La; case 35668: case 35672: return Pa; case 35669: case 35673: return Ra; case 5125: return Da; case 36294: return Oa; case 36295: return Ia; case 36296: return Na; case 35678: case 36198: case 36298: case 36306: case 35682: return ka; case 35679: case 36299: case 36307: return za; case 35680: case 36300: case 36308: case 36293: return Ua; case 36289: case 36303: case 36311: case 36292: return Fa } }(e.type) } } class oo { constructor(t, e, n) { this.id = t, this.addr = n, this.cache = [], this.size = e.size, this.setValue = function (t) { switch (t) { case 5126: return Ba; case 35664: return ja; case 35665: return Ga; case 35666: return Ha; case 35674: return Va; case 35675: return Wa; case 35676: return qa; case 5124: case 35670: return Xa; case 35667: case 35671: return Ya; case 35668: case 35672: return $a; case 35669: case 35673: return Za; case 5125: return Ja; case 36294: return Ka; case 36295: return Qa; case 36296: return to; case 35678: case 36198: case 36298: case 36306: case 35682: return eo; case 35679: case 36299: case 36307: return no; case 35680: case 36300: case 36308: case 36293: return io; case 36289: case 36303: case 36311: case 36292: return ro } }(e.type) } } class so { constructor(t) { this.id = t, this.seq = [], this.map = {} } setValue(t, e, n) { const i = this.seq; for (let r = 0, a = i.length; r !== a; ++r) { const a = i[r]; a.setValue(t, e[a.id], n) } } } const lo = /(\w+)(\])?(\[|\.)?/g; function co(t, e) { t.seq.push(e), t.map[e.id] = e } function uo(t, e, n) { const i = t.name, r = i.length; for (lo.lastIndex = 0; ;) { const a = lo.exec(i), o = lo.lastIndex; let s = a[1]; const l = "]" === a[2], c = a[3]; if (l && (s |= 0), void 0 === c || "[" === c && o + 2 === r) { co(n, void 0 === c ? new ao(s, t, e) : new oo(s, t, e)); break } { let t = n.map[s]; void 0 === t && (t = new so(s), co(n, t)), n = t } } } class ho { constructor(t, e) { this.seq = [], this.map = {}; const n = t.getProgramParameter(e, 35718); for (let i = 0; i < n; ++i) { const n = t.getActiveUniform(e, i); uo(n, t.getUniformLocation(e, n.name), this) } } setValue(t, e, n, i) { const r = this.map[e]; void 0 !== r && r.setValue(t, n, i) } setOptional(t, e, n) { const i = e[n]; void 0 !== i && this.setValue(t, n, i) } static upload(t, e, n, i) { for (let r = 0, a = e.length; r !== a; ++r) { const a = e[r], o = n[a.id]; !1 !== o.needsUpdate && a.setValue(t, o.value, i) } } static seqWithValue(t, e) { const n = []; for (let i = 0, r = t.length; i !== r; ++i) { const r = t[i]; r.id in e && n.push(r) } return n } } function po(t, e, n) { const i = t.createShader(e); return t.shaderSource(i, n), t.compileShader(i), i } let fo = 0; function mo(t, e, n) { const i = t.getShaderParameter(e, 35713), r = t.getShaderInfoLog(e).trim(); if (i && "" === r) return ""; const a = /ERROR: 0:(\d+)/.exec(r); if (a) { const i = parseInt(a[1]); return n.toUpperCase() + "\n\n" + r + "\n\n" + function (t, e) { const n = t.split("\n"), i = [], r = Math.max(e - 6, 0), a = Math.min(e + 6, n.length); for (let t = r; t < a; t++) { const r = t + 1; i.push(`${r === e ? ">" : " "} ${r}: ${n[t]}`) } return i.join("\n") }(t.getShaderSource(e), i) } return r } function go(t, e) { const n = function (t) { switch (t) { case fe: return ["Linear", "( value )"]; case me: return ["sRGB", "( value )"]; default: return console.warn("THREE.WebGLProgram: Unsupported encoding:", t), ["Linear", "( value )"] } }(e); return "vec4 " + t + "( vec4 value ) { return LinearTo" + n[0] + n[1] + "; }" } function vo(t, e) { let n; switch (e) { case J: n = "Linear"; break; case K: n = "Reinhard"; break; case Q: n = "OptimizedCineon"; break; case tt: n = "ACESFilmic"; break; case et: n = "Custom"; break; default: console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), n = "Linear" }return "vec3 " + t + "( vec3 color ) { return " + n + "ToneMapping( color ); }" } function _o(t) { return "" !== t } function yo(t, e) { const n = e.numSpotLightShadows + e.numSpotLightMaps - e.numSpotLightShadowsWithMaps; return t.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, n).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows) } function xo(t, e) { return t.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection) } const bo = /^[ \t]*#include +<([\w\d./]+)>/gm; function wo(t) { return t.replace(bo, Mo) } function Mo(t, e) { const n = Ar[e]; if (void 0 === n) throw new Error("Can not resolve #include <" + e + ">"); return wo(n) } const So = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g; function Eo(t) { return t.replace(So, To) } function To(t, e, n, i) { let r = ""; for (let t = parseInt(e); t < parseInt(n); t++)r += i.replace(/\[\s*i\s*\]/g, "[ " + t + " ]").replace(/UNROLLED_LOOP_INDEX/g, t); return r } function Ao(t) { let e = "precision " + t.precision + " float;\nprecision " + t.precision + " int;"; return "highp" === t.precision ? e += "\n#define HIGH_PRECISION" : "mediump" === t.precision ? e += "\n#define MEDIUM_PRECISION" : "lowp" === t.precision && (e += "\n#define LOW_PRECISION"), e } function Co(t, e, n, i) { const r = t.getContext(), a = n.defines; let o = n.vertexShader, s = n.fragmentShader; const l = function (t) { let e = "SHADOWMAP_TYPE_BASIC"; return t.shadowMapType === h ? e = "SHADOWMAP_TYPE_PCF" : t.shadowMapType === d ? e = "SHADOWMAP_TYPE_PCF_SOFT" : t.shadowMapType === p && (e = "SHADOWMAP_TYPE_VSM"), e }(n), c = function (t) { let e = "ENVMAP_TYPE_CUBE"; if (t.envMap) switch (t.envMapMode) { case nt: case it: e = "ENVMAP_TYPE_CUBE"; break; case ot: e = "ENVMAP_TYPE_CUBE_UV" }return e }(n), u = function (t) { let e = "ENVMAP_MODE_REFLECTION"; t.envMap && t.envMapMode === it && (e = "ENVMAP_MODE_REFRACTION"); return e }(n), f = function (t) { let e = "ENVMAP_BLENDING_NONE"; if (t.envMap) switch (t.combine) { case X: e = "ENVMAP_BLENDING_MULTIPLY"; break; case Y: e = "ENVMAP_BLENDING_MIX"; break; case $: e = "ENVMAP_BLENDING_ADD" }return e }(n), m = function (t) { const e = t.envMapCubeUVHeight; if (null === e) return null; const n = Math.log2(e) - 2, i = 1 / e; return { texelWidth: 1 / (3 * Math.max(Math.pow(2, n), 112)), texelHeight: i, maxMip: n } }(n), g = n.isWebGL2 ? "" : function (t) { return [t.extensionDerivatives || t.envMapCubeUVHeight || t.bumpMap || t.tangentSpaceNormalMap || t.clearcoatNormalMap || t.flatShading || "physical" === t.shaderID ? "#extension GL_OES_standard_derivatives : enable" : "", (t.extensionFragDepth || t.logarithmicDepthBuffer) && t.rendererExtensionFragDepth ? "#extension GL_EXT_frag_depth : enable" : "", t.extensionDrawBuffers && t.rendererExtensionDrawBuffers ? "#extension GL_EXT_draw_buffers : require" : "", (t.extensionShaderTextureLOD || t.envMap || t.transmission) && t.rendererExtensionShaderTextureLod ? "#extension GL_EXT_shader_texture_lod : enable" : ""].filter(_o).join("\n") }(n), v = function (t) { const e = []; for (const n in t) { const i = t[n]; !1 !== i && e.push("#define " + n + " " + i) } return e.join("\n") }(a), _ = r.createProgram(); let y, x, b = n.glslVersion ? "#version " + n.glslVersion + "\n" : ""; n.isRawShaderMaterial ? (y = [v].filter(_o).join("\n"), y.length > 0 && (y += "\n"), x = [g, v].filter(_o).join("\n"), x.length > 0 && (x += "\n")) : (y = [Ao(n), "#define SHADER_NAME " + n.shaderName, v, n.instancing ? "#define USE_INSTANCING" : "", n.instancingColor ? "#define USE_INSTANCING_COLOR" : "", n.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "", n.useFog && n.fog ? "#define USE_FOG" : "", n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "", n.map ? "#define USE_MAP" : "", n.envMap ? "#define USE_ENVMAP" : "", n.envMap ? "#define " + u : "", n.lightMap ? "#define USE_LIGHTMAP" : "", n.aoMap ? "#define USE_AOMAP" : "", n.emissiveMap ? "#define USE_EMISSIVEMAP" : "", n.bumpMap ? "#define USE_BUMPMAP" : "", n.normalMap ? "#define USE_NORMALMAP" : "", n.normalMap && n.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", n.normalMap && n.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", n.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", n.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "", n.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "", n.displacementMap && n.supportsVertexTextures ? "#define USE_DISPLACEMENTMAP" : "", n.specularMap ? "#define USE_SPECULARMAP" : "", n.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "", n.specularColorMap ? "#define USE_SPECULARCOLORMAP" : "", n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", n.metalnessMap ? "#define USE_METALNESSMAP" : "", n.alphaMap ? "#define USE_ALPHAMAP" : "", n.transmission ? "#define USE_TRANSMISSION" : "", n.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", n.thicknessMap ? "#define USE_THICKNESSMAP" : "", n.sheenColorMap ? "#define USE_SHEENCOLORMAP" : "", n.sheenRoughnessMap ? "#define USE_SHEENROUGHNESSMAP" : "", n.vertexTangents ? "#define USE_TANGENT" : "", n.vertexColors ? "#define USE_COLOR" : "", n.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", n.vertexUvs ? "#define USE_UV" : "", n.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", n.flatShading ? "#define FLAT_SHADED" : "", n.skinning ? "#define USE_SKINNING" : "", n.morphTargets ? "#define USE_MORPHTARGETS" : "", n.morphNormals && !1 === n.flatShading ? "#define USE_MORPHNORMALS" : "", n.morphColors && n.isWebGL2 ? "#define USE_MORPHCOLORS" : "", n.morphTargetsCount > 0 && n.isWebGL2 ? "#define MORPHTARGETS_TEXTURE" : "", n.morphTargetsCount > 0 && n.isWebGL2 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + n.morphTextureStride : "", n.morphTargetsCount > 0 && n.isWebGL2 ? "#define MORPHTARGETS_COUNT " + n.morphTargetsCount : "", n.doubleSided ? "#define DOUBLE_SIDED" : "", n.flipSided ? "#define FLIP_SIDED" : "", n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", n.shadowMapEnabled ? "#define " + l : "", n.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "", n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", n.logarithmicDepthBuffer && n.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 modelMatrix;", "uniform mat4 modelViewMatrix;", "uniform mat4 projectionMatrix;", "uniform mat4 viewMatrix;", "uniform mat3 normalMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", "#ifdef USE_INSTANCING", "\tattribute mat4 instanceMatrix;", "#endif", "#ifdef USE_INSTANCING_COLOR", "\tattribute vec3 instanceColor;", "#endif", "attribute vec3 position;", "attribute vec3 normal;", "attribute vec2 uv;", "#ifdef USE_TANGENT", "\tattribute vec4 tangent;", "#endif", "#if defined( USE_COLOR_ALPHA )", "\tattribute vec4 color;", "#elif defined( USE_COLOR )", "\tattribute vec3 color;", "#endif", "#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )", "\tattribute vec3 morphTarget0;", "\tattribute vec3 morphTarget1;", "\tattribute vec3 morphTarget2;", "\tattribute vec3 morphTarget3;", "\t#ifdef USE_MORPHNORMALS", "\t\tattribute vec3 morphNormal0;", "\t\tattribute vec3 morphNormal1;", "\t\tattribute vec3 morphNormal2;", "\t\tattribute vec3 morphNormal3;", "\t#else", "\t\tattribute vec3 morphTarget4;", "\t\tattribute vec3 morphTarget5;", "\t\tattribute vec3 morphTarget6;", "\t\tattribute vec3 morphTarget7;", "\t#endif", "#endif", "#ifdef USE_SKINNING", "\tattribute vec4 skinIndex;", "\tattribute vec4 skinWeight;", "#endif", "\n"].filter(_o).join("\n"), x = [g, Ao(n), "#define SHADER_NAME " + n.shaderName, v, n.useFog && n.fog ? "#define USE_FOG" : "", n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "", n.map ? "#define USE_MAP" : "", n.matcap ? "#define USE_MATCAP" : "", n.envMap ? "#define USE_ENVMAP" : "", n.envMap ? "#define " + c : "", n.envMap ? "#define " + u : "", n.envMap ? "#define " + f : "", m ? "#define CUBEUV_TEXEL_WIDTH " + m.texelWidth : "", m ? "#define CUBEUV_TEXEL_HEIGHT " + m.texelHeight : "", m ? "#define CUBEUV_MAX_MIP " + m.maxMip + ".0" : "", n.lightMap ? "#define USE_LIGHTMAP" : "", n.aoMap ? "#define USE_AOMAP" : "", n.emissiveMap ? "#define USE_EMISSIVEMAP" : "", n.bumpMap ? "#define USE_BUMPMAP" : "", n.normalMap ? "#define USE_NORMALMAP" : "", n.normalMap && n.objectSpaceNormalMap ? "#define OBJECTSPACE_NORMALMAP" : "", n.normalMap && n.tangentSpaceNormalMap ? "#define TANGENTSPACE_NORMALMAP" : "", n.clearcoat ? "#define USE_CLEARCOAT" : "", n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "", n.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "", n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "", n.iridescence ? "#define USE_IRIDESCENCE" : "", n.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "", n.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "", n.specularMap ? "#define USE_SPECULARMAP" : "", n.specularIntensityMap ? "#define USE_SPECULARINTENSITYMAP" : "", n.specularColorMap ? "#define USE_SPECULARCOLORMAP" : "", n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "", n.metalnessMap ? "#define USE_METALNESSMAP" : "", n.alphaMap ? "#define USE_ALPHAMAP" : "", n.alphaTest ? "#define USE_ALPHATEST" : "", n.sheen ? "#define USE_SHEEN" : "", n.sheenColorMap ? "#define USE_SHEENCOLORMAP" : "", n.sheenRoughnessMap ? "#define USE_SHEENROUGHNESSMAP" : "", n.transmission ? "#define USE_TRANSMISSION" : "", n.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "", n.thicknessMap ? "#define USE_THICKNESSMAP" : "", n.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "", n.vertexTangents ? "#define USE_TANGENT" : "", n.vertexColors || n.instancingColor ? "#define USE_COLOR" : "", n.vertexAlphas ? "#define USE_COLOR_ALPHA" : "", n.vertexUvs ? "#define USE_UV" : "", n.uvsVertexOnly ? "#define UVS_VERTEX_ONLY" : "", n.gradientMap ? "#define USE_GRADIENTMAP" : "", n.flatShading ? "#define FLAT_SHADED" : "", n.doubleSided ? "#define DOUBLE_SIDED" : "", n.flipSided ? "#define FLIP_SIDED" : "", n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "", n.shadowMapEnabled ? "#define " + l : "", n.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "", n.useLegacyLights ? "#define LEGACY_LIGHTS" : "", n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "", n.logarithmicDepthBuffer && n.rendererExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "", "uniform mat4 viewMatrix;", "uniform vec3 cameraPosition;", "uniform bool isOrthographic;", n.toneMapping !== Z ? "#define TONE_MAPPING" : "", n.toneMapping !== Z ? Ar.tonemapping_pars_fragment : "", n.toneMapping !== Z ? vo("toneMapping", n.toneMapping) : "", n.dithering ? "#define DITHERING" : "", n.opaque ? "#define OPAQUE" : "", Ar.encodings_pars_fragment, go("linearToOutputTexel", n.outputEncoding), n.useDepthPacking ? "#define DEPTH_PACKING " + n.depthPacking : "", "\n"].filter(_o).join("\n")), o = wo(o), o = yo(o, n), o = xo(o, n), s = wo(s), s = yo(s, n), s = xo(s, n), o = Eo(o), s = Eo(s), n.isWebGL2 && !0 !== n.isRawShaderMaterial && (b = "#version 300 es\n", y = ["precision mediump sampler2DArray;", "#define attribute in", "#define varying out", "#define texture2D texture"].join("\n") + "\n" + y, x = ["#define varying in", n.glslVersion === Me ? "" : "layout(location = 0) out highp vec4 pc_fragColor;", n.glslVersion === Me ? "" : "#define gl_FragColor pc_fragColor", "#define gl_FragDepthEXT gl_FragDepth", "#define texture2D texture", "#define textureCube texture", "#define texture2DProj textureProj", "#define texture2DLodEXT textureLod", "#define texture2DProjLodEXT textureProjLod", "#define textureCubeLodEXT textureLod", "#define texture2DGradEXT textureGrad", "#define texture2DProjGradEXT textureProjGrad", "#define textureCubeGradEXT textureGrad"].join("\n") + "\n" + x); const w = b + x + s, M = po(r, 35633, b + y + o), S = po(r, 35632, w); if (r.attachShader(_, M), r.attachShader(_, S), void 0 !== n.index0AttributeName ? r.bindAttribLocation(_, 0, n.index0AttributeName) : !0 === n.morphTargets && r.bindAttribLocation(_, 0, "position"), r.linkProgram(_), t.debug.checkShaderErrors) { const t = r.getProgramInfoLog(_).trim(), e = r.getShaderInfoLog(M).trim(), n = r.getShaderInfoLog(S).trim(); let i = !0, a = !0; if (!1 === r.getProgramParameter(_, 35714)) { i = !1; const e = mo(r, M, "vertex"), n = mo(r, S, "fragment"); console.error("THREE.WebGLProgram: Shader Error " + r.getError() + " - VALIDATE_STATUS " + r.getProgramParameter(_, 35715) + "\n\nProgram Info Log: " + t + "\n" + e + "\n" + n) } else "" !== t ? console.warn("THREE.WebGLProgram: Program Info Log:", t) : "" !== e && "" !== n || (a = !1); a && (this.diagnostics = { runnable: i, programLog: t, vertexShader: { log: e, prefix: y }, fragmentShader: { log: n, prefix: x } }) } let E, T; return r.deleteShader(M), r.deleteShader(S), this.getUniforms = function () { return void 0 === E && (E = new ho(r, _)), E }, this.getAttributes = function () { return void 0 === T && (T = function (t, e) { const n = {}, i = t.getProgramParameter(e, 35721); for (let r = 0; r < i; r++) { const i = t.getActiveAttrib(e, r), a = i.name; let o = 1; 35674 === i.type && (o = 2), 35675 === i.type && (o = 3), 35676 === i.type && (o = 4), n[a] = { type: i.type, location: t.getAttribLocation(e, a), locationSize: o } } return n }(r, _)), T }, this.destroy = function () { i.releaseStatesOfProgram(this), r.deleteProgram(_), this.program = void 0 }, this.name = n.shaderName, this.id = fo++, this.cacheKey = e, this.usedTimes = 1, this.program = _, this.vertexShader = M, this.fragmentShader = S, this } let Lo = 0; class Po { constructor() { this.shaderCache = new Map, this.materialCache = new Map } update(t) { const e = t.vertexShader, n = t.fragmentShader, i = this._getShaderStage(e), r = this._getShaderStage(n), a = this._getShaderCacheForMaterial(t); return !1 === a.has(i) && (a.add(i), i.usedTimes++), !1 === a.has(r) && (a.add(r), r.usedTimes++), this } remove(t) { const e = this.materialCache.get(t); for (const t of e) t.usedTimes--, 0 === t.usedTimes && this.shaderCache.delete(t.code); return this.materialCache.delete(t), this } getVertexShaderID(t) { return this._getShaderStage(t.vertexShader).id } getFragmentShaderID(t) { return this._getShaderStage(t.fragmentShader).id } dispose() { this.shaderCache.clear(), this.materialCache.clear() } _getShaderCacheForMaterial(t) { const e = this.materialCache; let n = e.get(t); return void 0 === n && (n = new Set, e.set(t, n)), n } _getShaderStage(t) { const e = this.shaderCache; let n = e.get(t); return void 0 === n && (n = new Ro(t), e.set(t, n)), n } } class Ro { constructor(t) { this.id = Lo++, this.code = t, this.usedTimes = 0 } } function Do(t, e, n, i, r, a, o) { const s = new Yn, l = new Po, c = [], u = r.isWebGL2, h = r.logarithmicDepthBuffer, d = r.vertexTextures; let p = r.precision; const f = { MeshDepthMaterial: "depth", MeshDistanceMaterial: "distanceRGBA", MeshNormalMaterial: "normal", MeshBasicMaterial: "basic", MeshLambertMaterial: "lambert", MeshPhongMaterial: "phong", MeshToonMaterial: "toon", MeshStandardMaterial: "physical", MeshPhysicalMaterial: "physical", MeshMatcapMaterial: "matcap", LineBasicMaterial: "basic", LineDashedMaterial: "dashed", PointsMaterial: "points", ShadowMaterial: "shadow", SpriteMaterial: "sprite" }; return { getParameters: function (a, s, c, v, y) { const x = v.fog, b = y.geometry, w = a.isMeshStandardMaterial ? v.environment : null, M = (a.isMeshStandardMaterial ? n : e).get(a.envMap || w), S = M && M.mapping === ot ? M.image.height : null, E = f[a.type]; null !== a.precision && (p = r.getMaxPrecision(a.precision), p !== a.precision && console.warn("THREE.WebGLProgram.getParameters:", a.precision, "not supported, using", p, "instead.")); const T = b.morphAttributes.position || b.morphAttributes.normal || b.morphAttributes.color, A = void 0 !== T ? T.length : 0; let C, L, P, R, D = 0; if (void 0 !== b.morphAttributes.position && (D = 1), void 0 !== b.morphAttributes.normal && (D = 2), void 0 !== b.morphAttributes.color && (D = 3), E) { const t = Lr[E]; C = t.vertexShader, L = t.fragmentShader } else C = a.vertexShader, L = a.fragmentShader, l.update(a), P = l.getVertexShaderID(a), R = l.getFragmentShaderID(a); const O = t.getRenderTarget(), I = a.alphaTest > 0, N = a.clearcoat > 0, k = a.iridescence > 0; return { isWebGL2: u, shaderID: E, shaderName: a.type, vertexShader: C, fragmentShader: L, defines: a.defines, customVertexShaderID: P, customFragmentShaderID: R, isRawShaderMaterial: !0 === a.isRawShaderMaterial, glslVersion: a.glslVersion, precision: p, instancing: !0 === y.isInstancedMesh, instancingColor: !0 === y.isInstancedMesh && null !== y.instanceColor, supportsVertexTextures: d, outputEncoding: null === O ? t.outputEncoding : !0 === O.isXRRenderTarget ? O.texture.encoding : fe, map: !!a.map, matcap: !!a.matcap, envMap: !!M, envMapMode: M && M.mapping, envMapCubeUVHeight: S, lightMap: !!a.lightMap, aoMap: !!a.aoMap, emissiveMap: !!a.emissiveMap, bumpMap: !!a.bumpMap, normalMap: !!a.normalMap, objectSpaceNormalMap: a.normalMapType === _e, tangentSpaceNormalMap: a.normalMapType === ve, decodeVideoTexture: !!a.map && !0 === a.map.isVideoTexture && a.map.encoding === me, clearcoat: N, clearcoatMap: N && !!a.clearcoatMap, clearcoatRoughnessMap: N && !!a.clearcoatRoughnessMap, clearcoatNormalMap: N && !!a.clearcoatNormalMap, iridescence: k, iridescenceMap: k && !!a.iridescenceMap, iridescenceThicknessMap: k && !!a.iridescenceThicknessMap, displacementMap: !!a.displacementMap, roughnessMap: !!a.roughnessMap, metalnessMap: !!a.metalnessMap, specularMap: !!a.specularMap, specularIntensityMap: !!a.specularIntensityMap, specularColorMap: !!a.specularColorMap, opaque: !1 === a.transparent && a.blending === _, alphaMap: !!a.alphaMap, alphaTest: I, gradientMap: !!a.gradientMap, sheen: a.sheen > 0, sheenColorMap: !!a.sheenColorMap, sheenRoughnessMap: !!a.sheenRoughnessMap, transmission: a.transmission > 0, transmissionMap: !!a.transmissionMap, thicknessMap: !!a.thicknessMap, combine: a.combine, vertexTangents: !!a.normalMap && !!b.attributes.tangent, vertexColors: a.vertexColors, vertexAlphas: !0 === a.vertexColors && !!b.attributes.color && 4 === b.attributes.color.itemSize, vertexUvs: !!(a.map || a.bumpMap || a.normalMap || a.specularMap || a.alphaMap || a.emissiveMap || a.roughnessMap || a.metalnessMap || a.clearcoatMap || a.clearcoatRoughnessMap || a.clearcoatNormalMap || a.iridescenceMap || a.iridescenceThicknessMap || a.displacementMap || a.transmissionMap || a.thicknessMap || a.specularIntensityMap || a.specularColorMap || a.sheenColorMap || a.sheenRoughnessMap), uvsVertexOnly: !(a.map || a.bumpMap || a.normalMap || a.specularMap || a.alphaMap || a.emissiveMap || a.roughnessMap || a.metalnessMap || a.clearcoatNormalMap || a.iridescenceMap || a.iridescenceThicknessMap || a.transmission > 0 || a.transmissionMap || a.thicknessMap || a.specularIntensityMap || a.specularColorMap || a.sheen > 0 || a.sheenColorMap || a.sheenRoughnessMap || !a.displacementMap), fog: !!x, useFog: !0 === a.fog, fogExp2: x && x.isFogExp2, flatShading: !!a.flatShading, sizeAttenuation: a.sizeAttenuation, logarithmicDepthBuffer: h, skinning: !0 === y.isSkinnedMesh, morphTargets: void 0 !== b.morphAttributes.position, morphNormals: void 0 !== b.morphAttributes.normal, morphColors: void 0 !== b.morphAttributes.color, morphTargetsCount: A, morphTextureStride: D, numDirLights: s.directional.length, numPointLights: s.point.length, numSpotLights: s.spot.length, numSpotLightMaps: s.spotLightMap.length, numRectAreaLights: s.rectArea.length, numHemiLights: s.hemi.length, numDirLightShadows: s.directionalShadowMap.length, numPointLightShadows: s.pointShadowMap.length, numSpotLightShadows: s.spotShadowMap.length, numSpotLightShadowsWithMaps: s.numSpotLightShadowsWithMaps, numClippingPlanes: o.numPlanes, numClipIntersection: o.numIntersection, dithering: a.dithering, shadowMapEnabled: t.shadowMap.enabled && c.length > 0, shadowMapType: t.shadowMap.type, toneMapping: a.toneMapped ? t.toneMapping : Z, useLegacyLights: t.useLegacyLights, premultipliedAlpha: a.premultipliedAlpha, doubleSided: a.side === g, flipSided: a.side === m, useDepthPacking: !!a.depthPacking, depthPacking: a.depthPacking || 0, index0AttributeName: a.index0AttributeName, extensionDerivatives: a.extensions && a.extensions.derivatives, extensionFragDepth: a.extensions && a.extensions.fragDepth, extensionDrawBuffers: a.extensions && a.extensions.drawBuffers, extensionShaderTextureLOD: a.extensions && a.extensions.shaderTextureLOD, rendererExtensionFragDepth: u || i.has("EXT_frag_depth"), rendererExtensionDrawBuffers: u || i.has("WEBGL_draw_buffers"), rendererExtensionShaderTextureLod: u || i.has("EXT_shader_texture_lod"), customProgramCacheKey: a.customProgramCacheKey() } }, getProgramCacheKey: function (e) { const n = []; if (e.shaderID ? n.push(e.shaderID) : (n.push(e.customVertexShaderID), n.push(e.customFragmentShaderID)), void 0 !== e.defines) for (const t in e.defines) n.push(t), n.push(e.defines[t]); return !1 === e.isRawShaderMaterial && (!function (t, e) { t.push(e.precision), t.push(e.outputEncoding), t.push(e.envMapMode), t.push(e.envMapCubeUVHeight), t.push(e.combine), t.push(e.vertexUvs), t.push(e.fogExp2), t.push(e.sizeAttenuation), t.push(e.morphTargetsCount), t.push(e.morphAttributeCount), t.push(e.numDirLights), t.push(e.numPointLights), t.push(e.numSpotLights), t.push(e.numSpotLightMaps), t.push(e.numHemiLights), t.push(e.numRectAreaLights), t.push(e.numDirLightShadows), t.push(e.numPointLightShadows), t.push(e.numSpotLightShadows), t.push(e.numSpotLightShadowsWithMaps), t.push(e.shadowMapType), t.push(e.toneMapping), t.push(e.numClippingPlanes), t.push(e.numClipIntersection), t.push(e.depthPacking) }(n, e), function (t, e) { s.disableAll(), e.isWebGL2 && s.enable(0); e.supportsVertexTextures && s.enable(1); e.instancing && s.enable(2); e.instancingColor && s.enable(3); e.map && s.enable(4); e.matcap && s.enable(5); e.envMap && s.enable(6); e.lightMap && s.enable(7); e.aoMap && s.enable(8); e.emissiveMap && s.enable(9); e.bumpMap && s.enable(10); e.normalMap && s.enable(11); e.objectSpaceNormalMap && s.enable(12); e.tangentSpaceNormalMap && s.enable(13); e.clearcoat && s.enable(14); e.clearcoatMap && s.enable(15); e.clearcoatRoughnessMap && s.enable(16); e.clearcoatNormalMap && s.enable(17); e.iridescence && s.enable(18); e.iridescenceMap && s.enable(19); e.iridescenceThicknessMap && s.enable(20); e.displacementMap && s.enable(21); e.specularMap && s.enable(22); e.roughnessMap && s.enable(23); e.metalnessMap && s.enable(24); e.gradientMap && s.enable(25); e.alphaMap && s.enable(26); e.alphaTest && s.enable(27); e.vertexColors && s.enable(28); e.vertexAlphas && s.enable(29); e.vertexUvs && s.enable(30); e.vertexTangents && s.enable(31); e.uvsVertexOnly && s.enable(32); t.push(s.mask), s.disableAll(), e.fog && s.enable(0); e.useFog && s.enable(1); e.flatShading && s.enable(2); e.logarithmicDepthBuffer && s.enable(3); e.skinning && s.enable(4); e.morphTargets && s.enable(5); e.morphNormals && s.enable(6); e.morphColors && s.enable(7); e.premultipliedAlpha && s.enable(8); e.shadowMapEnabled && s.enable(9); e.useLegacyLights && s.enable(10); e.doubleSided && s.enable(11); e.flipSided && s.enable(12); e.useDepthPacking && s.enable(13); e.dithering && s.enable(14); e.specularIntensityMap && s.enable(15); e.specularColorMap && s.enable(16); e.transmission && s.enable(17); e.transmissionMap && s.enable(18); e.thicknessMap && s.enable(19); e.sheen && s.enable(20); e.sheenColorMap && s.enable(21); e.sheenRoughnessMap && s.enable(22); e.decodeVideoTexture && s.enable(23); e.opaque && s.enable(24); t.push(s.mask) }(n, e), n.push(t.outputEncoding)), n.push(e.customProgramCacheKey), n.join() }, getUniforms: function (t) { const e = f[t.type]; let n; if (e) { const t = Lr[e]; n = cr.clone(t.uniforms) } else n = t.uniforms; return n }, acquireProgram: function (e, n) { let i; for (let t = 0, e = c.length; t < e; t++) { const e = c[t]; if (e.cacheKey === n) { i = e, ++i.usedTimes; break } } return void 0 === i && (i = new Co(t, n, e, a), c.push(i)), i }, releaseProgram: function (t) { if (0 == --t.usedTimes) { const e = c.indexOf(t); c[e] = c[c.length - 1], c.pop(), t.destroy() } }, releaseShaderCache: function (t) { l.remove(t) }, programs: c, dispose: function () { l.dispose() } } } function Oo() { let t = new WeakMap; return { get: function (e) { let n = t.get(e); return void 0 === n && (n = {}, t.set(e, n)), n }, remove: function (e) { t.delete(e) }, update: function (e, n, i) { t.get(e)[n] = i }, dispose: function () { t = new WeakMap } } } function Io(t, e) { return t.groupOrder !== e.groupOrder ? t.groupOrder - e.groupOrder : t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.material.id !== e.material.id ? t.material.id - e.material.id : t.z !== e.z ? t.z - e.z : t.id - e.id } function No(t, e) { return t.groupOrder !== e.groupOrder ? t.groupOrder - e.groupOrder : t.renderOrder !== e.renderOrder ? t.renderOrder - e.renderOrder : t.z !== e.z ? e.z - t.z : t.id - e.id } function ko() { const t = []; let e = 0; const n = [], i = [], r = []; function a(n, i, r, a, o, s) { let l = t[e]; return void 0 === l ? (l = { id: n.id, object: n, geometry: i, material: r, groupOrder: a, renderOrder: n.renderOrder, z: o, group: s }, t[e] = l) : (l.id = n.id, l.object = n, l.geometry = i, l.material = r, l.groupOrder = a, l.renderOrder = n.renderOrder, l.z = o, l.group = s), e++, l } return { opaque: n, transmissive: i, transparent: r, init: function () { e = 0, n.length = 0, i.length = 0, r.length = 0 }, push: function (t, e, o, s, l, c) { const u = a(t, e, o, s, l, c); o.transmission > 0 ? i.push(u) : !0 === o.transparent ? r.push(u) : n.push(u) }, unshift: function (t, e, o, s, l, c) { const u = a(t, e, o, s, l, c); o.transmission > 0 ? i.unshift(u) : !0 === o.transparent ? r.unshift(u) : n.unshift(u) }, finish: function () { for (let n = e, i = t.length; n < i; n++) { const e = t[n]; if (null === e.id) break; e.id = null, e.object = null, e.geometry = null, e.material = null, e.group = null } }, sort: function (t, e) { n.length > 1 && n.sort(t || Io), i.length > 1 && i.sort(e || No), r.length > 1 && r.sort(e || No) } } } function zo() { let t = new WeakMap; return { get: function (e, n) { const i = t.get(e); let r; return void 0 === i ? (r = new ko, t.set(e, [r])) : n >= i.length ? (r = new ko, i.push(r)) : r = i[n], r }, dispose: function () { t = new WeakMap } } } function Uo() { const t = {}; return { get: function (e) { if (void 0 !== t[e.id]) return t[e.id]; let n; switch (e.type) { case "DirectionalLight": n = { direction: new Ge, color: new Ti }; break; case "SpotLight": n = { position: new Ge, direction: new Ge, color: new Ti, distance: 0, coneCos: 0, penumbraCos: 0, decay: 0 }; break; case "PointLight": n = { position: new Ge, color: new Ti, distance: 0, decay: 0 }; break; case "HemisphereLight": n = { direction: new Ge, skyColor: new Ti, groundColor: new Ti }; break; case "RectAreaLight": n = { color: new Ti, position: new Ge, halfWidth: new Ge, halfHeight: new Ge } }return t[e.id] = n, n } } } let Fo = 0; function Bo(t, e) { return (e.castShadow ? 2 : 0) - (t.castShadow ? 2 : 0) + (e.map ? 1 : 0) - (t.map ? 1 : 0) } function jo(t, e) { const n = new Uo, i = function () { const t = {}; return { get: function (e) { if (void 0 !== t[e.id]) return t[e.id]; let n; switch (e.type) { case "DirectionalLight": case "SpotLight": n = { shadowBias: 0, shadowNormalBias: 0, shadowRadius: 1, shadowMapSize: new ke }; break; case "PointLight": n = { shadowBias: 0, shadowNormalBias: 0, shadowRadius: 1, shadowMapSize: new ke, shadowCameraNear: 1, shadowCameraFar: 1e3 } }return t[e.id] = n, n } } }(), r = { version: 0, hash: { directionalLength: -1, pointLength: -1, spotLength: -1, rectAreaLength: -1, hemiLength: -1, numDirectionalShadows: -1, numPointShadows: -1, numSpotShadows: -1, numSpotMaps: -1 }, ambient: [0, 0, 0], probe: [], directional: [], directionalShadow: [], directionalShadowMap: [], directionalShadowMatrix: [], spot: [], spotLightMap: [], spotShadow: [], spotShadowMap: [], spotLightMatrix: [], rectArea: [], rectAreaLTC1: null, rectAreaLTC2: null, point: [], pointShadow: [], pointShadowMap: [], pointShadowMatrix: [], hemi: [], numSpotLightShadowsWithMaps: 0 }; for (let t = 0; t < 9; t++)r.probe.push(new Ge); const a = new Ge, o = new zn, s = new zn; return { setup: function (a, o) { let s = 0, l = 0, c = 0; for (let t = 0; t < 9; t++)r.probe[t].set(0, 0, 0); let u = 0, h = 0, d = 0, p = 0, f = 0, m = 0, g = 0, v = 0, _ = 0, y = 0; a.sort(Bo); const x = !0 === o ? Math.PI : 1; for (let t = 0, e = a.length; t < e; t++) { const e = a[t], o = e.color, b = e.intensity, w = e.distance, M = e.shadow && e.shadow.map ? e.shadow.map.texture : null; if (e.isAmbientLight) s += o.r * b * x, l += o.g * b * x, c += o.b * b * x; else if (e.isLightProbe) for (let t = 0; t < 9; t++)r.probe[t].addScaledVector(e.sh.coefficients[t], b); else if (e.isDirectionalLight) { const t = n.get(e); if (t.color.copy(e.color).multiplyScalar(e.intensity * x), e.castShadow) { const t = e.shadow, n = i.get(e); n.shadowBias = t.bias, n.shadowNormalBias = t.normalBias, n.shadowRadius = t.radius, n.shadowMapSize = t.mapSize, r.directionalShadow[u] = n, r.directionalShadowMap[u] = M, r.directionalShadowMatrix[u] = e.shadow.matrix, m++ } r.directional[u] = t, u++ } else if (e.isSpotLight) { const t = n.get(e); t.position.setFromMatrixPosition(e.matrixWorld), t.color.copy(o).multiplyScalar(b * x), t.distance = w, t.coneCos = Math.cos(e.angle), t.penumbraCos = Math.cos(e.angle * (1 - e.penumbra)), t.decay = e.decay, r.spot[d] = t; const a = e.shadow; if (e.map && (r.spotLightMap[_] = e.map, _++, a.updateMatrices(e), e.castShadow && y++), r.spotLightMatrix[d] = a.matrix, e.castShadow) { const t = i.get(e); t.shadowBias = a.bias, t.shadowNormalBias = a.normalBias, t.shadowRadius = a.radius, t.shadowMapSize = a.mapSize, r.spotShadow[d] = t, r.spotShadowMap[d] = M, v++ } d++ } else if (e.isRectAreaLight) { const t = n.get(e); t.color.copy(o).multiplyScalar(b), t.halfWidth.set(.5 * e.width, 0, 0), t.halfHeight.set(0, .5 * e.height, 0), r.rectArea[p] = t, p++ } else if (e.isPointLight) { const t = n.get(e); if (t.color.copy(e.color).multiplyScalar(e.intensity * x), t.distance = e.distance, t.decay = e.decay, e.castShadow) { const t = e.shadow, n = i.get(e); n.shadowBias = t.bias, n.shadowNormalBias = t.normalBias, n.shadowRadius = t.radius, n.shadowMapSize = t.mapSize, n.shadowCameraNear = t.camera.near, n.shadowCameraFar = t.camera.far, r.pointShadow[h] = n, r.pointShadowMap[h] = M, r.pointShadowMatrix[h] = e.shadow.matrix, g++ } r.point[h] = t, h++ } else if (e.isHemisphereLight) { const t = n.get(e); t.skyColor.copy(e.color).multiplyScalar(b * x), t.groundColor.copy(e.groundColor).multiplyScalar(b * x), r.hemi[f] = t, f++ } } p > 0 && (e.isWebGL2 || !0 === t.has("OES_texture_float_linear") ? (r.rectAreaLTC1 = Cr.LTC_FLOAT_1, r.rectAreaLTC2 = Cr.LTC_FLOAT_2) : !0 === t.has("OES_texture_half_float_linear") ? (r.rectAreaLTC1 = Cr.LTC_HALF_1, r.rectAreaLTC2 = Cr.LTC_HALF_2) : console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")), r.ambient[0] = s, r.ambient[1] = l, r.ambient[2] = c; const b = r.hash; b.directionalLength === u && b.pointLength === h && b.spotLength === d && b.rectAreaLength === p && b.hemiLength === f && b.numDirectionalShadows === m && b.numPointShadows === g && b.numSpotShadows === v && b.numSpotMaps === _ || (r.directional.length = u, r.spot.length = d, r.rectArea.length = p, r.point.length = h, r.hemi.length = f, r.directionalShadow.length = m, r.directionalShadowMap.length = m, r.pointShadow.length = g, r.pointShadowMap.length = g, r.spotShadow.length = v, r.spotShadowMap.length = v, r.directionalShadowMatrix.length = m, r.pointShadowMatrix.length = g, r.spotLightMatrix.length = v + _ - y, r.spotLightMap.length = _, r.numSpotLightShadowsWithMaps = y, b.directionalLength = u, b.pointLength = h, b.spotLength = d, b.rectAreaLength = p, b.hemiLength = f, b.numDirectionalShadows = m, b.numPointShadows = g, b.numSpotShadows = v, b.numSpotMaps = _, r.version = Fo++) }, setupView: function (t, e) { let n = 0, i = 0, l = 0, c = 0, u = 0; const h = e.matrixWorldInverse; for (let e = 0, d = t.length; e < d; e++) { const d = t[e]; if (d.isDirectionalLight) { const t = r.directional[n]; t.direction.setFromMatrixPosition(d.matrixWorld), a.setFromMatrixPosition(d.target.matrixWorld), t.direction.sub(a), t.direction.transformDirection(h), n++ } else if (d.isSpotLight) { const t = r.spot[l]; t.position.setFromMatrixPosition(d.matrixWorld), t.position.applyMatrix4(h), t.direction.setFromMatrixPosition(d.matrixWorld), a.setFromMatrixPosition(d.target.matrixWorld), t.direction.sub(a), t.direction.transformDirection(h), l++ } else if (d.isRectAreaLight) { const t = r.rectArea[c]; t.position.setFromMatrixPosition(d.matrixWorld), t.position.applyMatrix4(h), s.identity(), o.copy(d.matrixWorld), o.premultiply(h), s.extractRotation(o), t.halfWidth.set(.5 * d.width, 0, 0), t.halfHeight.set(0, .5 * d.height, 0), t.halfWidth.applyMatrix4(s), t.halfHeight.applyMatrix4(s), c++ } else if (d.isPointLight) { const t = r.point[i]; t.position.setFromMatrixPosition(d.matrixWorld), t.position.applyMatrix4(h), i++ } else if (d.isHemisphereLight) { const t = r.hemi[u]; t.direction.setFromMatrixPosition(d.matrixWorld), t.direction.transformDirection(h), u++ } } }, state: r } } function Go(t, e) { const n = new jo(t, e), i = [], r = []; return { init: function () { i.length = 0, r.length = 0 }, state: { lightsArray: i, shadowsArray: r, lights: n }, setupLights: function (t) { n.setup(i, t) }, setupLightsView: function (t) { n.setupView(i, t) }, pushLight: function (t) { i.push(t) }, pushShadow: function (t) { r.push(t) } } } function Ho(t, e) { let n = new WeakMap; return { get: function (i, r = 0) { const a = n.get(i); let o; return void 0 === a ? (o = new Go(t, e), n.set(i, [o])) : r >= a.length ? (o = new Go(t, e), a.push(o)) : o = a[r], o }, dispose: function () { n = new WeakMap } } } class Vo extends bi { constructor(t) { super(), this.isMeshDepthMaterial = !0, this.type = "MeshDepthMaterial", this.depthPacking = 3200, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.setValues(t) } copy(t) { return super.copy(t), this.depthPacking = t.depthPacking, this.map = t.map, this.alphaMap = t.alphaMap, this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this } } class Wo extends bi { constructor(t) { super(), this.isMeshDistanceMaterial = !0, this.type = "MeshDistanceMaterial", this.referencePosition = new Ge, this.nearDistance = 1, this.farDistance = 1e3, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.setValues(t) } copy(t) { return super.copy(t), this.referencePosition.copy(t.referencePosition), this.nearDistance = t.nearDistance, this.farDistance = t.farDistance, this.map = t.map, this.alphaMap = t.alphaMap, this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this } } const qo = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}", Xo = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"; function Yo(t, e, n) { let i = new Mr; const r = new ke, a = new ke, o = new on, s = new Vo({ depthPacking: ge }), l = new Wo, c = {}, u = n.maxTextureSize, d = { [f]: m, [m]: f, [g]: g }, _ = new ur({ defines: { VSM_SAMPLES: 8 }, uniforms: { shadow_pass: { value: null }, resolution: { value: new ke }, radius: { value: 4 } }, vertexShader: qo, fragmentShader: Xo }), y = _.clone(); y.defines.HORIZONTAL_PASS = 1; const x = new Gi; x.setAttribute("position", new Ri(new Float32Array([-1, -1, .5, 3, -1, .5, -1, 3, .5]), 3)); const b = new ir(x, _), w = this; function M(n, i) { const a = e.update(b); _.defines.VSM_SAMPLES !== n.blurSamples && (_.defines.VSM_SAMPLES = n.blurSamples, y.defines.VSM_SAMPLES = n.blurSamples, _.needsUpdate = !0, y.needsUpdate = !0), null === n.mapPass && (n.mapPass = new sn(r.x, r.y)), _.uniforms.shadow_pass.value = n.map.texture, _.uniforms.resolution.value = n.mapSize, _.uniforms.radius.value = n.radius, t.setRenderTarget(n.mapPass), t.clear(), t.renderBufferDirect(i, null, a, _, b, null), y.uniforms.shadow_pass.value = n.mapPass.texture, y.uniforms.resolution.value = n.mapSize, y.uniforms.radius.value = n.radius, t.setRenderTarget(n.map), t.clear(), t.renderBufferDirect(i, null, a, y, b, null) } function S(e, n, i, r, a, o) { let u = null; const h = !0 === i.isPointLight ? e.customDistanceMaterial : e.customDepthMaterial; if (void 0 !== h) u = h; else if (u = !0 === i.isPointLight ? l : s, t.localClippingEnabled && !0 === n.clipShadows && Array.isArray(n.clippingPlanes) && 0 !== n.clippingPlanes.length || n.displacementMap && 0 !== n.displacementScale || n.alphaMap && n.alphaTest > 0 || n.map && n.alphaTest > 0) { const t = u.uuid, e = n.uuid; let i = c[t]; void 0 === i && (i = {}, c[t] = i); let r = i[e]; void 0 === r && (r = u.clone(), i[e] = r), u = r } return u.visible = n.visible, u.wireframe = n.wireframe, u.side = o === p ? null !== n.shadowSide ? n.shadowSide : n.side : null !== n.shadowSide ? n.shadowSide : d[n.side], u.alphaMap = n.alphaMap, u.alphaTest = n.alphaTest, u.map = n.map, u.clipShadows = n.clipShadows, u.clippingPlanes = n.clippingPlanes, u.clipIntersection = n.clipIntersection, u.displacementMap = n.displacementMap, u.displacementScale = n.displacementScale, u.displacementBias = n.displacementBias, u.wireframeLinewidth = n.wireframeLinewidth, u.linewidth = n.linewidth, !0 === i.isPointLight && !0 === u.isMeshDistanceMaterial && (u.referencePosition.setFromMatrixPosition(i.matrixWorld), u.nearDistance = r, u.farDistance = a), u } function E(n, r, a, o, s) { if (!1 === n.visible) return; if (n.layers.test(r.layers) && (n.isMesh || n.isLine || n.isPoints) && (n.castShadow || n.receiveShadow && s === p) && (!n.frustumCulled || i.intersectsObject(n))) { n.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse, n.matrixWorld); const i = e.update(n), r = n.material; if (Array.isArray(r)) { const e = i.groups; for (let l = 0, c = e.length; l < c; l++) { const c = e[l], u = r[c.materialIndex]; if (u && u.visible) { const e = S(n, u, o, a.near, a.far, s); t.renderBufferDirect(a, null, i, e, n, c) } } } else if (r.visible) { const e = S(n, r, o, a.near, a.far, s); t.renderBufferDirect(a, null, i, e, n, null) } } const l = n.children; for (let t = 0, e = l.length; t < e; t++)E(l[t], r, a, o, s) } this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = h, this.render = function (e, n, s) { if (!1 === w.enabled) return; if (!1 === w.autoUpdate && !1 === w.needsUpdate) return; if (0 === e.length) return; const l = t.getRenderTarget(), c = t.getActiveCubeFace(), h = t.getActiveMipmapLevel(), d = t.state; d.setBlending(v), d.buffers.color.setClear(1, 1, 1, 1), d.buffers.depth.setTest(!0), d.setScissorTest(!1); for (let l = 0, c = e.length; l < c; l++) { const c = e[l], h = c.shadow; if (void 0 === h) { console.warn("THREE.WebGLShadowMap:", c, "has no shadow."); continue } if (!1 === h.autoUpdate && !1 === h.needsUpdate) continue; r.copy(h.mapSize); const f = h.getFrameExtents(); if (r.multiply(f), a.copy(h.mapSize), (r.x > u || r.y > u) && (r.x > u && (a.x = Math.floor(u / f.x), r.x = a.x * f.x, h.mapSize.x = a.x), r.y > u && (a.y = Math.floor(u / f.y), r.y = a.y * f.y, h.mapSize.y = a.y)), null === h.map) { const t = this.type !== p ? { minFilter: ut, magFilter: ut } : {}; h.map = new sn(r.x, r.y, t), h.map.texture.name = c.name + ".shadowMap", h.camera.updateProjectionMatrix() } t.setRenderTarget(h.map), t.clear(); const m = h.getViewportCount(); for (let t = 0; t < m; t++) { const e = h.getViewport(t); o.set(a.x * e.x, a.y * e.y, a.x * e.z, a.y * e.w), d.viewport(o), h.updateMatrices(c, t), i = h.getFrustum(), E(n, s, h.camera, c, this.type) } !0 !== h.isPointLightShadow && this.type === p && M(h, s), h.needsUpdate = !1 } w.needsUpdate = !1, t.setRenderTarget(l, c, h) } } function $o(t, e, n) { const i = n.isWebGL2; const r = new function () { let e = !1; const n = new on; let i = null; const r = new on(0, 0, 0, 0); return { setMask: function (n) { i === n || e || (t.colorMask(n, n, n, n), i = n) }, setLocked: function (t) { e = t }, setClear: function (e, i, a, o, s) { !0 === s && (e *= o, i *= o, a *= o), n.set(e, i, a, o), !1 === r.equals(n) && (t.clearColor(e, i, a, o), r.copy(n)) }, reset: function () { e = !1, i = null, r.set(-1, 0, 0, 0) } } }, a = new function () { let e = !1, n = null, i = null, r = null; return { setTest: function (t) { t ? bt(2929) : wt(2929) }, setMask: function (i) { n === i || e || (t.depthMask(i), n = i) }, setFunc: function (e) { if (i !== e) { switch (e) { case F: t.depthFunc(512); break; case B: t.depthFunc(519); break; case j: t.depthFunc(513); break; case G: t.depthFunc(515); break; case H: t.depthFunc(514); break; case V: t.depthFunc(518); break; case W: t.depthFunc(516); break; case q: t.depthFunc(517); break; default: t.depthFunc(515) }i = e } }, setLocked: function (t) { e = t }, setClear: function (e) { r !== e && (t.clearDepth(e), r = e) }, reset: function () { e = !1, n = null, i = null, r = null } } }, o = new function () { let e = !1, n = null, i = null, r = null, a = null, o = null, s = null, l = null, c = null; return { setTest: function (t) { e || (t ? bt(2960) : wt(2960)) }, setMask: function (i) { n === i || e || (t.stencilMask(i), n = i) }, setFunc: function (e, n, o) { i === e && r === n && a === o || (t.stencilFunc(e, n, o), i = e, r = n, a = o) }, setOp: function (e, n, i) { o === e && s === n && l === i || (t.stencilOp(e, n, i), o = e, s = n, l = i) }, setLocked: function (t) { e = t }, setClear: function (e) { c !== e && (t.clearStencil(e), c = e) }, reset: function () { e = !1, n = null, i = null, r = null, a = null, o = null, s = null, l = null, c = null } } }, s = new WeakMap, h = new WeakMap; let d = {}, p = {}, f = new WeakMap, X = [], Y = null, $ = !1, Z = null, J = null, K = null, Q = null, tt = null, et = null, nt = null, it = !1, rt = null, at = null, ot = null, st = null, lt = null; const ct = t.getParameter(35661); let ut = !1, ht = 0; const dt = t.getParameter(7938); -1 !== dt.indexOf("WebGL") ? (ht = parseFloat(/^WebGL (\d)/.exec(dt)[1]), ut = ht >= 1) : -1 !== dt.indexOf("OpenGL ES") && (ht = parseFloat(/^OpenGL ES (\d)/.exec(dt)[1]), ut = ht >= 2); let pt = null, ft = {}; const mt = t.getParameter(3088), gt = t.getParameter(2978), vt = (new on).fromArray(mt), _t = (new on).fromArray(gt); function yt(e, n, i) { const r = new Uint8Array(4), a = t.createTexture(); t.bindTexture(e, a), t.texParameteri(e, 10241, 9728), t.texParameteri(e, 10240, 9728); for (let e = 0; e < i; e++)t.texImage2D(n + e, 0, 6408, 1, 1, 0, 6408, 5121, r); return a } const xt = {}; function bt(e) { !0 !== d[e] && (t.enable(e), d[e] = !0) } function wt(e) { !1 !== d[e] && (t.disable(e), d[e] = !1) } xt[3553] = yt(3553, 3553, 1), xt[34067] = yt(34067, 34069, 6), r.setClear(0, 0, 0, 1), a.setClear(1), o.setClear(0), bt(2929), a.setFunc(G), Tt(!1), At(c), bt(2884), Et(v); const Mt = { [M]: 32774, [S]: 32778, [E]: 32779 }; if (i) Mt[T] = 32775, Mt[A] = 32776; else { const t = e.get("EXT_blend_minmax"); null !== t && (Mt[T] = t.MIN_EXT, Mt[A] = t.MAX_EXT) } const St = { [C]: 0, [L]: 1, [P]: 768, [D]: 770, [U]: 776, [k]: 774, [I]: 772, [R]: 769, [O]: 771, [z]: 775, [N]: 773 }; function Et(e, n, i, r, a, o, s, l) { if (e !== v) { if (!1 === $ && (bt(3042), $ = !0), e === w) a = a || n, o = o || i, s = s || r, n === J && a === tt || (t.blendEquationSeparate(Mt[n], Mt[a]), J = n, tt = a), i === K && r === Q && o === et && s === nt || (t.blendFuncSeparate(St[i], St[r], St[o], St[s]), K = i, Q = r, et = o, nt = s), Z = e, it = !1; else if (e !== Z || l !== it) { if (J === M && tt === M || (t.blendEquation(32774), J = M, tt = M), l) switch (e) { case _: t.blendFuncSeparate(1, 771, 1, 771); break; case y: t.blendFunc(1, 1); break; case x: t.blendFuncSeparate(0, 769, 0, 1); break; case b: t.blendFuncSeparate(0, 768, 0, 770); break; default: console.error("THREE.WebGLState: Invalid blending: ", e) } else switch (e) { case _: t.blendFuncSeparate(770, 771, 1, 771); break; case y: t.blendFunc(770, 1); break; case x: t.blendFuncSeparate(0, 769, 0, 1); break; case b: t.blendFunc(0, 768); break; default: console.error("THREE.WebGLState: Invalid blending: ", e) }K = null, Q = null, et = null, nt = null, Z = e, it = l } } else !0 === $ && (wt(3042), $ = !1) } function Tt(e) { rt !== e && (e ? t.frontFace(2304) : t.frontFace(2305), rt = e) } function At(e) { e !== l ? (bt(2884), e !== at && (e === c ? t.cullFace(1029) : e === u ? t.cullFace(1028) : t.cullFace(1032))) : wt(2884), at = e } function Ct(e, n, i) { e ? (bt(32823), st === n && lt === i || (t.polygonOffset(n, i), st = n, lt = i)) : wt(32823) } return { buffers: { color: r, depth: a, stencil: o }, enable: bt, disable: wt, bindFramebuffer: function (e, n) { return p[e] !== n && (t.bindFramebuffer(e, n), p[e] = n, i && (36009 === e && (p[36160] = n), 36160 === e && (p[36009] = n)), !0) }, drawBuffers: function (i, r) { let a = X, o = !1; if (i) if (a = f.get(r), void 0 === a && (a = [], f.set(r, a)), i.isWebGLMultipleRenderTargets) { const t = i.texture; if (a.length !== t.length || 36064 !== a[0]) { for (let e = 0, n = t.length; e < n; e++)a[e] = 36064 + e; a.length = t.length, o = !0 } } else 36064 !== a[0] && (a[0] = 36064, o = !0); else 1029 !== a[0] && (a[0] = 1029, o = !0); o && (n.isWebGL2 ? t.drawBuffers(a) : e.get("WEBGL_draw_buffers").drawBuffersWEBGL(a)) }, useProgram: function (e) { return Y !== e && (t.useProgram(e), Y = e, !0) }, setBlending: Et, setMaterial: function (t, e) { t.side === g ? wt(2884) : bt(2884); let n = t.side === m; e && (n = !n), Tt(n), t.blending === _ && !1 === t.transparent ? Et(v) : Et(t.blending, t.blendEquation, t.blendSrc, t.blendDst, t.blendEquationAlpha, t.blendSrcAlpha, t.blendDstAlpha, t.premultipliedAlpha), a.setFunc(t.depthFunc), a.setTest(t.depthTest), a.setMask(t.depthWrite), r.setMask(t.colorWrite); const i = t.stencilWrite; o.setTest(i), i && (o.setMask(t.stencilWriteMask), o.setFunc(t.stencilFunc, t.stencilRef, t.stencilFuncMask), o.setOp(t.stencilFail, t.stencilZFail, t.stencilZPass)), Ct(t.polygonOffset, t.polygonOffsetFactor, t.polygonOffsetUnits), !0 === t.alphaToCoverage ? bt(32926) : wt(32926) }, setFlipSided: Tt, setCullFace: At, setLineWidth: function (e) { e !== ot && (ut && t.lineWidth(e), ot = e) }, setPolygonOffset: Ct, setScissorTest: function (t) { t ? bt(3089) : wt(3089) }, activeTexture: function (e) { void 0 === e && (e = 33984 + ct - 1), pt !== e && (t.activeTexture(e), pt = e) }, bindTexture: function (e, n, i) { void 0 === i && (i = null === pt ? 33984 + ct - 1 : pt); let r = ft[i]; void 0 === r && (r = { type: void 0, texture: void 0 }, ft[i] = r), r.type === e && r.texture === n || (pt !== i && (t.activeTexture(i), pt = i), t.bindTexture(e, n || xt[e]), r.type = e, r.texture = n) }, unbindTexture: function () { const e = ft[pt]; void 0 !== e && void 0 !== e.type && (t.bindTexture(e.type, null), e.type = void 0, e.texture = void 0) }, compressedTexImage2D: function () { try { t.compressedTexImage2D.apply(t, arguments) } catch (t) { console.error("THREE.WebGLState:", t) } }, compressedTexImage3D: function () { try { t.compressedTexImage3D.apply(t, arguments) } catch (t) { console.error("THREE.WebGLState:", t) } }, texImage2D: function () { try { t.texImage2D.apply(t, arguments) } catch (t) { console.error("THREE.WebGLState:", t) } }, texImage3D: function () { try { t.texImage3D.apply(t, arguments) } catch (t) { console.error("THREE.WebGLState:", t) } }, updateUBOMapping: function (e, n) { let i = h.get(n); void 0 === i && (i = new WeakMap, h.set(n, i)); let r = i.get(e); void 0 === r && (r = t.getUniformBlockIndex(n, e.name), i.set(e, r)) }, uniformBlockBinding: function (e, n) { const i = h.get(n).get(e); s.get(n) !== i && (t.uniformBlockBinding(n, i, e.__bindingPointIndex), s.set(n, i)) }, texStorage2D: function () { try { t.texStorage2D.apply(t, arguments) } catch (t) { console.error("THREE.WebGLState:", t) } }, texStorage3D: function () { try { t.texStorage3D.apply(t, arguments) } catch (t) { console.error("THREE.WebGLState:", t) } }, texSubImage2D: function () { try { t.texSubImage2D.apply(t, arguments) } catch (t) { console.error("THREE.WebGLState:", t) } }, texSubImage3D: function () { try { t.texSubImage3D.apply(t, arguments) } catch (t) { console.error("THREE.WebGLState:", t) } }, compressedTexSubImage2D: function () { try { t.compressedTexSubImage2D.apply(t, arguments) } catch (t) { console.error("THREE.WebGLState:", t) } }, compressedTexSubImage3D: function () { try { t.compressedTexSubImage3D.apply(t, arguments) } catch (t) { console.error("THREE.WebGLState:", t) } }, scissor: function (e) { !1 === vt.equals(e) && (t.scissor(e.x, e.y, e.z, e.w), vt.copy(e)) }, viewport: function (e) { !1 === _t.equals(e) && (t.viewport(e.x, e.y, e.z, e.w), _t.copy(e)) }, reset: function () { t.disable(3042), t.disable(2884), t.disable(2929), t.disable(32823), t.disable(3089), t.disable(2960), t.disable(32926), t.blendEquation(32774), t.blendFunc(1, 0), t.blendFuncSeparate(1, 0, 1, 0), t.colorMask(!0, !0, !0, !0), t.clearColor(0, 0, 0, 0), t.depthMask(!0), t.depthFunc(513), t.clearDepth(1), t.stencilMask(4294967295), t.stencilFunc(519, 0, 4294967295), t.stencilOp(7680, 7680, 7680), t.clearStencil(0), t.cullFace(1029), t.frontFace(2305), t.polygonOffset(0, 0), t.activeTexture(33984), t.bindFramebuffer(36160, null), !0 === i && (t.bindFramebuffer(36009, null), t.bindFramebuffer(36008, null)), t.useProgram(null), t.lineWidth(1), t.scissor(0, 0, t.canvas.width, t.canvas.height), t.viewport(0, 0, t.canvas.width, t.canvas.height), d = {}, pt = null, ft = {}, p = {}, f = new WeakMap, X = [], Y = null, $ = !1, Z = null, J = null, K = null, Q = null, tt = null, et = null, nt = null, it = !1, rt = null, at = null, ot = null, st = null, lt = null, vt.set(0, 0, t.canvas.width, t.canvas.height), _t.set(0, 0, t.canvas.width, t.canvas.height), r.reset(), a.reset(), o.reset() } } } function Zo(t, e, n, i, r, a, o) { const s = r.isWebGL2, l = r.maxTextures, c = r.maxCubemapSize, u = r.maxTextureSize, h = r.maxSamples, d = e.has("WEBGL_multisampled_render_to_texture") ? e.get("WEBGL_multisampled_render_to_texture") : null, p = "undefined" != typeof navigator && /OculusBrowser/g.test(navigator.userAgent), f = new WeakMap; let m; const g = new WeakMap; let v = !1; try { v = "undefined" != typeof OffscreenCanvas && null !== new OffscreenCanvas(1, 1).getContext("2d") } catch (t) { } function _(t, e) { return v ? new OffscreenCanvas(t, e) : Be("canvas") } function y(t, e, n, i) { let r = 1; if ((t.width > i || t.height > i) && (r = i / Math.max(t.width, t.height)), r < 1 || !0 === e) { if ("undefined" != typeof HTMLImageElement && t instanceof HTMLImageElement || "undefined" != typeof HTMLCanvasElement && t instanceof HTMLCanvasElement || "undefined" != typeof ImageBitmap && t instanceof ImageBitmap) { const i = e ? Oe : Math.floor, a = i(r * t.width), o = i(r * t.height); void 0 === m && (m = _(a, o)); const s = n ? _(a, o) : m; s.width = a, s.height = o; return s.getContext("2d").drawImage(t, 0, 0, a, o), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + t.width + "x" + t.height + ") to (" + a + "x" + o + ")."), s } return "data" in t && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + t.width + "x" + t.height + ")."), t } return t } function x(t) { return De(t.width) && De(t.height) } function b(t, e) { return t.generateMipmaps && e && t.minFilter !== ut && t.minFilter !== pt } function w(e) { t.generateMipmap(e) } function M(n, i, r, a, o = !1) { if (!1 === s) return i; if (null !== n) { if (void 0 !== t[n]) return t[n]; console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + n + "'") } let l = i; return 6403 === i && (5126 === r && (l = 33326), 5131 === r && (l = 33325), 5121 === r && (l = 33321)), 33319 === i && (5126 === r && (l = 33328), 5131 === r && (l = 33327), 5121 === r && (l = 33323)), 6408 === i && (5126 === r && (l = 34836), 5131 === r && (l = 34842), 5121 === r && (l = a === me && !1 === o ? 35907 : 32856), 32819 === r && (l = 32854), 32820 === r && (l = 32855)), 33325 !== l && 33326 !== l && 33327 !== l && 33328 !== l && 34842 !== l && 34836 !== l || e.get("EXT_color_buffer_float"), l } function S(t, e, n) { return !0 === b(t, n) || t.isFramebufferTexture && t.minFilter !== ut && t.minFilter !== pt ? Math.log2(Math.max(e.width, e.height)) + 1 : void 0 !== t.mipmaps && t.mipmaps.length > 0 ? t.mipmaps.length : t.isCompressedTexture && Array.isArray(t.image) ? e.mipmaps.length : 1 } function E(t) { return t === ut || t === ht || t === dt ? 9728 : 9729 } function T(t) { const e = t.target; e.removeEventListener("dispose", T), function (t) { const e = i.get(t); if (void 0 === e.__webglInit) return; const n = t.source, r = g.get(n); if (r) { const i = r[e.__cacheKey]; i.usedTimes--, 0 === i.usedTimes && C(t), 0 === Object.keys(r).length && g.delete(n) } i.remove(t) }(e), e.isVideoTexture && f.delete(e) } function A(e) { const n = e.target; n.removeEventListener("dispose", A), function (e) { const n = e.texture, r = i.get(e), a = i.get(n); void 0 !== a.__webglTexture && (t.deleteTexture(a.__webglTexture), o.memory.textures--); e.depthTexture && e.depthTexture.dispose(); if (e.isWebGLCubeRenderTarget) for (let e = 0; e < 6; e++)t.deleteFramebuffer(r.__webglFramebuffer[e]), r.__webglDepthbuffer && t.deleteRenderbuffer(r.__webglDepthbuffer[e]); else { if (t.deleteFramebuffer(r.__webglFramebuffer), r.__webglDepthbuffer && t.deleteRenderbuffer(r.__webglDepthbuffer), r.__webglMultisampledFramebuffer && t.deleteFramebuffer(r.__webglMultisampledFramebuffer), r.__webglColorRenderbuffer) for (let e = 0; e < r.__webglColorRenderbuffer.length; e++)r.__webglColorRenderbuffer[e] && t.deleteRenderbuffer(r.__webglColorRenderbuffer[e]); r.__webglDepthRenderbuffer && t.deleteRenderbuffer(r.__webglDepthRenderbuffer) } if (e.isWebGLMultipleRenderTargets) for (let e = 0, r = n.length; e < r; e++) { const r = i.get(n[e]); r.__webglTexture && (t.deleteTexture(r.__webglTexture), o.memory.textures--), i.remove(n[e]) } i.remove(n), i.remove(e) }(n) } function C(e) { const n = i.get(e); t.deleteTexture(n.__webglTexture); const r = e.source; delete g.get(r)[n.__cacheKey], o.memory.textures-- } let L = 0; function P(t, e) { const r = i.get(t); if (t.isVideoTexture && function (t) { const e = o.render.frame; f.get(t) !== e && (f.set(t, e), t.update()) }(t), !1 === t.isRenderTargetTexture && t.version > 0 && r.__version !== t.version) { const n = t.image; if (null === n) console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found."); else { if (!1 !== n.complete) return void N(r, t, e); console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete") } } n.bindTexture(3553, r.__webglTexture, 33984 + e) } const R = { [st]: 10497, [lt]: 33071, [ct]: 33648 }, D = { [ut]: 9728, [ht]: 9984, [dt]: 9986, [pt]: 9729, [ft]: 9985, [mt]: 9987 }; function O(n, a, o) { if (o ? (t.texParameteri(n, 10242, R[a.wrapS]), t.texParameteri(n, 10243, R[a.wrapT]), 32879 !== n && 35866 !== n || t.texParameteri(n, 32882, R[a.wrapR]), t.texParameteri(n, 10240, D[a.magFilter]), t.texParameteri(n, 10241, D[a.minFilter])) : (t.texParameteri(n, 10242, 33071), t.texParameteri(n, 10243, 33071), 32879 !== n && 35866 !== n || t.texParameteri(n, 32882, 33071), a.wrapS === lt && a.wrapT === lt || console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."), t.texParameteri(n, 10240, E(a.magFilter)), t.texParameteri(n, 10241, E(a.minFilter)), a.minFilter !== ut && a.minFilter !== pt && console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")), !0 === e.has("EXT_texture_filter_anisotropic")) { const o = e.get("EXT_texture_filter_anisotropic"); if (a.magFilter === ut) return; if (a.minFilter !== dt && a.minFilter !== mt) return; if (a.type === wt && !1 === e.has("OES_texture_float_linear")) return; if (!1 === s && a.type === Mt && !1 === e.has("OES_texture_half_float_linear")) return; (a.anisotropy > 1 || i.get(a).__currentAnisotropy) && (t.texParameterf(n, o.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(a.anisotropy, r.getMaxAnisotropy())), i.get(a).__currentAnisotropy = a.anisotropy) } } function I(e, n) { let i = !1; void 0 === e.__webglInit && (e.__webglInit = !0, n.addEventListener("dispose", T)); const r = n.source; let a = g.get(r); void 0 === a && (a = {}, g.set(r, a)); const s = function (t) { const e = []; return e.push(t.wrapS), e.push(t.wrapT), e.push(t.wrapR || 0), e.push(t.magFilter), e.push(t.minFilter), e.push(t.anisotropy), e.push(t.internalFormat), e.push(t.format), e.push(t.type), e.push(t.generateMipmaps), e.push(t.premultiplyAlpha), e.push(t.flipY), e.push(t.unpackAlignment), e.push(t.encoding), e.join() }(n); if (s !== e.__cacheKey) { void 0 === a[s] && (a[s] = { texture: t.createTexture(), usedTimes: 0 }, o.memory.textures++, i = !0), a[s].usedTimes++; const r = a[e.__cacheKey]; void 0 !== r && (a[e.__cacheKey].usedTimes--, 0 === r.usedTimes && C(n)), e.__cacheKey = s, e.__webglTexture = a[s].texture } return i } function N(e, r, o) { let l = 3553; (r.isDataArrayTexture || r.isCompressedArrayTexture) && (l = 35866), r.isData3DTexture && (l = 32879); const c = I(e, r), h = r.source; n.bindTexture(l, e.__webglTexture, 33984 + o); const d = i.get(h); if (h.version !== d.__version || !0 === c) { n.activeTexture(33984 + o), t.pixelStorei(37440, r.flipY), t.pixelStorei(37441, r.premultiplyAlpha), t.pixelStorei(3317, r.unpackAlignment), t.pixelStorei(37443, 0); const e = function (t) { return !s && (t.wrapS !== lt || t.wrapT !== lt || t.minFilter !== ut && t.minFilter !== pt) }(r) && !1 === x(r.image); let i = y(r.image, e, !1, u); i = j(r, i); const p = x(i) || s, f = a.convert(r.format, r.encoding); let m, g = a.convert(r.type), v = M(r.internalFormat, f, g, r.encoding, r.isVideoTexture); O(l, r, p); const _ = r.mipmaps, E = s && !0 !== r.isVideoTexture, T = void 0 === d.__version || !0 === c, A = S(r, i, p); if (r.isDepthTexture) v = 6402, s ? v = r.type === wt ? 36012 : r.type === bt ? 33190 : r.type === Tt ? 35056 : 33189 : r.type === wt && console.error("WebGLRenderer: Floating point depth texture requires WebGL2."), r.format === Rt && 6402 === v && r.type !== yt && r.type !== bt && (console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."), r.type = bt, g = a.convert(r.type)), r.format === Dt && 6402 === v && (v = 34041, r.type !== Tt && (console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."), r.type = Tt, g = a.convert(r.type))), T && (E ? n.texStorage2D(3553, 1, v, i.width, i.height) : n.texImage2D(3553, 0, v, i.width, i.height, 0, f, g, null)); else if (r.isDataTexture) if (_.length > 0 && p) { E && T && n.texStorage2D(3553, A, v, _[0].width, _[0].height); for (let t = 0, e = _.length; t < e; t++)m = _[t], E ? n.texSubImage2D(3553, t, 0, 0, m.width, m.height, f, g, m.data) : n.texImage2D(3553, t, v, m.width, m.height, 0, f, g, m.data); r.generateMipmaps = !1 } else E ? (T && n.texStorage2D(3553, A, v, i.width, i.height), n.texSubImage2D(3553, 0, 0, 0, i.width, i.height, f, g, i.data)) : n.texImage2D(3553, 0, v, i.width, i.height, 0, f, g, i.data); else if (r.isCompressedTexture) if (r.isCompressedArrayTexture) { E && T && n.texStorage3D(35866, A, v, _[0].width, _[0].height, i.depth); for (let t = 0, e = _.length; t < e; t++)m = _[t], r.format !== Ct ? null !== f ? E ? n.compressedTexSubImage3D(35866, t, 0, 0, 0, m.width, m.height, i.depth, f, m.data, 0, 0) : n.compressedTexImage3D(35866, t, v, m.width, m.height, i.depth, 0, m.data, 0, 0) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : E ? n.texSubImage3D(35866, t, 0, 0, 0, m.width, m.height, i.depth, f, g, m.data) : n.texImage3D(35866, t, v, m.width, m.height, i.depth, 0, f, g, m.data) } else { E && T && n.texStorage2D(3553, A, v, _[0].width, _[0].height); for (let t = 0, e = _.length; t < e; t++)m = _[t], r.format !== Ct ? null !== f ? E ? n.compressedTexSubImage2D(3553, t, 0, 0, m.width, m.height, f, m.data) : n.compressedTexImage2D(3553, t, v, m.width, m.height, 0, m.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : E ? n.texSubImage2D(3553, t, 0, 0, m.width, m.height, f, g, m.data) : n.texImage2D(3553, t, v, m.width, m.height, 0, f, g, m.data) } else if (r.isDataArrayTexture) E ? (T && n.texStorage3D(35866, A, v, i.width, i.height, i.depth), n.texSubImage3D(35866, 0, 0, 0, 0, i.width, i.height, i.depth, f, g, i.data)) : n.texImage3D(35866, 0, v, i.width, i.height, i.depth, 0, f, g, i.data); else if (r.isData3DTexture) E ? (T && n.texStorage3D(32879, A, v, i.width, i.height, i.depth), n.texSubImage3D(32879, 0, 0, 0, 0, i.width, i.height, i.depth, f, g, i.data)) : n.texImage3D(32879, 0, v, i.width, i.height, i.depth, 0, f, g, i.data); else if (r.isFramebufferTexture) { if (T) if (E) n.texStorage2D(3553, A, v, i.width, i.height); else { let t = i.width, e = i.height; for (let i = 0; i < A; i++)n.texImage2D(3553, i, v, t, e, 0, f, g, null), t >>= 1, e >>= 1 } } else if (_.length > 0 && p) { E && T && n.texStorage2D(3553, A, v, _[0].width, _[0].height); for (let t = 0, e = _.length; t < e; t++)m = _[t], E ? n.texSubImage2D(3553, t, 0, 0, f, g, m) : n.texImage2D(3553, t, v, f, g, m); r.generateMipmaps = !1 } else E ? (T && n.texStorage2D(3553, A, v, i.width, i.height), n.texSubImage2D(3553, 0, 0, 0, f, g, i)) : n.texImage2D(3553, 0, v, f, g, i); b(r, p) && w(l), d.__version = h.version, r.onUpdate && r.onUpdate(r) } e.__version = r.version } function k(e, r, o, s, l) { const c = a.convert(o.format, o.encoding), u = a.convert(o.type), h = M(o.internalFormat, c, u, o.encoding); i.get(r).__hasExternalTextures || (32879 === l || 35866 === l ? n.texImage3D(l, 0, h, r.width, r.height, r.depth, 0, c, u, null) : n.texImage2D(l, 0, h, r.width, r.height, 0, c, u, null)), n.bindFramebuffer(36160, e), B(r) ? d.framebufferTexture2DMultisampleEXT(36160, s, l, i.get(o).__webglTexture, 0, F(r)) : (3553 === l || l >= 34069 && l <= 34074) && t.framebufferTexture2D(36160, s, l, i.get(o).__webglTexture, 0), n.bindFramebuffer(36160, null) } function z(e, n, i) { if (t.bindRenderbuffer(36161, e), n.depthBuffer && !n.stencilBuffer) { let r = 33189; if (i || B(n)) { const e = n.depthTexture; e && e.isDepthTexture && (e.type === wt ? r = 36012 : e.type === bt && (r = 33190)); const i = F(n); B(n) ? d.renderbufferStorageMultisampleEXT(36161, i, r, n.width, n.height) : t.renderbufferStorageMultisample(36161, i, r, n.width, n.height) } else t.renderbufferStorage(36161, r, n.width, n.height); t.framebufferRenderbuffer(36160, 36096, 36161, e) } else if (n.depthBuffer && n.stencilBuffer) { const r = F(n); i && !1 === B(n) ? t.renderbufferStorageMultisample(36161, r, 35056, n.width, n.height) : B(n) ? d.renderbufferStorageMultisampleEXT(36161, r, 35056, n.width, n.height) : t.renderbufferStorage(36161, 34041, n.width, n.height), t.framebufferRenderbuffer(36160, 33306, 36161, e) } else { const e = !0 === n.isWebGLMultipleRenderTargets ? n.texture : [n.texture]; for (let r = 0; r < e.length; r++) { const o = e[r], s = a.convert(o.format, o.encoding), l = a.convert(o.type), c = M(o.internalFormat, s, l, o.encoding), u = F(n); i && !1 === B(n) ? t.renderbufferStorageMultisample(36161, u, c, n.width, n.height) : B(n) ? d.renderbufferStorageMultisampleEXT(36161, u, c, n.width, n.height) : t.renderbufferStorage(36161, c, n.width, n.height) } } t.bindRenderbuffer(36161, null) } function U(e) { const r = i.get(e), a = !0 === e.isWebGLCubeRenderTarget; if (e.depthTexture && !r.__autoAllocateDepthBuffer) { if (a) throw new Error("target.depthTexture not supported in Cube render targets"); !function (e, r) { if (r && r.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported"); if (n.bindFramebuffer(36160, e), !r.depthTexture || !r.depthTexture.isDepthTexture) throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture"); i.get(r.depthTexture).__webglTexture && r.depthTexture.image.width === r.width && r.depthTexture.image.height === r.height || (r.depthTexture.image.width = r.width, r.depthTexture.image.height = r.height, r.depthTexture.needsUpdate = !0), P(r.depthTexture, 0); const a = i.get(r.depthTexture).__webglTexture, o = F(r); if (r.depthTexture.format === Rt) B(r) ? d.framebufferTexture2DMultisampleEXT(36160, 36096, 3553, a, 0, o) : t.framebufferTexture2D(36160, 36096, 3553, a, 0); else { if (r.depthTexture.format !== Dt) throw new Error("Unknown depthTexture format"); B(r) ? d.framebufferTexture2DMultisampleEXT(36160, 33306, 3553, a, 0, o) : t.framebufferTexture2D(36160, 33306, 3553, a, 0) } }(r.__webglFramebuffer, e) } else if (a) { r.__webglDepthbuffer = []; for (let i = 0; i < 6; i++)n.bindFramebuffer(36160, r.__webglFramebuffer[i]), r.__webglDepthbuffer[i] = t.createRenderbuffer(), z(r.__webglDepthbuffer[i], e, !1) } else n.bindFramebuffer(36160, r.__webglFramebuffer), r.__webglDepthbuffer = t.createRenderbuffer(), z(r.__webglDepthbuffer, e, !1); n.bindFramebuffer(36160, null) } function F(t) { return Math.min(h, t.samples) } function B(t) { const n = i.get(t); return s && t.samples > 0 && !0 === e.has("WEBGL_multisampled_render_to_texture") && !1 !== n.__useRenderToTexture } function j(t, n) { const i = t.encoding, r = t.format, a = t.type; return !0 === t.isCompressedTexture || !0 === t.isVideoTexture || t.format === Se || i !== fe && (i === me ? !1 === s ? !0 === e.has("EXT_sRGB") && r === Ct ? (t.format = Se, t.minFilter = pt, t.generateMipmaps = !1) : n = tn.sRGBToLinear(n) : r === Ct && a === gt || console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.") : console.error("THREE.WebGLTextures: Unsupported texture encoding:", i)), n } this.allocateTextureUnit = function () { const t = L; return t >= l && console.warn("THREE.WebGLTextures: Trying to use " + t + " texture units while this GPU supports only " + l), L += 1, t }, this.resetTextureUnits = function () { L = 0 }, this.setTexture2D = P, this.setTexture2DArray = function (t, e) { const r = i.get(t); t.version > 0 && r.__version !== t.version ? N(r, t, e) : n.bindTexture(35866, r.__webglTexture, 33984 + e) }, this.setTexture3D = function (t, e) { const r = i.get(t); t.version > 0 && r.__version !== t.version ? N(r, t, e) : n.bindTexture(32879, r.__webglTexture, 33984 + e) }, this.setTextureCube = function (e, r) { const o = i.get(e); e.version > 0 && o.__version !== e.version ? function (e, r, o) { if (6 !== r.image.length) return; const l = I(e, r), u = r.source; n.bindTexture(34067, e.__webglTexture, 33984 + o); const h = i.get(u); if (u.version !== h.__version || !0 === l) { n.activeTexture(33984 + o), t.pixelStorei(37440, r.flipY), t.pixelStorei(37441, r.premultiplyAlpha), t.pixelStorei(3317, r.unpackAlignment), t.pixelStorei(37443, 0); const e = r.isCompressedTexture || r.image[0].isCompressedTexture, i = r.image[0] && r.image[0].isDataTexture, d = []; for (let t = 0; t < 6; t++)d[t] = e || i ? i ? r.image[t].image : r.image[t] : y(r.image[t], !1, !0, c), d[t] = j(r, d[t]); const p = d[0], f = x(p) || s, m = a.convert(r.format, r.encoding), g = a.convert(r.type), v = M(r.internalFormat, m, g, r.encoding), _ = s && !0 !== r.isVideoTexture, E = void 0 === h.__version || !0 === l; let T, A = S(r, p, f); if (O(34067, r, f), e) { _ && E && n.texStorage2D(34067, A, v, p.width, p.height); for (let t = 0; t < 6; t++) { T = d[t].mipmaps; for (let e = 0; e < T.length; e++) { const i = T[e]; r.format !== Ct ? null !== m ? _ ? n.compressedTexSubImage2D(34069 + t, e, 0, 0, i.width, i.height, m, i.data) : n.compressedTexImage2D(34069 + t, e, v, i.width, i.height, 0, i.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : _ ? n.texSubImage2D(34069 + t, e, 0, 0, i.width, i.height, m, g, i.data) : n.texImage2D(34069 + t, e, v, i.width, i.height, 0, m, g, i.data) } } } else { T = r.mipmaps, _ && E && (T.length > 0 && A++, n.texStorage2D(34067, A, v, d[0].width, d[0].height)); for (let t = 0; t < 6; t++)if (i) { _ ? n.texSubImage2D(34069 + t, 0, 0, 0, d[t].width, d[t].height, m, g, d[t].data) : n.texImage2D(34069 + t, 0, v, d[t].width, d[t].height, 0, m, g, d[t].data); for (let e = 0; e < T.length; e++) { const i = T[e].image[t].image; _ ? n.texSubImage2D(34069 + t, e + 1, 0, 0, i.width, i.height, m, g, i.data) : n.texImage2D(34069 + t, e + 1, v, i.width, i.height, 0, m, g, i.data) } } else { _ ? n.texSubImage2D(34069 + t, 0, 0, 0, m, g, d[t]) : n.texImage2D(34069 + t, 0, v, m, g, d[t]); for (let e = 0; e < T.length; e++) { const i = T[e]; _ ? n.texSubImage2D(34069 + t, e + 1, 0, 0, m, g, i.image[t]) : n.texImage2D(34069 + t, e + 1, v, m, g, i.image[t]) } } } b(r, f) && w(34067), h.__version = u.version, r.onUpdate && r.onUpdate(r) } e.__version = r.version }(o, e, r) : n.bindTexture(34067, o.__webglTexture, 33984 + r) }, this.rebindTextures = function (t, e, n) { const r = i.get(t); void 0 !== e && k(r.__webglFramebuffer, t, t.texture, 36064, 3553), void 0 !== n && U(t) }, this.setupRenderTarget = function (e) { const l = e.texture, c = i.get(e), u = i.get(l); e.addEventListener("dispose", A), !0 !== e.isWebGLMultipleRenderTargets && (void 0 === u.__webglTexture && (u.__webglTexture = t.createTexture()), u.__version = l.version, o.memory.textures++); const h = !0 === e.isWebGLCubeRenderTarget, d = !0 === e.isWebGLMultipleRenderTargets, p = x(e) || s; if (h) { c.__webglFramebuffer = []; for (let e = 0; e < 6; e++)c.__webglFramebuffer[e] = t.createFramebuffer() } else { if (c.__webglFramebuffer = t.createFramebuffer(), d) if (r.drawBuffers) { const n = e.texture; for (let e = 0, r = n.length; e < r; e++) { const r = i.get(n[e]); void 0 === r.__webglTexture && (r.__webglTexture = t.createTexture(), o.memory.textures++) } } else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension."); if (s && e.samples > 0 && !1 === B(e)) { const i = d ? l : [l]; c.__webglMultisampledFramebuffer = t.createFramebuffer(), c.__webglColorRenderbuffer = [], n.bindFramebuffer(36160, c.__webglMultisampledFramebuffer); for (let n = 0; n < i.length; n++) { const r = i[n]; c.__webglColorRenderbuffer[n] = t.createRenderbuffer(), t.bindRenderbuffer(36161, c.__webglColorRenderbuffer[n]); const o = a.convert(r.format, r.encoding), s = a.convert(r.type), l = M(r.internalFormat, o, s, r.encoding, !0 === e.isXRRenderTarget), u = F(e); t.renderbufferStorageMultisample(36161, u, l, e.width, e.height), t.framebufferRenderbuffer(36160, 36064 + n, 36161, c.__webglColorRenderbuffer[n]) } t.bindRenderbuffer(36161, null), e.depthBuffer && (c.__webglDepthRenderbuffer = t.createRenderbuffer(), z(c.__webglDepthRenderbuffer, e, !0)), n.bindFramebuffer(36160, null) } } if (h) { n.bindTexture(34067, u.__webglTexture), O(34067, l, p); for (let t = 0; t < 6; t++)k(c.__webglFramebuffer[t], e, l, 36064, 34069 + t); b(l, p) && w(34067), n.unbindTexture() } else if (d) { const t = e.texture; for (let r = 0, a = t.length; r < a; r++) { const a = t[r], o = i.get(a); n.bindTexture(3553, o.__webglTexture), O(3553, a, p), k(c.__webglFramebuffer, e, a, 36064 + r, 3553), b(a, p) && w(3553) } n.unbindTexture() } else { let t = 3553; (e.isWebGL3DRenderTarget || e.isWebGLArrayRenderTarget) && (s ? t = e.isWebGL3DRenderTarget ? 32879 : 35866 : console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")), n.bindTexture(t, u.__webglTexture), O(t, l, p), k(c.__webglFramebuffer, e, l, 36064, t), b(l, p) && w(t), n.unbindTexture() } e.depthBuffer && U(e) }, this.updateRenderTargetMipmap = function (t) { const e = x(t) || s, r = !0 === t.isWebGLMultipleRenderTargets ? t.texture : [t.texture]; for (let a = 0, o = r.length; a < o; a++) { const o = r[a]; if (b(o, e)) { const e = t.isWebGLCubeRenderTarget ? 34067 : 3553, r = i.get(o).__webglTexture; n.bindTexture(e, r), w(e), n.unbindTexture() } } }, this.updateMultisampleRenderTarget = function (e) { if (s && e.samples > 0 && !1 === B(e)) { const r = e.isWebGLMultipleRenderTargets ? e.texture : [e.texture], a = e.width, o = e.height; let s = 16384; const l = [], c = e.stencilBuffer ? 33306 : 36096, u = i.get(e), h = !0 === e.isWebGLMultipleRenderTargets; if (h) for (let e = 0; e < r.length; e++)n.bindFramebuffer(36160, u.__webglMultisampledFramebuffer), t.framebufferRenderbuffer(36160, 36064 + e, 36161, null), n.bindFramebuffer(36160, u.__webglFramebuffer), t.framebufferTexture2D(36009, 36064 + e, 3553, null, 0); n.bindFramebuffer(36008, u.__webglMultisampledFramebuffer), n.bindFramebuffer(36009, u.__webglFramebuffer); for (let n = 0; n < r.length; n++) { l.push(36064 + n), e.depthBuffer && l.push(c); const d = void 0 !== u.__ignoreDepthValues && u.__ignoreDepthValues; if (!1 === d && (e.depthBuffer && (s |= 256), e.stencilBuffer && (s |= 1024)), h && t.framebufferRenderbuffer(36008, 36064, 36161, u.__webglColorRenderbuffer[n]), !0 === d && (t.invalidateFramebuffer(36008, [c]), t.invalidateFramebuffer(36009, [c])), h) { const e = i.get(r[n]).__webglTexture; t.framebufferTexture2D(36009, 36064, 3553, e, 0) } t.blitFramebuffer(0, 0, a, o, 0, 0, a, o, s, 9728), p && t.invalidateFramebuffer(36008, l) } if (n.bindFramebuffer(36008, null), n.bindFramebuffer(36009, null), h) for (let e = 0; e < r.length; e++) { n.bindFramebuffer(36160, u.__webglMultisampledFramebuffer), t.framebufferRenderbuffer(36160, 36064 + e, 36161, u.__webglColorRenderbuffer[e]); const a = i.get(r[e]).__webglTexture; n.bindFramebuffer(36160, u.__webglFramebuffer), t.framebufferTexture2D(36009, 36064 + e, 3553, a, 0) } n.bindFramebuffer(36009, u.__webglMultisampledFramebuffer) } }, this.setupDepthRenderbuffer = U, this.setupFrameBufferTexture = k, this.useMultisampledRTT = B } function Jo(t, e, n) { const i = n.isWebGL2; return { convert: function (n, r = null) { let a; if (n === gt) return 5121; if (n === St) return 32819; if (n === Et) return 32820; if (n === vt) return 5120; if (n === _t) return 5122; if (n === yt) return 5123; if (n === xt) return 5124; if (n === bt) return 5125; if (n === wt) return 5126; if (n === Mt) return i ? 5131 : (a = e.get("OES_texture_half_float"), null !== a ? a.HALF_FLOAT_OES : null); if (n === At) return 6406; if (n === Ct) return 6408; if (n === Lt) return 6409; if (n === Pt) return 6410; if (n === Rt) return 6402; if (n === Dt) return 34041; if (n === Se) return a = e.get("EXT_sRGB"), null !== a ? a.SRGB_ALPHA_EXT : null; if (n === Ot) return 6403; if (n === It) return 36244; if (n === Nt) return 33319; if (n === kt) return 33320; if (n === zt) return 36249; if (n === Ut || n === Ft || n === Bt || n === jt) if (r === me) { if (a = e.get("WEBGL_compressed_texture_s3tc_srgb"), null === a) return null; if (n === Ut) return a.COMPRESSED_SRGB_S3TC_DXT1_EXT; if (n === Ft) return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT; if (n === Bt) return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT; if (n === jt) return a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT } else { if (a = e.get("WEBGL_compressed_texture_s3tc"), null === a) return null; if (n === Ut) return a.COMPRESSED_RGB_S3TC_DXT1_EXT; if (n === Ft) return a.COMPRESSED_RGBA_S3TC_DXT1_EXT; if (n === Bt) return a.COMPRESSED_RGBA_S3TC_DXT3_EXT; if (n === jt) return a.COMPRESSED_RGBA_S3TC_DXT5_EXT } if (n === Gt || n === Ht || n === Vt || n === Wt) { if (a = e.get("WEBGL_compressed_texture_pvrtc"), null === a) return null; if (n === Gt) return a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG; if (n === Ht) return a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG; if (n === Vt) return a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG; if (n === Wt) return a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG } if (n === qt) return a = e.get("WEBGL_compressed_texture_etc1"), null !== a ? a.COMPRESSED_RGB_ETC1_WEBGL : null; if (n === Xt || n === Yt) { if (a = e.get("WEBGL_compressed_texture_etc"), null === a) return null; if (n === Xt) return r === me ? a.COMPRESSED_SRGB8_ETC2 : a.COMPRESSED_RGB8_ETC2; if (n === Yt) return r === me ? a.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : a.COMPRESSED_RGBA8_ETC2_EAC } if (n === $t || n === Zt || n === Jt || n === Kt || n === Qt || n === te || n === ee || n === ne || n === ie || n === re || n === ae || n === oe || n === se || n === le) { if (a = e.get("WEBGL_compressed_texture_astc"), null === a) return null; if (n === $t) return r === me ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : a.COMPRESSED_RGBA_ASTC_4x4_KHR; if (n === Zt) return r === me ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : a.COMPRESSED_RGBA_ASTC_5x4_KHR; if (n === Jt) return r === me ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : a.COMPRESSED_RGBA_ASTC_5x5_KHR; if (n === Kt) return r === me ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : a.COMPRESSED_RGBA_ASTC_6x5_KHR; if (n === Qt) return r === me ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : a.COMPRESSED_RGBA_ASTC_6x6_KHR; if (n === te) return r === me ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : a.COMPRESSED_RGBA_ASTC_8x5_KHR; if (n === ee) return r === me ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : a.COMPRESSED_RGBA_ASTC_8x6_KHR; if (n === ne) return r === me ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : a.COMPRESSED_RGBA_ASTC_8x8_KHR; if (n === ie) return r === me ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : a.COMPRESSED_RGBA_ASTC_10x5_KHR; if (n === re) return r === me ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : a.COMPRESSED_RGBA_ASTC_10x6_KHR; if (n === ae) return r === me ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : a.COMPRESSED_RGBA_ASTC_10x8_KHR; if (n === oe) return r === me ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : a.COMPRESSED_RGBA_ASTC_10x10_KHR; if (n === se) return r === me ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : a.COMPRESSED_RGBA_ASTC_12x10_KHR; if (n === le) return r === me ? a.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : a.COMPRESSED_RGBA_ASTC_12x12_KHR } if (n === ce) { if (a = e.get("EXT_texture_compression_bptc"), null === a) return null; if (n === ce) return r === me ? a.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : a.COMPRESSED_RGBA_BPTC_UNORM_EXT } if (n === ue || n === he || n === de || n === pe) { if (a = e.get("EXT_texture_compression_rgtc"), null === a) return null; if (n === ce) return a.COMPRESSED_RED_RGTC1_EXT; if (n === he) return a.COMPRESSED_SIGNED_RED_RGTC1_EXT; if (n === de) return a.COMPRESSED_RED_GREEN_RGTC2_EXT; if (n === pe) return a.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT } return n === Tt ? i ? 34042 : (a = e.get("WEBGL_depth_texture"), null !== a ? a.UNSIGNED_INT_24_8_WEBGL : null) : void 0 !== t[n] ? t[n] : null } } } class Ko extends dr { constructor(t = []) { super(), this.isArrayCamera = !0, this.cameras = t } } let Qo = class extends li { constructor() { super(), this.isGroup = !0, this.type = "Group" } }; const ts = { type: "move" }; class es { constructor() { this._targetRay = null, this._grip = null, this._hand = null } getHandSpace() { return null === this._hand && (this._hand = new Qo, this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = {}, this._hand.inputState = { pinching: !1 }), this._hand } getTargetRaySpace() { return null === this._targetRay && (this._targetRay = new Qo, this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1, this._targetRay.hasLinearVelocity = !1, this._targetRay.linearVelocity = new Ge, this._targetRay.hasAngularVelocity = !1, this._targetRay.angularVelocity = new Ge), this._targetRay } getGripSpace() { return null === this._grip && (this._grip = new Qo, this._grip.matrixAutoUpdate = !1, this._grip.visible = !1, this._grip.hasLinearVelocity = !1, this._grip.linearVelocity = new Ge, this._grip.hasAngularVelocity = !1, this._grip.angularVelocity = new Ge), this._grip } dispatchEvent(t) { return null !== this._targetRay && this._targetRay.dispatchEvent(t), null !== this._grip && this._grip.dispatchEvent(t), null !== this._hand && this._hand.dispatchEvent(t), this } connect(t) { if (t && t.hand) { const e = this._hand; if (e) for (const n of t.hand.values()) this._getHandJoint(e, n) } return this.dispatchEvent({ type: "connected", data: t }), this } disconnect(t) { return this.dispatchEvent({ type: "disconnected", data: t }), null !== this._targetRay && (this._targetRay.visible = !1), null !== this._grip && (this._grip.visible = !1), null !== this._hand && (this._hand.visible = !1), this } update(t, e, n) { let i = null, r = null, a = null; const o = this._targetRay, s = this._grip, l = this._hand; if (t && "visible-blurred" !== e.session.visibilityState) { if (l && t.hand) { a = !0; for (const i of t.hand.values()) { const t = e.getJointPose(i, n), r = this._getHandJoint(l, i); null !== t && (r.matrix.fromArray(t.transform.matrix), r.matrix.decompose(r.position, r.rotation, r.scale), r.jointRadius = t.radius), r.visible = null !== t } const i = l.joints["index-finger-tip"], r = l.joints["thumb-tip"], o = i.position.distanceTo(r.position), s = .02, c = .005; l.inputState.pinching && o > s + c ? (l.inputState.pinching = !1, this.dispatchEvent({ type: "pinchend", handedness: t.handedness, target: this })) : !l.inputState.pinching && o <= s - c && (l.inputState.pinching = !0, this.dispatchEvent({ type: "pinchstart", handedness: t.handedness, target: this })) } else null !== s && t.gripSpace && (r = e.getPose(t.gripSpace, n), null !== r && (s.matrix.fromArray(r.transform.matrix), s.matrix.decompose(s.position, s.rotation, s.scale), r.linearVelocity ? (s.hasLinearVelocity = !0, s.linearVelocity.copy(r.linearVelocity)) : s.hasLinearVelocity = !1, r.angularVelocity ? (s.hasAngularVelocity = !0, s.angularVelocity.copy(r.angularVelocity)) : s.hasAngularVelocity = !1)); null !== o && (i = e.getPose(t.targetRaySpace, n), null === i && null !== r && (i = r), null !== i && (o.matrix.fromArray(i.transform.matrix), o.matrix.decompose(o.position, o.rotation, o.scale), i.linearVelocity ? (o.hasLinearVelocity = !0, o.linearVelocity.copy(i.linearVelocity)) : o.hasLinearVelocity = !1, i.angularVelocity ? (o.hasAngularVelocity = !0, o.angularVelocity.copy(i.angularVelocity)) : o.hasAngularVelocity = !1, this.dispatchEvent(ts))) } return null !== o && (o.visible = null !== i), null !== s && (s.visible = null !== r), null !== l && (l.visible = null !== a), this } _getHandJoint(t, e) { if (void 0 === t.joints[e.jointName]) { const n = new Qo; n.matrixAutoUpdate = !1, n.visible = !1, t.joints[e.jointName] = n, t.add(n) } return t.joints[e.jointName] } } class ns extends an { constructor(t, e, n, i, r, a, o, s, l, c) { if ((c = void 0 !== c ? c : Rt) !== Rt && c !== Dt) throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat"); void 0 === n && c === Rt && (n = bt), void 0 === n && c === Dt && (n = Tt), super(null, i, r, a, o, s, c, n, l), this.isDepthTexture = !0, this.image = { width: t, height: e }, this.magFilter = void 0 !== o ? o : ut, this.minFilter = void 0 !== s ? s : ut, this.flipY = !1, this.generateMipmaps = !1 } } class is extends Ee { constructor(t, e) { super(); const n = this; let i = null, r = 1, a = null, o = "local-floor", s = 1, l = null, c = null, u = null, h = null, d = null, p = null; const f = e.getContextAttributes(); let m = null, g = null; const v = [], _ = [], y = new Set, x = new Map, b = new dr; b.layers.enable(1), b.viewport = new on; const w = new dr; w.layers.enable(2), w.viewport = new on; const M = [b, w], S = new Ko; S.layers.enable(1), S.layers.enable(2); let E = null, T = null; function A(t) { const e = _.indexOf(t.inputSource); if (-1 === e) return; const n = v[e]; void 0 !== n && n.dispatchEvent({ type: t.type, data: t.inputSource }) } function C() { i.removeEventListener("select", A), i.removeEventListener("selectstart", A), i.removeEventListener("selectend", A), i.removeEventListener("squeeze", A), i.removeEventListener("squeezestart", A), i.removeEventListener("squeezeend", A), i.removeEventListener("end", C), i.removeEventListener("inputsourceschange", L); for (let t = 0; t < v.length; t++) { const e = _[t]; null !== e && (_[t] = null, v[t].disconnect(e)) } E = null, T = null, t.setRenderTarget(m), d = null, h = null, u = null, i = null, g = null, I.stop(), n.isPresenting = !1, n.dispatchEvent({ type: "sessionend" }) } function L(t) { for (let e = 0; e < t.removed.length; e++) { const n = t.removed[e], i = _.indexOf(n); i >= 0 && (_[i] = null, v[i].disconnect(n)) } for (let e = 0; e < t.added.length; e++) { const n = t.added[e]; let i = _.indexOf(n); if (-1 === i) { for (let t = 0; t < v.length; t++) { if (t >= _.length) { _.push(n), i = t; break } if (null === _[t]) { _[t] = n, i = t; break } } if (-1 === i) break } const r = v[i]; r && r.connect(n) } } this.cameraAutoUpdate = !0, this.enabled = !1, this.isPresenting = !1, this.getController = function (t) { let e = v[t]; return void 0 === e && (e = new es, v[t] = e), e.getTargetRaySpace() }, this.getControllerGrip = function (t) { let e = v[t]; return void 0 === e && (e = new es, v[t] = e), e.getGripSpace() }, this.getHand = function (t) { let e = v[t]; return void 0 === e && (e = new es, v[t] = e), e.getHandSpace() }, this.setFramebufferScaleFactor = function (t) { r = t, !0 === n.isPresenting && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.") }, this.setReferenceSpaceType = function (t) { o = t, !0 === n.isPresenting && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.") }, this.getReferenceSpace = function () { return l || a }, this.setReferenceSpace = function (t) { l = t }, this.getBaseLayer = function () { return null !== h ? h : d }, this.getBinding = function () { return u }, this.getFrame = function () { return p }, this.getSession = function () { return i }, this.setSession = async function (c) { if (i = c, null !== i) { if (m = t.getRenderTarget(), i.addEventListener("select", A), i.addEventListener("selectstart", A), i.addEventListener("selectend", A), i.addEventListener("squeeze", A), i.addEventListener("squeezestart", A), i.addEventListener("squeezeend", A), i.addEventListener("end", C), i.addEventListener("inputsourceschange", L), !0 !== f.xrCompatible && await e.makeXRCompatible(), void 0 === i.renderState.layers || !1 === t.capabilities.isWebGL2) { const n = { antialias: void 0 !== i.renderState.layers || f.antialias, alpha: f.alpha, depth: f.depth, stencil: f.stencil, framebufferScaleFactor: r }; d = new XRWebGLLayer(i, e, n), i.updateRenderState({ baseLayer: d }), g = new sn(d.framebufferWidth, d.framebufferHeight, { format: Ct, type: gt, encoding: t.outputEncoding, stencilBuffer: f.stencil }) } else { let n = null, a = null, o = null; f.depth && (o = f.stencil ? 35056 : 33190, n = f.stencil ? Dt : Rt, a = f.stencil ? Tt : bt); const s = { colorFormat: 32856, depthFormat: o, scaleFactor: r }; u = new XRWebGLBinding(i, e), h = u.createProjectionLayer(s), i.updateRenderState({ layers: [h] }), g = new sn(h.textureWidth, h.textureHeight, { format: Ct, type: gt, depthTexture: new ns(h.textureWidth, h.textureHeight, a, void 0, void 0, void 0, void 0, void 0, void 0, n), stencilBuffer: f.stencil, encoding: t.outputEncoding, samples: f.antialias ? 4 : 0 }); t.properties.get(g).__ignoreDepthValues = h.ignoreDepthValues } g.isXRRenderTarget = !0, this.setFoveation(s), l = null, a = await i.requestReferenceSpace(o), I.setContext(i), I.start(), n.isPresenting = !0, n.dispatchEvent({ type: "sessionstart" }) } }; const P = new Ge, R = new Ge; function D(t, e) { null === e ? t.matrixWorld.copy(t.matrix) : t.matrixWorld.multiplyMatrices(e.matrixWorld, t.matrix), t.matrixWorldInverse.copy(t.matrixWorld).invert() } this.updateCamera = function (t) { if (null === i) return; S.near = w.near = b.near = t.near, S.far = w.far = b.far = t.far, E === S.near && T === S.far || (i.updateRenderState({ depthNear: S.near, depthFar: S.far }), E = S.near, T = S.far); const e = t.parent, n = S.cameras; D(S, e); for (let t = 0; t < n.length; t++)D(n[t], e); S.matrixWorld.decompose(S.position, S.quaternion, S.scale), t.matrix.copy(S.matrix), t.matrix.decompose(t.position, t.quaternion, t.scale); const r = t.children; for (let t = 0, e = r.length; t < e; t++)r[t].updateMatrixWorld(!0); 2 === n.length ? function (t, e, n) { P.setFromMatrixPosition(e.matrixWorld), R.setFromMatrixPosition(n.matrixWorld); const i = P.distanceTo(R), r = e.projectionMatrix.elements, a = n.projectionMatrix.elements, o = r[14] / (r[10] - 1), s = r[14] / (r[10] + 1), l = (r[9] + 1) / r[5], c = (r[9] - 1) / r[5], u = (r[8] - 1) / r[0], h = (a[8] + 1) / a[0], d = o * u, p = o * h, f = i / (-u + h), m = f * -u; e.matrixWorld.decompose(t.position, t.quaternion, t.scale), t.translateX(m), t.translateZ(f), t.matrixWorld.compose(t.position, t.quaternion, t.scale), t.matrixWorldInverse.copy(t.matrixWorld).invert(); const g = o + f, v = s + f, _ = d - m, y = p + (i - m), x = l * s / v * g, b = c * s / v * g; t.projectionMatrix.makePerspective(_, y, x, b, g, v) }(S, b, w) : S.projectionMatrix.copy(b.projectionMatrix) }, this.getCamera = function () { return S }, this.getFoveation = function () { if (null !== h || null !== d) return s }, this.setFoveation = function (t) { s = t, null !== h && (h.fixedFoveation = t), null !== d && void 0 !== d.fixedFoveation && (d.fixedFoveation = t) }, this.getPlanes = function () { return y }; let O = null; const I = new Sr; I.setAnimationLoop((function (e, i) { if (c = i.getViewerPose(l || a), p = i, null !== c) { const e = c.views; null !== d && (t.setRenderTargetFramebuffer(g, d.framebuffer), t.setRenderTarget(g)); let n = !1; e.length !== S.cameras.length && (S.cameras.length = 0, n = !0); for (let i = 0; i < e.length; i++) { const r = e[i]; let a = null; if (null !== d) a = d.getViewport(r); else { const e = u.getViewSubImage(h, r); a = e.viewport, 0 === i && (t.setRenderTargetTextures(g, e.colorTexture, h.ignoreDepthValues ? void 0 : e.depthStencilTexture), t.setRenderTarget(g)) } let o = M[i]; void 0 === o && (o = new dr, o.layers.enable(i), o.viewport = new on, M[i] = o), o.matrix.fromArray(r.transform.matrix), o.projectionMatrix.fromArray(r.projectionMatrix), o.viewport.set(a.x, a.y, a.width, a.height), 0 === i && S.matrix.copy(o.matrix), !0 === n && S.cameras.push(o) } } for (let t = 0; t < v.length; t++) { const e = _[t], n = v[t]; null !== e && void 0 !== n && n.update(e, i, l || a) } if (O && O(e, i), i.detectedPlanes) { n.dispatchEvent({ type: "planesdetected", data: i.detectedPlanes }); let t = null; for (const e of y) i.detectedPlanes.has(e) || (null === t && (t = []), t.push(e)); if (null !== t) for (const e of t) y.delete(e), x.delete(e), n.dispatchEvent({ type: "planeremoved", data: e }); for (const t of i.detectedPlanes) if (y.has(t)) { const e = x.get(t); t.lastChangedTime > e && (x.set(t, t.lastChangedTime), n.dispatchEvent({ type: "planechanged", data: t })) } else y.add(t), x.set(t, i.lastChangedTime), n.dispatchEvent({ type: "planeadded", data: t }) } p = null })), this.setAnimationLoop = function (t) { O = t }, this.dispose = function () { } } } function rs(t, e) { function n(n, i) { n.opacity.value = i.opacity, i.color && n.diffuse.value.copy(i.color), i.emissive && n.emissive.value.copy(i.emissive).multiplyScalar(i.emissiveIntensity), i.map && (n.map.value = i.map), i.alphaMap && (n.alphaMap.value = i.alphaMap), i.bumpMap && (n.bumpMap.value = i.bumpMap, n.bumpScale.value = i.bumpScale, i.side === m && (n.bumpScale.value *= -1)), i.displacementMap && (n.displacementMap.value = i.displacementMap, n.displacementScale.value = i.displacementScale, n.displacementBias.value = i.displacementBias), i.emissiveMap && (n.emissiveMap.value = i.emissiveMap), i.normalMap && (n.normalMap.value = i.normalMap, n.normalScale.value.copy(i.normalScale), i.side === m && n.normalScale.value.negate()), i.specularMap && (n.specularMap.value = i.specularMap), i.alphaTest > 0 && (n.alphaTest.value = i.alphaTest); const r = e.get(i).envMap; if (r && (n.envMap.value = r, n.flipEnvMap.value = r.isCubeTexture && !1 === r.isRenderTargetTexture ? -1 : 1, n.reflectivity.value = i.reflectivity, n.ior.value = i.ior, n.refractionRatio.value = i.refractionRatio), i.lightMap) { n.lightMap.value = i.lightMap; const e = !0 === t.useLegacyLights ? Math.PI : 1; n.lightMapIntensity.value = i.lightMapIntensity * e } let a, o; i.aoMap && (n.aoMap.value = i.aoMap, n.aoMapIntensity.value = i.aoMapIntensity), i.map ? a = i.map : i.specularMap ? a = i.specularMap : i.displacementMap ? a = i.displacementMap : i.normalMap ? a = i.normalMap : i.bumpMap ? a = i.bumpMap : i.roughnessMap ? a = i.roughnessMap : i.metalnessMap ? a = i.metalnessMap : i.alphaMap ? a = i.alphaMap : i.emissiveMap ? a = i.emissiveMap : i.clearcoatMap ? a = i.clearcoatMap : i.clearcoatNormalMap ? a = i.clearcoatNormalMap : i.clearcoatRoughnessMap ? a = i.clearcoatRoughnessMap : i.iridescenceMap ? a = i.iridescenceMap : i.iridescenceThicknessMap ? a = i.iridescenceThicknessMap : i.specularIntensityMap ? a = i.specularIntensityMap : i.specularColorMap ? a = i.specularColorMap : i.transmissionMap ? a = i.transmissionMap : i.thicknessMap ? a = i.thicknessMap : i.sheenColorMap ? a = i.sheenColorMap : i.sheenRoughnessMap && (a = i.sheenRoughnessMap), void 0 !== a && (a.isWebGLRenderTarget && (a = a.texture), !0 === a.matrixAutoUpdate && a.updateMatrix(), n.uvTransform.value.copy(a.matrix)), i.aoMap ? o = i.aoMap : i.lightMap && (o = i.lightMap), void 0 !== o && (o.isWebGLRenderTarget && (o = o.texture), !0 === o.matrixAutoUpdate && o.updateMatrix(), n.uv2Transform.value.copy(o.matrix)) } return { refreshFogUniforms: function (e, n) { n.color.getRGB(e.fogColor.value, lr(t)), n.isFog ? (e.fogNear.value = n.near, e.fogFar.value = n.far) : n.isFogExp2 && (e.fogDensity.value = n.density) }, refreshMaterialUniforms: function (t, i, r, a, o) { i.isMeshBasicMaterial || i.isMeshLambertMaterial ? n(t, i) : i.isMeshToonMaterial ? (n(t, i), function (t, e) { e.gradientMap && (t.gradientMap.value = e.gradientMap) }(t, i)) : i.isMeshPhongMaterial ? (n(t, i), function (t, e) { t.specular.value.copy(e.specular), t.shininess.value = Math.max(e.shininess, 1e-4) }(t, i)) : i.isMeshStandardMaterial ? (n(t, i), function (t, n) { t.roughness.value = n.roughness, t.metalness.value = n.metalness, n.roughnessMap && (t.roughnessMap.value = n.roughnessMap); n.metalnessMap && (t.metalnessMap.value = n.metalnessMap); const i = e.get(n).envMap; i && (t.envMapIntensity.value = n.envMapIntensity) }(t, i), i.isMeshPhysicalMaterial && function (t, e, n) { t.ior.value = e.ior, e.sheen > 0 && (t.sheenColor.value.copy(e.sheenColor).multiplyScalar(e.sheen), t.sheenRoughness.value = e.sheenRoughness, e.sheenColorMap && (t.sheenColorMap.value = e.sheenColorMap), e.sheenRoughnessMap && (t.sheenRoughnessMap.value = e.sheenRoughnessMap)); e.clearcoat > 0 && (t.clearcoat.value = e.clearcoat, t.clearcoatRoughness.value = e.clearcoatRoughness, e.clearcoatMap && (t.clearcoatMap.value = e.clearcoatMap), e.clearcoatRoughnessMap && (t.clearcoatRoughnessMap.value = e.clearcoatRoughnessMap), e.clearcoatNormalMap && (t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale), t.clearcoatNormalMap.value = e.clearcoatNormalMap, e.side === m && t.clearcoatNormalScale.value.negate())); e.iridescence > 0 && (t.iridescence.value = e.iridescence, t.iridescenceIOR.value = e.iridescenceIOR, t.iridescenceThicknessMinimum.value = e.iridescenceThicknessRange[0], t.iridescenceThicknessMaximum.value = e.iridescenceThicknessRange[1], e.iridescenceMap && (t.iridescenceMap.value = e.iridescenceMap), e.iridescenceThicknessMap && (t.iridescenceThicknessMap.value = e.iridescenceThicknessMap)); e.transmission > 0 && (t.transmission.value = e.transmission, t.transmissionSamplerMap.value = n.texture, t.transmissionSamplerSize.value.set(n.width, n.height), e.transmissionMap && (t.transmissionMap.value = e.transmissionMap), t.thickness.value = e.thickness, e.thicknessMap && (t.thicknessMap.value = e.thicknessMap), t.attenuationDistance.value = e.attenuationDistance, t.attenuationColor.value.copy(e.attenuationColor)); t.specularIntensity.value = e.specularIntensity, t.specularColor.value.copy(e.specularColor), e.specularIntensityMap && (t.specularIntensityMap.value = e.specularIntensityMap); e.specularColorMap && (t.specularColorMap.value = e.specularColorMap) }(t, i, o)) : i.isMeshMatcapMaterial ? (n(t, i), function (t, e) { e.matcap && (t.matcap.value = e.matcap) }(t, i)) : i.isMeshDepthMaterial ? n(t, i) : i.isMeshDistanceMaterial ? (n(t, i), function (t, e) { t.referencePosition.value.copy(e.referencePosition), t.nearDistance.value = e.nearDistance, t.farDistance.value = e.farDistance }(t, i)) : i.isMeshNormalMaterial ? n(t, i) : i.isLineBasicMaterial ? (function (t, e) { t.diffuse.value.copy(e.color), t.opacity.value = e.opacity }(t, i), i.isLineDashedMaterial && function (t, e) { t.dashSize.value = e.dashSize, t.totalSize.value = e.dashSize + e.gapSize, t.scale.value = e.scale }(t, i)) : i.isPointsMaterial ? function (t, e, n, i) { t.diffuse.value.copy(e.color), t.opacity.value = e.opacity, t.size.value = e.size * n, t.scale.value = .5 * i, e.map && (t.map.value = e.map); e.alphaMap && (t.alphaMap.value = e.alphaMap); e.alphaTest > 0 && (t.alphaTest.value = e.alphaTest); let r; e.map ? r = e.map : e.alphaMap && (r = e.alphaMap); void 0 !== r && (!0 === r.matrixAutoUpdate && r.updateMatrix(), t.uvTransform.value.copy(r.matrix)) }(t, i, r, a) : i.isSpriteMaterial ? function (t, e) { t.diffuse.value.copy(e.color), t.opacity.value = e.opacity, t.rotation.value = e.rotation, e.map && (t.map.value = e.map); e.alphaMap && (t.alphaMap.value = e.alphaMap); e.alphaTest > 0 && (t.alphaTest.value = e.alphaTest); let n; e.map ? n = e.map : e.alphaMap && (n = e.alphaMap); void 0 !== n && (!0 === n.matrixAutoUpdate && n.updateMatrix(), t.uvTransform.value.copy(n.matrix)) }(t, i) : i.isShadowMaterial ? (t.color.value.copy(i.color), t.opacity.value = i.opacity) : i.isShaderMaterial && (i.uniformsNeedUpdate = !1) } } } function as(t, e, n, i) { let r = {}, a = {}, o = []; const s = n.isWebGL2 ? t.getParameter(35375) : 0; function l(t, e, n) { const i = t.value; if (void 0 === n[e]) { if ("number" == typeof i) n[e] = i; else { const t = Array.isArray(i) ? i : [i], r = []; for (let e = 0; e < t.length; e++)r.push(t[e].clone()); n[e] = r } return !0 } if ("number" == typeof i) { if (n[e] !== i) return n[e] = i, !0 } else { const t = Array.isArray(n[e]) ? n[e] : [n[e]], r = Array.isArray(i) ? i : [i]; for (let e = 0; e < t.length; e++) { const n = t[e]; if (!1 === n.equals(r[e])) return n.copy(r[e]), !0 } } return !1 } function c(t) { const e = { boundary: 0, storage: 0 }; return "number" == typeof t ? (e.boundary = 4, e.storage = 4) : t.isVector2 ? (e.boundary = 8, e.storage = 8) : t.isVector3 || t.isColor ? (e.boundary = 16, e.storage = 12) : t.isVector4 ? (e.boundary = 16, e.storage = 16) : t.isMatrix3 ? (e.boundary = 48, e.storage = 48) : t.isMatrix4 ? (e.boundary = 64, e.storage = 64) : t.isTexture ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.") : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", t), e } function u(e) { const n = e.target; n.removeEventListener("dispose", u); const i = o.indexOf(n.__bindingPointIndex); o.splice(i, 1), t.deleteBuffer(r[n.id]), delete r[n.id], delete a[n.id] } return { bind: function (t, e) { const n = e.program; i.uniformBlockBinding(t, n) }, update: function (n, h) { let d = r[n.id]; void 0 === d && (!function (t) { const e = t.uniforms; let n = 0; const i = 16; let r = 0; for (let t = 0, a = e.length; t < a; t++) { const a = e[t], o = { boundary: 0, storage: 0 }, s = Array.isArray(a.value) ? a.value : [a.value]; for (let t = 0, e = s.length; t < e; t++) { const e = c(s[t]); o.boundary += e.boundary, o.storage += e.storage } if (a.__data = new Float32Array(o.storage / Float32Array.BYTES_PER_ELEMENT), a.__offset = n, t > 0) { r = n % i; 0 !== r && i - r - o.boundary < 0 && (n += i - r, a.__offset = n) } n += o.storage } r = n % i, r > 0 && (n += i - r); t.__size = n, t.__cache = {} }(n), d = function (e) { const n = function () { for (let t = 0; t < s; t++)if (-1 === o.indexOf(t)) return o.push(t), t; return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0 }(); e.__bindingPointIndex = n; const i = t.createBuffer(), r = e.__size, a = e.usage; return t.bindBuffer(35345, i), t.bufferData(35345, r, a), t.bindBuffer(35345, null), t.bindBufferBase(35345, n, i), i }(n), r[n.id] = d, n.addEventListener("dispose", u)); const p = h.program; i.updateUBOMapping(n, p); const f = e.render.frame; a[n.id] !== f && (!function (e) { const n = r[e.id], i = e.uniforms, a = e.__cache; t.bindBuffer(35345, n); for (let e = 0, n = i.length; e < n; e++) { const n = i[e]; if (!0 === l(n, e, a)) { const e = n.__offset, i = Array.isArray(n.value) ? n.value : [n.value]; let r = 0; for (let a = 0; a < i.length; a++) { const o = i[a], s = c(o); "number" == typeof o ? (n.__data[0] = o, t.bufferSubData(35345, e + r, n.__data)) : o.isMatrix3 ? (n.__data[0] = o.elements[0], n.__data[1] = o.elements[1], n.__data[2] = o.elements[2], n.__data[3] = o.elements[0], n.__data[4] = o.elements[3], n.__data[5] = o.elements[4], n.__data[6] = o.elements[5], n.__data[7] = o.elements[0], n.__data[8] = o.elements[6], n.__data[9] = o.elements[7], n.__data[10] = o.elements[8], n.__data[11] = o.elements[0]) : (o.toArray(n.__data, r), r += s.storage / Float32Array.BYTES_PER_ELEMENT) } t.bufferSubData(35345, e, n.__data) } } t.bindBuffer(35345, null) }(n), a[n.id] = f) }, dispose: function () { for (const e in r) t.deleteBuffer(r[e]); o = [], r = {}, a = {} } } } function os(t = {}) { this.isWebGLRenderer = !0; const e = void 0 !== t.canvas ? t.canvas : function () { const t = Be("canvas"); return t.style.display = "block", t }(), n = void 0 !== t.context ? t.context : null, i = void 0 === t.depth || t.depth, r = void 0 === t.stencil || t.stencil, o = void 0 !== t.antialias && t.antialias, s = void 0 === t.premultipliedAlpha || t.premultipliedAlpha, l = void 0 !== t.preserveDrawingBuffer && t.preserveDrawingBuffer, c = void 0 !== t.powerPreference ? t.powerPreference : "default", u = void 0 !== t.failIfMajorPerformanceCaveat && t.failIfMajorPerformanceCaveat; let h; h = null !== n ? n.getContextAttributes().alpha : void 0 !== t.alpha && t.alpha; let d = null, p = null; const v = [], _ = []; this.domElement = e, this.debug = { checkShaderErrors: !0 }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this.outputEncoding = fe, this.useLegacyLights = !0, this.toneMapping = Z, this.toneMappingExposure = 1; const y = this; let x = !1, b = 0, w = 0, M = null, S = -1, E = null; const T = new on, A = new on; let C = null, L = e.width, P = e.height, R = 1, D = null, O = null; const I = new on(0, 0, L, P), N = new on(0, 0, L, P); let k = !1; const z = new Mr; let U = !1, F = !1, B = null; const j = new zn, G = new Ge, H = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: !0 }; function V() { return null === M ? R : 1 } let W, q, X, Y, $, J, K, Q, tt, et, nt, it, rt, at, ot, st, lt, ct, ut, ht, dt, pt, ft, vt, _t = n; function yt(t, n) { for (let i = 0; i < t.length; i++) { const r = t[i], a = e.getContext(r, n); if (null !== a) return a } return null } try { const t = { alpha: !0, depth: i, stencil: r, antialias: o, premultipliedAlpha: s, preserveDrawingBuffer: l, powerPreference: c, failIfMajorPerformanceCaveat: u }; if ("setAttribute" in e && e.setAttribute("data-engine", `three.js r${a}`), e.addEventListener("webglcontextlost", St, !1), e.addEventListener("webglcontextrestored", Et, !1), e.addEventListener("webglcontextcreationerror", Tt, !1), null === _t) { const e = ["webgl2", "webgl", "experimental-webgl"]; if (!0 === y.isWebGL1Renderer && e.shift(), _t = yt(e, t), null === _t) throw yt(e) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.") } void 0 === _t.getShaderPrecisionFormat && (_t.getShaderPrecisionFormat = function () { return { rangeMin: 1, rangeMax: 1, precision: 1 } }) } catch (t) { throw console.error("THREE.WebGLRenderer: " + t.message), t } function xt() { W = new ta(_t), q = new Ir(_t, W, t), W.init(q), pt = new Jo(_t, W, q), X = new $o(_t, W, q), Y = new ia, $ = new Oo, J = new Zo(_t, W, X, $, q, pt, Y), K = new kr(y), Q = new Qr(y), tt = new Er(_t, q), ft = new Dr(_t, W, tt, q), et = new ea(_t, tt, Y, ft), nt = new sa(_t, et, tt, Y), ut = new oa(_t, q, J), st = new Nr($), it = new Do(y, K, Q, W, q, ft, st), rt = new rs(y, $), at = new zo, ot = new Ho(W, q), ct = new Rr(y, K, Q, X, nt, h, s), lt = new Yo(y, nt, q), vt = new as(_t, Y, q, X), ht = new Or(_t, W, Y, q), dt = new na(_t, W, Y, q), Y.programs = it.programs, y.capabilities = q, y.extensions = W, y.properties = $, y.renderLists = at, y.shadowMap = lt, y.state = X, y.info = Y } xt(); const bt = new is(y, _t); function St(t) { t.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), x = !0 } function Et() { console.log("THREE.WebGLRenderer: Context Restored."), x = !1; const t = Y.autoReset, e = lt.enabled, n = lt.autoUpdate, i = lt.needsUpdate, r = lt.type; xt(), Y.autoReset = t, lt.enabled = e, lt.autoUpdate = n, lt.needsUpdate = i, lt.type = r } function Tt(t) { console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", t.statusMessage) } function At(t) { const e = t.target; e.removeEventListener("dispose", At), function (t) { (function (t) { const e = $.get(t).programs; void 0 !== e && (e.forEach((function (t) { it.releaseProgram(t) })), t.isShaderMaterial && it.releaseShaderCache(t)) })(t), $.remove(t) }(e) } this.xr = bt, this.getContext = function () { return _t }, this.getContextAttributes = function () { return _t.getContextAttributes() }, this.forceContextLoss = function () { const t = W.get("WEBGL_lose_context"); t && t.loseContext() }, this.forceContextRestore = function () { const t = W.get("WEBGL_lose_context"); t && t.restoreContext() }, this.getPixelRatio = function () { return R }, this.setPixelRatio = function (t) { void 0 !== t && (R = t, this.setSize(L, P, !1)) }, this.getSize = function (t) { return t.set(L, P) }, this.setSize = function (t, n, i = !0) { bt.isPresenting ? console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.") : (L = t, P = n, e.width = Math.floor(t * R), e.height = Math.floor(n * R), !0 === i && (e.style.width = t + "px", e.style.height = n + "px"), this.setViewport(0, 0, t, n)) }, this.getDrawingBufferSize = function (t) { return t.set(L * R, P * R).floor() }, this.setDrawingBufferSize = function (t, n, i) { L = t, P = n, R = i, e.width = Math.floor(t * i), e.height = Math.floor(n * i), this.setViewport(0, 0, t, n) }, this.getCurrentViewport = function (t) { return t.copy(T) }, this.getViewport = function (t) { return t.copy(I) }, this.setViewport = function (t, e, n, i) { t.isVector4 ? I.set(t.x, t.y, t.z, t.w) : I.set(t, e, n, i), X.viewport(T.copy(I).multiplyScalar(R).floor()) }, this.getScissor = function (t) { return t.copy(N) }, this.setScissor = function (t, e, n, i) { t.isVector4 ? N.set(t.x, t.y, t.z, t.w) : N.set(t, e, n, i), X.scissor(A.copy(N).multiplyScalar(R).floor()) }, this.getScissorTest = function () { return k }, this.setScissorTest = function (t) { X.setScissorTest(k = t) }, this.setOpaqueSort = function (t) { D = t }, this.setTransparentSort = function (t) { O = t }, this.getClearColor = function (t) { return t.copy(ct.getClearColor()) }, this.setClearColor = function () { ct.setClearColor.apply(ct, arguments) }, this.getClearAlpha = function () { return ct.getClearAlpha() }, this.setClearAlpha = function () { ct.setClearAlpha.apply(ct, arguments) }, this.clear = function (t = !0, e = !0, n = !0) { let i = 0; t && (i |= 16384), e && (i |= 256), n && (i |= 1024), _t.clear(i) }, this.clearColor = function () { this.clear(!0, !1, !1) }, this.clearDepth = function () { this.clear(!1, !0, !1) }, this.clearStencil = function () { this.clear(!1, !1, !0) }, this.dispose = function () { e.removeEventListener("webglcontextlost", St, !1), e.removeEventListener("webglcontextrestored", Et, !1), e.removeEventListener("webglcontextcreationerror", Tt, !1), at.dispose(), ot.dispose(), $.dispose(), K.dispose(), Q.dispose(), nt.dispose(), ft.dispose(), vt.dispose(), it.dispose(), bt.dispose(), bt.removeEventListener("sessionstart", Pt), bt.removeEventListener("sessionend", Rt), B && (B.dispose(), B = null), Dt.stop() }, this.renderBufferDirect = function (t, e, n, i, r, a) { null === e && (e = H); const o = r.isMesh && r.matrixWorld.determinant() < 0, s = function (t, e, n, i, r) { !0 !== e.isScene && (e = H); J.resetTextureUnits(); const a = e.fog, o = i.isMeshStandardMaterial ? e.environment : null, s = null === M ? y.outputEncoding : !0 === M.isXRRenderTarget ? M.texture.encoding : fe, l = (i.isMeshStandardMaterial ? Q : K).get(i.envMap || o), c = !0 === i.vertexColors && !!n.attributes.color && 4 === n.attributes.color.itemSize, u = !!i.normalMap && !!n.attributes.tangent, h = !!n.morphAttributes.position, d = !!n.morphAttributes.normal, f = !!n.morphAttributes.color, m = i.toneMapped ? y.toneMapping : Z, g = n.morphAttributes.position || n.morphAttributes.normal || n.morphAttributes.color, v = void 0 !== g ? g.length : 0, _ = $.get(i), x = p.state.lights; if (!0 === U && (!0 === F || t !== E)) { const e = t === E && i.id === S; st.setState(i, t, e) } let b = !1; i.version === _.__version ? _.needsLights && _.lightsStateVersion !== x.state.version || _.outputEncoding !== s || r.isInstancedMesh && !1 === _.instancing ? b = !0 : r.isInstancedMesh || !0 !== _.instancing ? r.isSkinnedMesh && !1 === _.skinning ? b = !0 : r.isSkinnedMesh || !0 !== _.skinning ? _.envMap !== l || !0 === i.fog && _.fog !== a ? b = !0 : void 0 === _.numClippingPlanes || _.numClippingPlanes === st.numPlanes && _.numIntersection === st.numIntersection ? (_.vertexAlphas !== c || _.vertexTangents !== u || _.morphTargets !== h || _.morphNormals !== d || _.morphColors !== f || _.toneMapping !== m || !0 === q.isWebGL2 && _.morphTargetsCount !== v) && (b = !0) : b = !0 : b = !0 : b = !0 : (b = !0, _.__version = i.version); let w = _.currentProgram; !0 === b && (w = zt(i, e, r)); let T = !1, A = !1, C = !1; const L = w.getUniforms(), D = _.uniforms; X.useProgram(w.program) && (T = !0, A = !0, C = !0); i.id !== S && (S = i.id, A = !0); if (T || E !== t) { if (L.setValue(_t, "projectionMatrix", t.projectionMatrix), q.logarithmicDepthBuffer && L.setValue(_t, "logDepthBufFC", 2 / (Math.log(t.far + 1) / Math.LN2)), E !== t && (E = t, A = !0, C = !0), i.isShaderMaterial || i.isMeshPhongMaterial || i.isMeshToonMaterial || i.isMeshStandardMaterial || i.envMap) { const e = L.map.cameraPosition; void 0 !== e && e.setValue(_t, G.setFromMatrixPosition(t.matrixWorld)) } (i.isMeshPhongMaterial || i.isMeshToonMaterial || i.isMeshLambertMaterial || i.isMeshBasicMaterial || i.isMeshStandardMaterial || i.isShaderMaterial) && L.setValue(_t, "isOrthographic", !0 === t.isOrthographicCamera), (i.isMeshPhongMaterial || i.isMeshToonMaterial || i.isMeshLambertMaterial || i.isMeshBasicMaterial || i.isMeshStandardMaterial || i.isShaderMaterial || i.isShadowMaterial || r.isSkinnedMesh) && L.setValue(_t, "viewMatrix", t.matrixWorldInverse) } if (r.isSkinnedMesh) { L.setOptional(_t, r, "bindMatrix"), L.setOptional(_t, r, "bindMatrixInverse"); const t = r.skeleton; t && (q.floatVertexTextures ? (null === t.boneTexture && t.computeBoneTexture(), L.setValue(_t, "boneTexture", t.boneTexture, J), L.setValue(_t, "boneTextureSize", t.boneTextureSize)) : console.warn("THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.")) } const O = n.morphAttributes; (void 0 !== O.position || void 0 !== O.normal || void 0 !== O.color && !0 === q.isWebGL2) && ut.update(r, n, w); (A || _.receiveShadow !== r.receiveShadow) && (_.receiveShadow = r.receiveShadow, L.setValue(_t, "receiveShadow", r.receiveShadow)); i.isMeshGouraudMaterial && null !== i.envMap && (D.envMap.value = l, D.flipEnvMap.value = l.isCubeTexture && !1 === l.isRenderTargetTexture ? -1 : 1); A && (L.setValue(_t, "toneMappingExposure", y.toneMappingExposure), _.needsLights && (N = C, (I = D).ambientLightColor.needsUpdate = N, I.lightProbe.needsUpdate = N, I.directionalLights.needsUpdate = N, I.directionalLightShadows.needsUpdate = N, I.pointLights.needsUpdate = N, I.pointLightShadows.needsUpdate = N, I.spotLights.needsUpdate = N, I.spotLightShadows.needsUpdate = N, I.rectAreaLights.needsUpdate = N, I.hemisphereLights.needsUpdate = N), a && !0 === i.fog && rt.refreshFogUniforms(D, a), rt.refreshMaterialUniforms(D, i, R, P, B), ho.upload(_t, _.uniformsList, D, J)); var I, N; i.isShaderMaterial && !0 === i.uniformsNeedUpdate && (ho.upload(_t, _.uniformsList, D, J), i.uniformsNeedUpdate = !1); i.isSpriteMaterial && L.setValue(_t, "center", r.center); if (L.setValue(_t, "modelViewMatrix", r.modelViewMatrix), L.setValue(_t, "normalMatrix", r.normalMatrix), L.setValue(_t, "modelMatrix", r.matrixWorld), i.isShaderMaterial || i.isRawShaderMaterial) { const t = i.uniformsGroups; for (let e = 0, n = t.length; e < n; e++)if (q.isWebGL2) { const n = t[e]; vt.update(n, w), vt.bind(n, w) } else console.warn("THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.") } return w }(t, e, n, i, r); X.setMaterial(i, o); let l = n.index, c = 1; !0 === i.wireframe && (l = et.getWireframeAttribute(n), c = 2); const u = n.drawRange, h = n.attributes.position; let d = u.start * c, f = (u.start + u.count) * c; null !== a && (d = Math.max(d, a.start * c), f = Math.min(f, (a.start + a.count) * c)), null !== l ? (d = Math.max(d, 0), f = Math.min(f, l.count)) : null != h && (d = Math.max(d, 0), f = Math.min(f, h.count)); const m = f - d; if (m < 0 || m === 1 / 0) return; let g; ft.setup(r, i, s, n, l); let v = ht; if (null !== l && (g = tt.get(l), v = dt, v.setIndex(g)), r.isMesh) !0 === i.wireframe ? (X.setLineWidth(i.wireframeLinewidth * V()), v.setMode(1)) : v.setMode(4); else if (r.isLine) { let t = i.linewidth; void 0 === t && (t = 1), X.setLineWidth(t * V()), r.isLineSegments ? v.setMode(1) : r.isLineLoop ? v.setMode(2) : v.setMode(3) } else r.isPoints ? v.setMode(0) : r.isSprite && v.setMode(4); if (r.isInstancedMesh) v.renderInstances(d, m, r.count); else if (n.isInstancedBufferGeometry) { const t = void 0 !== n._maxInstanceCount ? n._maxInstanceCount : 1 / 0, e = Math.min(n.instanceCount, t); v.renderInstances(d, m, e) } else v.render(d, m) }, this.compile = function (t, e) { function n(t, e, n) { !0 === t.transparent && t.side === g && !1 === t.forceSinglePass ? (t.side = m, t.needsUpdate = !0, zt(t, e, n), t.side = f, t.needsUpdate = !0, zt(t, e, n), t.side = g) : zt(t, e, n) } p = ot.get(t), p.init(), _.push(p), t.traverseVisible((function (t) { t.isLight && t.layers.test(e.layers) && (p.pushLight(t), t.castShadow && p.pushShadow(t)) })), p.setupLights(y.useLegacyLights), t.traverse((function (e) { const i = e.material; if (i) if (Array.isArray(i)) for (let r = 0; r < i.length; r++) { n(i[r], t, e) } else n(i, t, e) })), _.pop(), p = null }; let Lt = null; function Pt() { Dt.stop() } function Rt() { Dt.start() } const Dt = new Sr; function Ot(t, e, n, i) { if (!1 === t.visible) return; if (t.layers.test(e.layers)) if (t.isGroup) n = t.renderOrder; else if (t.isLOD) !0 === t.autoUpdate && t.update(e); else if (t.isLight) p.pushLight(t), t.castShadow && p.pushShadow(t); else if (t.isSprite) { if (!t.frustumCulled || z.intersectsSprite(t)) { i && G.setFromMatrixPosition(t.matrixWorld).applyMatrix4(j); const e = nt.update(t), r = t.material; r.visible && d.push(t, e, r, n, G.z, null) } } else if ((t.isMesh || t.isLine || t.isPoints) && (t.isSkinnedMesh && t.skeleton.frame !== Y.render.frame && (t.skeleton.update(), t.skeleton.frame = Y.render.frame), !t.frustumCulled || z.intersectsObject(t))) { i && G.setFromMatrixPosition(t.matrixWorld).applyMatrix4(j); const e = nt.update(t), r = t.material; if (Array.isArray(r)) { const i = e.groups; for (let a = 0, o = i.length; a < o; a++) { const o = i[a], s = r[o.materialIndex]; s && s.visible && d.push(t, e, s, n, G.z, o) } } else r.visible && d.push(t, e, r, n, G.z, null) } const r = t.children; for (let t = 0, a = r.length; t < a; t++)Ot(r[t], e, n, i) } function It(t, e, n, i) { const r = t.opaque, a = t.transmissive, s = t.transparent; p.setupLightsView(n), !0 === U && st.setGlobalState(y.clippingPlanes, n), a.length > 0 && function (t, e, n) { const i = q.isWebGL2; null === B && (B = new sn(1024, 1024, { generateMipmaps: !0, type: W.has("EXT_color_buffer_half_float") ? Mt : gt, minFilter: mt, samples: i && !0 === o ? 4 : 0 })); const r = y.getRenderTarget(); y.setRenderTarget(B), y.clear(); const a = y.toneMapping; y.toneMapping = Z, Nt(t, e, n), y.toneMapping = a, J.updateMultisampleRenderTarget(B), J.updateRenderTargetMipmap(B), y.setRenderTarget(r) }(r, e, n), i && X.viewport(T.copy(i)), r.length > 0 && Nt(r, e, n), a.length > 0 && Nt(a, e, n), s.length > 0 && Nt(s, e, n), X.buffers.depth.setTest(!0), X.buffers.depth.setMask(!0), X.buffers.color.setMask(!0), X.setPolygonOffset(!1) } function Nt(t, e, n) { const i = !0 === e.isScene ? e.overrideMaterial : null; for (let r = 0, a = t.length; r < a; r++) { const a = t[r], o = a.object, s = a.geometry, l = null === i ? a.material : i, c = a.group; o.layers.test(n.layers) && kt(o, e, n, s, l, c) } } function kt(t, e, n, i, r, a) { t.onBeforeRender(y, e, n, i, r, a), t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse, t.matrixWorld), t.normalMatrix.getNormalMatrix(t.modelViewMatrix), r.onBeforeRender(y, e, n, i, t, a), !0 === r.transparent && r.side === g && !1 === r.forceSinglePass ? (r.side = m, r.needsUpdate = !0, y.renderBufferDirect(n, e, i, r, t, a), r.side = f, r.needsUpdate = !0, y.renderBufferDirect(n, e, i, r, t, a), r.side = g) : y.renderBufferDirect(n, e, i, r, t, a), t.onAfterRender(y, e, n, i, r, a) } function zt(t, e, n) { !0 !== e.isScene && (e = H); const i = $.get(t), r = p.state.lights, a = p.state.shadowsArray, o = r.state.version, s = it.getParameters(t, r.state, a, e, n), l = it.getProgramCacheKey(s); let c = i.programs; i.environment = t.isMeshStandardMaterial ? e.environment : null, i.fog = e.fog, i.envMap = (t.isMeshStandardMaterial ? Q : K).get(t.envMap || i.environment), void 0 === c && (t.addEventListener("dispose", At), c = new Map, i.programs = c); let u = c.get(l); if (void 0 !== u) { if (i.currentProgram === u && i.lightsStateVersion === o) return Ut(t, s), u } else s.uniforms = it.getUniforms(t), t.onBuild(n, s, y), t.onBeforeCompile(s, y), u = it.acquireProgram(s, l), c.set(l, u), i.uniforms = s.uniforms; const h = i.uniforms; (t.isShaderMaterial || t.isRawShaderMaterial) && !0 !== t.clipping || (h.clippingPlanes = st.uniform), Ut(t, s), i.needsLights = function (t) { return t.isMeshLambertMaterial || t.isMeshToonMaterial || t.isMeshPhongMaterial || t.isMeshStandardMaterial || t.isShadowMaterial || t.isShaderMaterial && !0 === t.lights }(t), i.lightsStateVersion = o, i.needsLights && (h.ambientLightColor.value = r.state.ambient, h.lightProbe.value = r.state.probe, h.directionalLights.value = r.state.directional, h.directionalLightShadows.value = r.state.directionalShadow, h.spotLights.value = r.state.spot, h.spotLightShadows.value = r.state.spotShadow, h.rectAreaLights.value = r.state.rectArea, h.ltc_1.value = r.state.rectAreaLTC1, h.ltc_2.value = r.state.rectAreaLTC2, h.pointLights.value = r.state.point, h.pointLightShadows.value = r.state.pointShadow, h.hemisphereLights.value = r.state.hemi, h.directionalShadowMap.value = r.state.directionalShadowMap, h.directionalShadowMatrix.value = r.state.directionalShadowMatrix, h.spotShadowMap.value = r.state.spotShadowMap, h.spotLightMatrix.value = r.state.spotLightMatrix, h.spotLightMap.value = r.state.spotLightMap, h.pointShadowMap.value = r.state.pointShadowMap, h.pointShadowMatrix.value = r.state.pointShadowMatrix); const d = u.getUniforms(), f = ho.seqWithValue(d.seq, h); return i.currentProgram = u, i.uniformsList = f, u } function Ut(t, e) { const n = $.get(t); n.outputEncoding = e.outputEncoding, n.instancing = e.instancing, n.skinning = e.skinning, n.morphTargets = e.morphTargets, n.morphNormals = e.morphNormals, n.morphColors = e.morphColors, n.morphTargetsCount = e.morphTargetsCount, n.numClippingPlanes = e.numClippingPlanes, n.numIntersection = e.numClipIntersection, n.vertexAlphas = e.vertexAlphas, n.vertexTangents = e.vertexTangents, n.toneMapping = e.toneMapping } Dt.setAnimationLoop((function (t) { Lt && Lt(t) })), "undefined" != typeof self && Dt.setContext(self), this.setAnimationLoop = function (t) { Lt = t, bt.setAnimationLoop(t), null === t ? Dt.stop() : Dt.start() }, bt.addEventListener("sessionstart", Pt), bt.addEventListener("sessionend", Rt), this.render = function (t, e) { if (void 0 !== e && !0 !== e.isCamera) return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera."); if (!0 === x) return; !0 === t.matrixWorldAutoUpdate && t.updateMatrixWorld(), null === e.parent && !0 === e.matrixWorldAutoUpdate && e.updateMatrixWorld(), !0 === bt.enabled && !0 === bt.isPresenting && (!0 === bt.cameraAutoUpdate && bt.updateCamera(e), e = bt.getCamera()), !0 === t.isScene && t.onBeforeRender(y, t, e, M), p = ot.get(t, _.length), p.init(), _.push(p), j.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse), z.setFromProjectionMatrix(j), F = this.localClippingEnabled, U = st.init(this.clippingPlanes, F), d = at.get(t, v.length), d.init(), v.push(d), Ot(t, e, 0, y.sortObjects), d.finish(), !0 === y.sortObjects && d.sort(D, O), !0 === U && st.beginShadows(); const n = p.state.shadowsArray; if (lt.render(n, t, e), !0 === U && st.endShadows(), !0 === this.info.autoReset && this.info.reset(), ct.render(d, t), p.setupLights(y.useLegacyLights), e.isArrayCamera) { const n = e.cameras; for (let e = 0, i = n.length; e < i; e++) { const i = n[e]; It(d, t, i, i.viewport) } } else It(d, t, e); null !== M && (J.updateMultisampleRenderTarget(M), J.updateRenderTargetMipmap(M)), !0 === t.isScene && t.onAfterRender(y, t, e), ft.resetDefaultState(), S = -1, E = null, _.pop(), p = _.length > 0 ? _[_.length - 1] : null, v.pop(), d = v.length > 0 ? v[v.length - 1] : null }, this.getActiveCubeFace = function () { return b }, this.getActiveMipmapLevel = function () { return w }, this.getRenderTarget = function () { return M }, this.setRenderTargetTextures = function (t, e, n) { $.get(t.texture).__webglTexture = e, $.get(t.depthTexture).__webglTexture = n; const i = $.get(t); i.__hasExternalTextures = !0, i.__hasExternalTextures && (i.__autoAllocateDepthBuffer = void 0 === n, i.__autoAllocateDepthBuffer || !0 === W.has("WEBGL_multisampled_render_to_texture") && (console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"), i.__useRenderToTexture = !1)) }, this.setRenderTargetFramebuffer = function (t, e) { const n = $.get(t); n.__webglFramebuffer = e, n.__useDefaultFramebuffer = void 0 === e }, this.setRenderTarget = function (t, e = 0, n = 0) { M = t, b = e, w = n; let i = !0, r = null, a = !1, o = !1; if (t) { const n = $.get(t); void 0 !== n.__useDefaultFramebuffer ? (X.bindFramebuffer(36160, null), i = !1) : void 0 === n.__webglFramebuffer ? J.setupRenderTarget(t) : n.__hasExternalTextures && J.rebindTextures(t, $.get(t.texture).__webglTexture, $.get(t.depthTexture).__webglTexture); const s = t.texture; (s.isData3DTexture || s.isDataArrayTexture || s.isCompressedArrayTexture) && (o = !0); const l = $.get(t).__webglFramebuffer; t.isWebGLCubeRenderTarget ? (r = l[e], a = !0) : r = q.isWebGL2 && t.samples > 0 && !1 === J.useMultisampledRTT(t) ? $.get(t).__webglMultisampledFramebuffer : l, T.copy(t.viewport), A.copy(t.scissor), C = t.scissorTest } else T.copy(I).multiplyScalar(R).floor(), A.copy(N).multiplyScalar(R).floor(), C = k; if (X.bindFramebuffer(36160, r) && q.drawBuffers && i && X.drawBuffers(t, r), X.viewport(T), X.scissor(A), X.setScissorTest(C), a) { const i = $.get(t.texture); _t.framebufferTexture2D(36160, 36064, 34069 + e, i.__webglTexture, n) } else if (o) { const i = $.get(t.texture), r = e || 0; _t.framebufferTextureLayer(36160, 36064, i.__webglTexture, n || 0, r) } S = -1 }, this.readRenderTargetPixels = function (t, e, n, i, r, a, o) { if (!t || !t.isWebGLRenderTarget) return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget."); let s = $.get(t).__webglFramebuffer; if (t.isWebGLCubeRenderTarget && void 0 !== o && (s = s[o]), s) { X.bindFramebuffer(36160, s); try { const o = t.texture, s = o.format, l = o.type; if (s !== Ct && pt.convert(s) !== _t.getParameter(35739)) return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format."); const c = l === Mt && (W.has("EXT_color_buffer_half_float") || q.isWebGL2 && W.has("EXT_color_buffer_float")); if (!(l === gt || pt.convert(l) === _t.getParameter(35738) || l === wt && (q.isWebGL2 || W.has("OES_texture_float") || W.has("WEBGL_color_buffer_float")) || c)) return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type."); e >= 0 && e <= t.width - i && n >= 0 && n <= t.height - r && _t.readPixels(e, n, i, r, pt.convert(s), pt.convert(l), a) } finally { const t = null !== M ? $.get(M).__webglFramebuffer : null; X.bindFramebuffer(36160, t) } } }, this.copyFramebufferToTexture = function (t, e, n = 0) { const i = Math.pow(2, -n), r = Math.floor(e.image.width * i), a = Math.floor(e.image.height * i); J.setTexture2D(e, 0), _t.copyTexSubImage2D(3553, n, 0, 0, t.x, t.y, r, a), X.unbindTexture() }, this.copyTextureToTexture = function (t, e, n, i = 0) { const r = e.image.width, a = e.image.height, o = pt.convert(n.format), s = pt.convert(n.type); J.setTexture2D(n, 0), _t.pixelStorei(37440, n.flipY), _t.pixelStorei(37441, n.premultiplyAlpha), _t.pixelStorei(3317, n.unpackAlignment), e.isDataTexture ? _t.texSubImage2D(3553, i, t.x, t.y, r, a, o, s, e.image.data) : e.isCompressedTexture ? _t.compressedTexSubImage2D(3553, i, t.x, t.y, e.mipmaps[0].width, e.mipmaps[0].height, o, e.mipmaps[0].data) : _t.texSubImage2D(3553, i, t.x, t.y, o, s, e.image), 0 === i && n.generateMipmaps && _t.generateMipmap(3553), X.unbindTexture() }, this.copyTextureToTexture3D = function (t, e, n, i, r = 0) { if (y.isWebGL1Renderer) return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2."); const a = t.max.x - t.min.x + 1, o = t.max.y - t.min.y + 1, s = t.max.z - t.min.z + 1, l = pt.convert(i.format), c = pt.convert(i.type); let u; if (i.isData3DTexture) J.setTexture3D(i, 0), u = 32879; else { if (!i.isDataArrayTexture) return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray."); J.setTexture2DArray(i, 0), u = 35866 } _t.pixelStorei(37440, i.flipY), _t.pixelStorei(37441, i.premultiplyAlpha), _t.pixelStorei(3317, i.unpackAlignment); const h = _t.getParameter(3314), d = _t.getParameter(32878), p = _t.getParameter(3316), f = _t.getParameter(3315), m = _t.getParameter(32877), g = n.isCompressedTexture ? n.mipmaps[0] : n.image; _t.pixelStorei(3314, g.width), _t.pixelStorei(32878, g.height), _t.pixelStorei(3316, t.min.x), _t.pixelStorei(3315, t.min.y), _t.pixelStorei(32877, t.min.z), n.isDataTexture || n.isData3DTexture ? _t.texSubImage3D(u, r, e.x, e.y, e.z, a, o, s, l, c, g.data) : n.isCompressedArrayTexture ? (console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."), _t.compressedTexSubImage3D(u, r, e.x, e.y, e.z, a, o, s, l, g.data)) : _t.texSubImage3D(u, r, e.x, e.y, e.z, a, o, s, l, c, g), _t.pixelStorei(3314, h), _t.pixelStorei(32878, d), _t.pixelStorei(3316, p), _t.pixelStorei(3315, f), _t.pixelStorei(32877, m), 0 === r && i.generateMipmaps && _t.generateMipmap(u), X.unbindTexture() }, this.initTexture = function (t) { t.isCubeTexture ? J.setTextureCube(t, 0) : t.isData3DTexture ? J.setTexture3D(t, 0) : t.isDataArrayTexture || t.isCompressedArrayTexture ? J.setTexture2DArray(t, 0) : J.setTexture2D(t, 0), X.unbindTexture() }, this.resetState = function () { b = 0, w = 0, M = null, X.reset(), ft.reset() }, "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this })) } Object.defineProperties(os.prototype, { physicallyCorrectLights: { get: function () { return console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."), !this.useLegacyLights }, set: function (t) { console.warn("THREE.WebGLRenderer: the property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead."), this.useLegacyLights = !t } } }); (class extends os { }).prototype.isWebGL1Renderer = !0; class ss extends bi { constructor(t) { super(), this.isLineBasicMaterial = !0, this.type = "LineBasicMaterial", this.color = new Ti(16777215), this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.fog = !0, this.setValues(t) } copy(t) { return super.copy(t), this.color.copy(t.color), this.linewidth = t.linewidth, this.linecap = t.linecap, this.linejoin = t.linejoin, this.fog = t.fog, this } } const ls = new Ge, cs = new Ge, us = new zn, hs = new kn, ds = new Cn; class ps { constructor() { this.type = "Curve", this.arcLengthDivisions = 200 } getPoint() { return console.warn("THREE.Curve: .getPoint() not implemented."), null } getPointAt(t, e) { const n = this.getUtoTmapping(t); return this.getPoint(n, e) } getPoints(t = 5) { const e = []; for (let n = 0; n <= t; n++)e.push(this.getPoint(n / t)); return e } getSpacedPoints(t = 5) { const e = []; for (let n = 0; n <= t; n++)e.push(this.getPointAt(n / t)); return e } getLength() { const t = this.getLengths(); return t[t.length - 1] } getLengths(t = this.arcLengthDivisions) { if (this.cacheArcLengths && this.cacheArcLengths.length === t + 1 && !this.needsUpdate) return this.cacheArcLengths; this.needsUpdate = !1; const e = []; let n, i = this.getPoint(0), r = 0; e.push(0); for (let a = 1; a <= t; a++)n = this.getPoint(a / t), r += n.distanceTo(i), e.push(r), i = n; return this.cacheArcLengths = e, e } updateArcLengths() { this.needsUpdate = !0, this.getLengths() } getUtoTmapping(t, e) { const n = this.getLengths(); let i = 0; const r = n.length; let a; a = e || t * n[r - 1]; let o, s = 0, l = r - 1; for (; s <= l;)if (i = Math.floor(s + (l - s) / 2), o = n[i] - a, o < 0) s = i + 1; else { if (!(o > 0)) { l = i; break } l = i - 1 } if (i = l, n[i] === a) return i / (r - 1); const c = n[i]; return (i + (a - c) / (n[i + 1] - c)) / (r - 1) } getTangent(t, e) { const n = 1e-4; let i = t - n, r = t + n; i < 0 && (i = 0), r > 1 && (r = 1); const a = this.getPoint(i), o = this.getPoint(r), s = e || (a.isVector2 ? new ke : new Ge); return s.copy(o).sub(a).normalize(), s } getTangentAt(t, e) { const n = this.getUtoTmapping(t); return this.getTangent(n, e) } computeFrenetFrames(t, e) { const n = new Ge, i = [], r = [], a = [], o = new Ge, s = new zn; for (let e = 0; e <= t; e++) { const n = e / t; i[e] = this.getTangentAt(n, new Ge) } r[0] = new Ge, a[0] = new Ge; let l = Number.MAX_VALUE; const c = Math.abs(i[0].x), u = Math.abs(i[0].y), h = Math.abs(i[0].z); c <= l && (l = c, n.set(1, 0, 0)), u <= l && (l = u, n.set(0, 1, 0)), h <= l && n.set(0, 0, 1), o.crossVectors(i[0], n).normalize(), r[0].crossVectors(i[0], o), a[0].crossVectors(i[0], r[0]); for (let e = 1; e <= t; e++) { if (r[e] = r[e - 1].clone(), a[e] = a[e - 1].clone(), o.crossVectors(i[e - 1], i[e]), o.length() > Number.EPSILON) { o.normalize(); const t = Math.acos(Pe(i[e - 1].dot(i[e]), -1, 1)); r[e].applyMatrix4(s.makeRotationAxis(o, t)) } a[e].crossVectors(i[e], r[e]) } if (!0 === e) { let e = Math.acos(Pe(r[0].dot(r[t]), -1, 1)); e /= t, i[0].dot(o.crossVectors(r[0], r[t])) > 0 && (e = -e); for (let n = 1; n <= t; n++)r[n].applyMatrix4(s.makeRotationAxis(i[n], e * n)), a[n].crossVectors(i[n], r[n]) } return { tangents: i, normals: r, binormals: a } } clone() { return (new this.constructor).copy(this) } copy(t) { return this.arcLengthDivisions = t.arcLengthDivisions, this } toJSON() { const t = { metadata: { version: 4.5, type: "Curve", generator: "Curve.toJSON" } }; return t.arcLengthDivisions = this.arcLengthDivisions, t.type = this.type, t } fromJSON(t) { return this.arcLengthDivisions = t.arcLengthDivisions, this } } class fs extends ps { constructor(t = 0, e = 0, n = 1, i = 1, r = 0, a = 2 * Math.PI, o = !1, s = 0) { super(), this.isEllipseCurve = !0, this.type = "EllipseCurve", this.aX = t, this.aY = e, this.xRadius = n, this.yRadius = i, this.aStartAngle = r, this.aEndAngle = a, this.aClockwise = o, this.aRotation = s } getPoint(t, e) { const n = e || new ke, i = 2 * Math.PI; let r = this.aEndAngle - this.aStartAngle; const a = Math.abs(r) < Number.EPSILON; for (; r < 0;)r += i; for (; r > i;)r -= i; r < Number.EPSILON && (r = a ? 0 : i), !0 !== this.aClockwise || a || (r === i ? r = -i : r -= i); const o = this.aStartAngle + t * r; let s = this.aX + this.xRadius * Math.cos(o), l = this.aY + this.yRadius * Math.sin(o); if (0 !== this.aRotation) { const t = Math.cos(this.aRotation), e = Math.sin(this.aRotation), n = s - this.aX, i = l - this.aY; s = n * t - i * e + this.aX, l = n * e + i * t + this.aY } return n.set(s, l) } copy(t) { return super.copy(t), this.aX = t.aX, this.aY = t.aY, this.xRadius = t.xRadius, this.yRadius = t.yRadius, this.aStartAngle = t.aStartAngle, this.aEndAngle = t.aEndAngle, this.aClockwise = t.aClockwise, this.aRotation = t.aRotation, this } toJSON() { const t = super.toJSON(); return t.aX = this.aX, t.aY = this.aY, t.xRadius = this.xRadius, t.yRadius = this.yRadius, t.aStartAngle = this.aStartAngle, t.aEndAngle = this.aEndAngle, t.aClockwise = this.aClockwise, t.aRotation = this.aRotation, t } fromJSON(t) { return super.fromJSON(t), this.aX = t.aX, this.aY = t.aY, this.xRadius = t.xRadius, this.yRadius = t.yRadius, this.aStartAngle = t.aStartAngle, this.aEndAngle = t.aEndAngle, this.aClockwise = t.aClockwise, this.aRotation = t.aRotation, this } } function ms() { let t = 0, e = 0, n = 0, i = 0; function r(r, a, o, s) { t = r, e = o, n = -3 * r + 3 * a - 2 * o - s, i = 2 * r - 2 * a + o + s } return { initCatmullRom: function (t, e, n, i, a) { r(e, n, a * (n - t), a * (i - e)) }, initNonuniformCatmullRom: function (t, e, n, i, a, o, s) { let l = (e - t) / a - (n - t) / (a + o) + (n - e) / o, c = (n - e) / o - (i - e) / (o + s) + (i - n) / s; l *= o, c *= o, r(e, n, l, c) }, calc: function (r) { const a = r * r; return t + e * r + n * a + i * (a * r) } } } const gs = new Ge, vs = new ms, _s = new ms, ys = new ms; function xs(t, e, n, i, r) { const a = .5 * (i - e), o = .5 * (r - n), s = t * t; return (2 * n - 2 * i + a + o) * (t * s) + (-3 * n + 3 * i - 2 * a - o) * s + a * t + n } function bs(t, e, n, i) { return function (t, e) { const n = 1 - t; return n * n * e }(t, e) + function (t, e) { return 2 * (1 - t) * t * e }(t, n) + function (t, e) { return t * t * e }(t, i) } function ws(t, e, n, i, r) { return function (t, e) { const n = 1 - t; return n * n * n * e }(t, e) + function (t, e) { const n = 1 - t; return 3 * n * n * t * e }(t, n) + function (t, e) { return 3 * (1 - t) * t * t * e }(t, i) + function (t, e) { return t * t * t * e }(t, r) } class Ms extends ps { constructor(t = new Ge, e = new Ge, n = new Ge, i = new Ge) { super(), this.isCubicBezierCurve3 = !0, this.type = "CubicBezierCurve3", this.v0 = t, this.v1 = e, this.v2 = n, this.v3 = i } getPoint(t, e = new Ge) { const n = e, i = this.v0, r = this.v1, a = this.v2, o = this.v3; return n.set(ws(t, i.x, r.x, a.x, o.x), ws(t, i.y, r.y, a.y, o.y), ws(t, i.z, r.z, a.z, o.z)), n } copy(t) { return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this.v3.copy(t.v3), this } toJSON() { const t = super.toJSON(); return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t.v3 = this.v3.toArray(), t } fromJSON(t) { return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this.v3.fromArray(t.v3), this } } class Ss extends ps { constructor(t = new Ge, e = new Ge, n = new Ge) { super(), this.isQuadraticBezierCurve3 = !0, this.type = "QuadraticBezierCurve3", this.v0 = t, this.v1 = e, this.v2 = n } getPoint(t, e = new Ge) { const n = e, i = this.v0, r = this.v1, a = this.v2; return n.set(bs(t, i.x, r.x, a.x), bs(t, i.y, r.y, a.y), bs(t, i.z, r.z, a.z)), n } copy(t) { return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this } toJSON() { const t = super.toJSON(); return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t } fromJSON(t) { return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this } } var Es = Object.freeze({ __proto__: null, ArcCurve: class extends fs { constructor(t, e, n, i, r, a) { super(t, e, n, n, i, r, a), this.isArcCurve = !0, this.type = "ArcCurve" } }, CatmullRomCurve3: class extends ps { constructor(t = [], e = !1, n = "centripetal", i = .5) { super(), this.isCatmullRomCurve3 = !0, this.type = "CatmullRomCurve3", this.points = t, this.closed = e, this.curveType = n, this.tension = i } getPoint(t, e = new Ge) { const n = e, i = this.points, r = i.length, a = (r - (this.closed ? 0 : 1)) * t; let o, s, l = Math.floor(a), c = a - l; this.closed ? l += l > 0 ? 0 : (Math.floor(Math.abs(l) / r) + 1) * r : 0 === c && l === r - 1 && (l = r - 2, c = 1), this.closed || l > 0 ? o = i[(l - 1) % r] : (gs.subVectors(i[0], i[1]).add(i[0]), o = gs); const u = i[l % r], h = i[(l + 1) % r]; if (this.closed || l + 2 < r ? s = i[(l + 2) % r] : (gs.subVectors(i[r - 1], i[r - 2]).add(i[r - 1]), s = gs), "centripetal" === this.curveType || "chordal" === this.curveType) { const t = "chordal" === this.curveType ? .5 : .25; let e = Math.pow(o.distanceToSquared(u), t), n = Math.pow(u.distanceToSquared(h), t), i = Math.pow(h.distanceToSquared(s), t); n < 1e-4 && (n = 1), e < 1e-4 && (e = n), i < 1e-4 && (i = n), vs.initNonuniformCatmullRom(o.x, u.x, h.x, s.x, e, n, i), _s.initNonuniformCatmullRom(o.y, u.y, h.y, s.y, e, n, i), ys.initNonuniformCatmullRom(o.z, u.z, h.z, s.z, e, n, i) } else "catmullrom" === this.curveType && (vs.initCatmullRom(o.x, u.x, h.x, s.x, this.tension), _s.initCatmullRom(o.y, u.y, h.y, s.y, this.tension), ys.initCatmullRom(o.z, u.z, h.z, s.z, this.tension)); return n.set(vs.calc(c), _s.calc(c), ys.calc(c)), n } copy(t) { super.copy(t), this.points = []; for (let e = 0, n = t.points.length; e < n; e++) { const n = t.points[e]; this.points.push(n.clone()) } return this.closed = t.closed, this.curveType = t.curveType, this.tension = t.tension, this } toJSON() { const t = super.toJSON(); t.points = []; for (let e = 0, n = this.points.length; e < n; e++) { const n = this.points[e]; t.points.push(n.toArray()) } return t.closed = this.closed, t.curveType = this.curveType, t.tension = this.tension, t } fromJSON(t) { super.fromJSON(t), this.points = []; for (let e = 0, n = t.points.length; e < n; e++) { const n = t.points[e]; this.points.push((new Ge).fromArray(n)) } return this.closed = t.closed, this.curveType = t.curveType, this.tension = t.tension, this } }, CubicBezierCurve: class extends ps { constructor(t = new ke, e = new ke, n = new ke, i = new ke) { super(), this.isCubicBezierCurve = !0, this.type = "CubicBezierCurve", this.v0 = t, this.v1 = e, this.v2 = n, this.v3 = i } getPoint(t, e = new ke) { const n = e, i = this.v0, r = this.v1, a = this.v2, o = this.v3; return n.set(ws(t, i.x, r.x, a.x, o.x), ws(t, i.y, r.y, a.y, o.y)), n } copy(t) { return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this.v3.copy(t.v3), this } toJSON() { const t = super.toJSON(); return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t.v3 = this.v3.toArray(), t } fromJSON(t) { return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this.v3.fromArray(t.v3), this } }, CubicBezierCurve3: Ms, EllipseCurve: fs, LineCurve: class extends ps { constructor(t = new ke, e = new ke) { super(), this.isLineCurve = !0, this.type = "LineCurve", this.v1 = t, this.v2 = e } getPoint(t, e = new ke) { const n = e; return 1 === t ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(t).add(this.v1)), n } getPointAt(t, e) { return this.getPoint(t, e) } getTangent(t, e = new ke) { return e.subVectors(this.v2, this.v1).normalize() } getTangentAt(t, e) { return this.getTangent(t, e) } copy(t) { return super.copy(t), this.v1.copy(t.v1), this.v2.copy(t.v2), this } toJSON() { const t = super.toJSON(); return t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t } fromJSON(t) { return super.fromJSON(t), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this } }, LineCurve3: class extends ps { constructor(t = new Ge, e = new Ge) { super(), this.isLineCurve3 = !0, this.type = "LineCurve3", this.v1 = t, this.v2 = e } getPoint(t, e = new Ge) { const n = e; return 1 === t ? n.copy(this.v2) : (n.copy(this.v2).sub(this.v1), n.multiplyScalar(t).add(this.v1)), n } getPointAt(t, e) { return this.getPoint(t, e) } getTangent(t, e = new Ge) { return e.subVectors(this.v2, this.v1).normalize() } getTangentAt(t, e) { return this.getTangent(t, e) } copy(t) { return super.copy(t), this.v1.copy(t.v1), this.v2.copy(t.v2), this } toJSON() { const t = super.toJSON(); return t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t } fromJSON(t) { return super.fromJSON(t), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this } }, QuadraticBezierCurve: class extends ps { constructor(t = new ke, e = new ke, n = new ke) { super(), this.isQuadraticBezierCurve = !0, this.type = "QuadraticBezierCurve", this.v0 = t, this.v1 = e, this.v2 = n } getPoint(t, e = new ke) { const n = e, i = this.v0, r = this.v1, a = this.v2; return n.set(bs(t, i.x, r.x, a.x), bs(t, i.y, r.y, a.y)), n } copy(t) { return super.copy(t), this.v0.copy(t.v0), this.v1.copy(t.v1), this.v2.copy(t.v2), this } toJSON() { const t = super.toJSON(); return t.v0 = this.v0.toArray(), t.v1 = this.v1.toArray(), t.v2 = this.v2.toArray(), t } fromJSON(t) { return super.fromJSON(t), this.v0.fromArray(t.v0), this.v1.fromArray(t.v1), this.v2.fromArray(t.v2), this } }, QuadraticBezierCurve3: Ss, SplineCurve: class extends ps { constructor(t = []) { super(), this.isSplineCurve = !0, this.type = "SplineCurve", this.points = t } getPoint(t, e = new ke) { const n = e, i = this.points, r = (i.length - 1) * t, a = Math.floor(r), o = r - a, s = i[0 === a ? a : a - 1], l = i[a], c = i[a > i.length - 2 ? i.length - 1 : a + 1], u = i[a > i.length - 3 ? i.length - 1 : a + 2]; return n.set(xs(o, s.x, l.x, c.x, u.x), xs(o, s.y, l.y, c.y, u.y)), n } copy(t) { super.copy(t), this.points = []; for (let e = 0, n = t.points.length; e < n; e++) { const n = t.points[e]; this.points.push(n.clone()) } return this } toJSON() { const t = super.toJSON(); t.points = []; for (let e = 0, n = this.points.length; e < n; e++) { const n = this.points[e]; t.points.push(n.toArray()) } return t } fromJSON(t) { super.fromJSON(t), this.points = []; for (let e = 0, n = t.points.length; e < n; e++) { const n = t.points[e]; this.points.push((new ke).fromArray(n)) } return this } } }); class Ts extends Gi { constructor(t = 1, e = 1, n = 1, i = 32, r = 1, a = !1, o = 0, s = 2 * Math.PI) { super(), this.type = "CylinderGeometry", this.parameters = { radiusTop: t, radiusBottom: e, height: n, radialSegments: i, heightSegments: r, openEnded: a, thetaStart: o, thetaLength: s }; const l = this; i = Math.floor(i), r = Math.floor(r); const c = [], u = [], h = [], d = []; let p = 0; const f = [], m = n / 2; let g = 0; function v(n) { const r = p, a = new ke, f = new Ge; let v = 0; const _ = !0 === n ? t : e, y = !0 === n ? 1 : -1; for (let t = 1; t <= i; t++)u.push(0, m * y, 0), h.push(0, y, 0), d.push(.5, .5), p++; const x = p; for (let t = 0; t <= i; t++) { const e = t / i * s + o, n = Math.cos(e), r = Math.sin(e); f.x = _ * r, f.y = m * y, f.z = _ * n, u.push(f.x, f.y, f.z), h.push(0, y, 0), a.x = .5 * n + .5, a.y = .5 * r * y + .5, d.push(a.x, a.y), p++ } for (let t = 0; t < i; t++) { const e = r + t, i = x + t; !0 === n ? c.push(i, i + 1, e) : c.push(i + 1, i, e), v += 3 } l.addGroup(g, v, !0 === n ? 1 : 2), g += v } !function () { const a = new Ge, v = new Ge; let _ = 0; const y = (e - t) / n; for (let l = 0; l <= r; l++) { const c = [], g = l / r, _ = g * (e - t) + t; for (let t = 0; t <= i; t++) { const e = t / i, r = e * s + o, l = Math.sin(r), f = Math.cos(r); v.x = _ * l, v.y = -g * n + m, v.z = _ * f, u.push(v.x, v.y, v.z), a.set(l, y, f).normalize(), h.push(a.x, a.y, a.z), d.push(e, 1 - g), c.push(p++) } f.push(c) } for (let t = 0; t < i; t++)for (let e = 0; e < r; e++) { const n = f[e][t], i = f[e + 1][t], r = f[e + 1][t + 1], a = f[e][t + 1]; c.push(n, i, a), c.push(i, r, a), _ += 6 } l.addGroup(g, _, 0), g += _ }(), !1 === a && (t > 0 && v(!0), e > 0 && v(!1)), this.setIndex(c), this.setAttribute("position", new Ii(u, 3)), this.setAttribute("normal", new Ii(h, 3)), this.setAttribute("uv", new Ii(d, 2)) } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } static fromJSON(t) { return new Ts(t.radiusTop, t.radiusBottom, t.height, t.radialSegments, t.heightSegments, t.openEnded, t.thetaStart, t.thetaLength) } } class As extends Ts { constructor(t = 1, e = 1, n = 32, i = 1, r = !1, a = 0, o = 2 * Math.PI) { super(0, t, e, n, i, r, a, o), this.type = "ConeGeometry", this.parameters = { radius: t, height: e, radialSegments: n, heightSegments: i, openEnded: r, thetaStart: a, thetaLength: o } } static fromJSON(t) { return new As(t.radius, t.height, t.radialSegments, t.heightSegments, t.openEnded, t.thetaStart, t.thetaLength) } } class Cs extends Gi { constructor(t = 1, e = 32, n = 16, i = 0, r = 2 * Math.PI, a = 0, o = Math.PI) { super(), this.type = "SphereGeometry", this.parameters = { radius: t, widthSegments: e, heightSegments: n, phiStart: i, phiLength: r, thetaStart: a, thetaLength: o }, e = Math.max(3, Math.floor(e)), n = Math.max(2, Math.floor(n)); const s = Math.min(a + o, Math.PI); let l = 0; const c = [], u = new Ge, h = new Ge, d = [], p = [], f = [], m = []; for (let d = 0; d <= n; d++) { const g = [], v = d / n; let _ = 0; 0 == d && 0 == a ? _ = .5 / e : d == n && s == Math.PI && (_ = -.5 / e); for (let n = 0; n <= e; n++) { const s = n / e; u.x = -t * Math.cos(i + s * r) * Math.sin(a + v * o), u.y = t * Math.cos(a + v * o), u.z = t * Math.sin(i + s * r) * Math.sin(a + v * o), p.push(u.x, u.y, u.z), h.copy(u).normalize(), f.push(h.x, h.y, h.z), m.push(s + _, 1 - v), g.push(l++) } c.push(g) } for (let t = 0; t < n; t++)for (let i = 0; i < e; i++) { const e = c[t][i + 1], r = c[t][i], o = c[t + 1][i], l = c[t + 1][i + 1]; (0 !== t || a > 0) && d.push(e, r, l), (t !== n - 1 || s < Math.PI) && d.push(r, o, l) } this.setIndex(d), this.setAttribute("position", new Ii(p, 3)), this.setAttribute("normal", new Ii(f, 3)), this.setAttribute("uv", new Ii(m, 2)) } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } static fromJSON(t) { return new Cs(t.radius, t.widthSegments, t.heightSegments, t.phiStart, t.phiLength, t.thetaStart, t.thetaLength) } } class Ls extends Gi { constructor(t = new Ss(new Ge(-1, -1, 0), new Ge(-1, 1, 0), new Ge(1, 1, 0)), e = 64, n = 1, i = 8, r = !1) { super(), this.type = "TubeGeometry", this.parameters = { path: t, tubularSegments: e, radius: n, radialSegments: i, closed: r }; const a = t.computeFrenetFrames(e, r); this.tangents = a.tangents, this.normals = a.normals, this.binormals = a.binormals; const o = new Ge, s = new Ge, l = new ke; let c = new Ge; const u = [], h = [], d = [], p = []; function f(r) { c = t.getPointAt(r / e, c); const l = a.normals[r], d = a.binormals[r]; for (let t = 0; t <= i; t++) { const e = t / i * Math.PI * 2, r = Math.sin(e), a = -Math.cos(e); s.x = a * l.x + r * d.x, s.y = a * l.y + r * d.y, s.z = a * l.z + r * d.z, s.normalize(), h.push(s.x, s.y, s.z), o.x = c.x + n * s.x, o.y = c.y + n * s.y, o.z = c.z + n * s.z, u.push(o.x, o.y, o.z) } } !function () { for (let t = 0; t < e; t++)f(t); f(!1 === r ? e : 0), function () { for (let t = 0; t <= e; t++)for (let n = 0; n <= i; n++)l.x = t / e, l.y = n / i, d.push(l.x, l.y) }(), function () { for (let t = 1; t <= e; t++)for (let e = 1; e <= i; e++) { const n = (i + 1) * (t - 1) + (e - 1), r = (i + 1) * t + (e - 1), a = (i + 1) * t + e, o = (i + 1) * (t - 1) + e; p.push(n, r, o), p.push(r, a, o) } }() }(), this.setIndex(p), this.setAttribute("position", new Ii(u, 3)), this.setAttribute("normal", new Ii(h, 3)), this.setAttribute("uv", new Ii(d, 2)) } copy(t) { return super.copy(t), this.parameters = Object.assign({}, t.parameters), this } toJSON() { const t = super.toJSON(); return t.path = this.parameters.path.toJSON(), t } static fromJSON(t) { return new Ls((new Es[t.path.type]).fromJSON(t.path), t.tubularSegments, t.radius, t.radialSegments, t.closed) } } const Ps = { enabled: !1, files: {}, add: function (t, e) { !1 !== this.enabled && (this.files[t] = e) }, get: function (t) { if (!1 !== this.enabled) return this.files[t] }, remove: function (t) { delete this.files[t] }, clear: function () { this.files = {} } }; class Rs { constructor(t, e, n) { const i = this; let r, a = !1, o = 0, s = 0; const l = []; this.onStart = void 0, this.onLoad = t, this.onProgress = e, this.onError = n, this.itemStart = function (t) { s++, !1 === a && void 0 !== i.onStart && i.onStart(t, o, s), a = !0 }, this.itemEnd = function (t) { o++, void 0 !== i.onProgress && i.onProgress(t, o, s), o === s && (a = !1, void 0 !== i.onLoad && i.onLoad()) }, this.itemError = function (t) { void 0 !== i.onError && i.onError(t) }, this.resolveURL = function (t) { return r ? r(t) : t }, this.setURLModifier = function (t) { return r = t, this }, this.addHandler = function (t, e) { return l.push(t, e), this }, this.removeHandler = function (t) { const e = l.indexOf(t); return -1 !== e && l.splice(e, 2), this }, this.getHandler = function (t) { for (let e = 0, n = l.length; e < n; e += 2) { const n = l[e], i = l[e + 1]; if (n.global && (n.lastIndex = 0), n.test(t)) return i } return null } } } const Ds = new Rs; class Os { constructor(t) { this.manager = void 0 !== t ? t : Ds, this.crossOrigin = "anonymous", this.withCredentials = !1, this.path = "", this.resourcePath = "", this.requestHeader = {} } load() { } loadAsync(t, e) { const n = this; return new Promise((function (i, r) { n.load(t, i, e, r) })) } parse() { } setCrossOrigin(t) { return this.crossOrigin = t, this } setWithCredentials(t) { return this.withCredentials = t, this } setPath(t) { return this.path = t, this } setResourcePath(t) { return this.resourcePath = t, this } setRequestHeader(t) { return this.requestHeader = t, this } } class Is extends Os { constructor(t) { super(t) } load(t, e, n, i) { void 0 !== this.path && (t = this.path + t), t = this.manager.resolveURL(t); const r = this, a = Ps.get(t); if (void 0 !== a) return r.manager.itemStart(t), setTimeout((function () { e && e(a), r.manager.itemEnd(t) }), 0), a; const o = Be("img"); function s() { c(), Ps.add(t, this), e && e(this), r.manager.itemEnd(t) } function l(e) { c(), i && i(e), r.manager.itemError(t), r.manager.itemEnd(t) } function c() { o.removeEventListener("load", s, !1), o.removeEventListener("error", l, !1) } return o.addEventListener("load", s, !1), o.addEventListener("error", l, !1), "data:" !== t.slice(0, 5) && void 0 !== this.crossOrigin && (o.crossOrigin = this.crossOrigin), r.manager.itemStart(t), o.src = t, o } } class Ns extends li { constructor(t, e = 1) { super(), this.isLight = !0, this.type = "Light", this.color = new Ti(t), this.intensity = e } dispose() { } copy(t, e) { return super.copy(t, e), this.color.copy(t.color), this.intensity = t.intensity, this } toJSON(t) { const e = super.toJSON(t); return e.object.color = this.color.getHex(), e.object.intensity = this.intensity, void 0 !== this.groundColor && (e.object.groundColor = this.groundColor.getHex()), void 0 !== this.distance && (e.object.distance = this.distance), void 0 !== this.angle && (e.object.angle = this.angle), void 0 !== this.decay && (e.object.decay = this.decay), void 0 !== this.penumbra && (e.object.penumbra = this.penumbra), void 0 !== this.shadow && (e.object.shadow = this.shadow.toJSON()), e } } const ks = new zn, zs = new Ge, Us = new Ge; class Fs { constructor(t) { this.camera = t, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new ke(512, 512), this.map = null, this.mapPass = null, this.matrix = new zn, this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new Mr, this._frameExtents = new ke(1, 1), this._viewportCount = 1, this._viewports = [new on(0, 0, 1, 1)] } getViewportCount() { return this._viewportCount } getFrustum() { return this._frustum } updateMatrices(t) { const e = this.camera, n = this.matrix; zs.setFromMatrixPosition(t.matrixWorld), e.position.copy(zs), Us.setFromMatrixPosition(t.target.matrixWorld), e.lookAt(Us), e.updateMatrixWorld(), ks.multiplyMatrices(e.projectionMatrix, e.matrixWorldInverse), this._frustum.setFromProjectionMatrix(ks), n.set(.5, 0, 0, .5, 0, .5, 0, .5, 0, 0, .5, .5, 0, 0, 0, 1), n.multiply(ks) } getViewport(t) { return this._viewports[t] } getFrameExtents() { return this._frameExtents } dispose() { this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose() } copy(t) { return this.camera = t.camera.clone(), this.bias = t.bias, this.radius = t.radius, this.mapSize.copy(t.mapSize), this } clone() { return (new this.constructor).copy(this) } toJSON() { const t = {}; return 0 !== this.bias && (t.bias = this.bias), 0 !== this.normalBias && (t.normalBias = this.normalBias), 1 !== this.radius && (t.radius = this.radius), 512 === this.mapSize.x && 512 === this.mapSize.y || (t.mapSize = this.mapSize.toArray()), t.camera = this.camera.toJSON(!1).object, delete t.camera.matrix, t } } class Bs extends Fs { constructor() { super(new zr(-5, 5, 5, -5, .5, 500)), this.isDirectionalLightShadow = !0 } } class js { constructor(t = !0) { this.autoStart = t, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1 } start() { this.startTime = Gs(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0 } stop() { this.getElapsedTime(), this.running = !1, this.autoStart = !1 } getElapsedTime() { return this.getDelta(), this.elapsedTime } getDelta() { let t = 0; if (this.autoStart && !this.running) return this.start(), 0; if (this.running) { const e = Gs(); t = (e - this.oldTime) / 1e3, this.oldTime = e, this.elapsedTime += t } return t } } function Gs() { return ("undefined" == typeof performance ? Date : performance).now() } class Hs { constructor(t, e, n = 0, i = 1 / 0) { this.ray = new kn(t, e), this.near = n, this.far = i, this.camera = null, this.layers = new Yn, this.params = { Mesh: {}, Line: { threshold: 1 }, LOD: {}, Points: { threshold: 1 }, Sprite: {} } } set(t, e) { this.ray.set(t, e) } setFromCamera(t, e) { e.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(e.matrixWorld), this.ray.direction.set(t.x, t.y, .5).unproject(e).sub(this.ray.origin).normalize(), this.camera = e) : e.isOrthographicCamera ? (this.ray.origin.set(t.x, t.y, (e.near + e.far) / (e.near - e.far)).unproject(e), this.ray.direction.set(0, 0, -1).transformDirection(e.matrixWorld), this.camera = e) : console.error("THREE.Raycaster: Unsupported camera type: " + e.type) } intersectObject(t, e = !0, n = []) { return Ws(t, this, n, e), n.sort(Vs), n } intersectObjects(t, e = !0, n = []) { for (let i = 0, r = t.length; i < r; i++)Ws(t[i], this, n, e); return n.sort(Vs), n } } function Vs(t, e) { return t.distance - e.distance } function Ws(t, e, n, i) { if (t.layers.test(e.layers) && t.raycast(e, n), !0 === i) { const i = t.children; for (let t = 0, r = i.length; t < r; t++)Ws(i[t], e, n, !0) } } class qs { constructor(t = 1, e = 0, n = 0) { return this.radius = t, this.phi = e, this.theta = n, this } set(t, e, n) { return this.radius = t, this.phi = e, this.theta = n, this } copy(t) { return this.radius = t.radius, this.phi = t.phi, this.theta = t.theta, this } makeSafe() { const t = 1e-6; return this.phi = Math.max(t, Math.min(Math.PI - t, this.phi)), this } setFromVector3(t) { return this.setFromCartesianCoords(t.x, t.y, t.z) } setFromCartesianCoords(t, e, n) { return this.radius = Math.sqrt(t * t + e * e + n * n), 0 === this.radius ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(t, n), this.phi = Math.acos(Pe(e / this.radius, -1, 1))), this } clone() { return (new this.constructor).copy(this) } } "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: { revision: a } })), "undefined" != typeof window && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = a); const Xs = new xr, Ys = new Hs, $s = new ke, Zs = new Ge, Js = new Ge, Ks = new Ge, Qs = new zn; class tl extends Ee { constructor(t, e, n) { super(), n.style.touchAction = "none"; let i = null, r = null; const a = [], o = this; function s() { n.addEventListener("pointermove", c), n.addEventListener("pointerdown", u), n.addEventListener("pointerup", h), n.addEventListener("pointerleave", h) } function l() { n.removeEventListener("pointermove", c), n.removeEventListener("pointerdown", u), n.removeEventListener("pointerup", h), n.removeEventListener("pointerleave", h), n.style.cursor = "" } function c(s) { if (!1 !== o.enabled) { if (d(s), Ys.setFromCamera($s, e), i) return Ys.ray.intersectPlane(Xs, Js) && i.position.copy(Js.sub(Zs).applyMatrix4(Qs)), void o.dispatchEvent({ type: "drag", object: i }); if ("mouse" === s.pointerType || "pen" === s.pointerType) if (a.length = 0, Ys.setFromCamera($s, e), Ys.intersectObjects(t, !0, a), a.length > 0) { const t = a[0].object; Xs.setFromNormalAndCoplanarPoint(e.getWorldDirection(Xs.normal), Ks.setFromMatrixPosition(t.matrixWorld)), r !== t && null !== r && (o.dispatchEvent({ type: "hoveroff", object: r }), n.style.cursor = "auto", r = null), r !== t && (o.dispatchEvent({ type: "hoveron", object: t }), n.style.cursor = "pointer", r = t) } else null !== r && (o.dispatchEvent({ type: "hoveroff", object: r }), n.style.cursor = "auto", r = null) } } function u(r) { !1 !== o.enabled && (d(r), a.length = 0, Ys.setFromCamera($s, e), Ys.intersectObjects(t, !0, a), a.length > 0 && (i = !0 === o.transformGroup ? t[0] : a[0].object, Xs.setFromNormalAndCoplanarPoint(e.getWorldDirection(Xs.normal), Ks.setFromMatrixPosition(i.matrixWorld)), Ys.ray.intersectPlane(Xs, Js) && (Qs.copy(i.parent.matrixWorld).invert(), Zs.copy(Js).sub(Ks.setFromMatrixPosition(i.matrixWorld))), n.style.cursor = "move", o.dispatchEvent({ type: "dragstart", object: i }))) } function h() { !1 !== o.enabled && (i && (o.dispatchEvent({ type: "dragend", object: i }), i = null), n.style.cursor = r ? "pointer" : "auto") } function d(t) { const e = n.getBoundingClientRect(); $s.x = (t.clientX - e.left) / e.width * 2 - 1, $s.y = -(t.clientY - e.top) / e.height * 2 + 1 } s(), this.enabled = !0, this.transformGroup = !1, this.activate = s, this.deactivate = l, this.dispose = function () { l() }, this.getObjects = function () { return t }, this.getRaycaster = function () { return Ys } } } function el(t, e, n) { var i, r = 1; function a() { var a, o, s = i.length, l = 0, c = 0, u = 0; for (a = 0; a < s; ++a)l += (o = i[a]).x || 0, c += o.y || 0, u += o.z || 0; for (l = (l / s - t) * r, c = (c / s - e) * r, u = (u / s - n) * r, a = 0; a < s; ++a)o = i[a], l && (o.x -= l), c && (o.y -= c), u && (o.z -= u) } return null == t && (t = 0), null == e && (e = 0), null == n && (n = 0), a.initialize = function (t) { i = t }, a.x = function (e) { return arguments.length ? (t = +e, a) : t }, a.y = function (t) { return arguments.length ? (e = +t, a) : e }, a.z = function (t) { return arguments.length ? (n = +t, a) : n }, a.strength = function (t) { return arguments.length ? (r = +t, a) : r }, a } function nl(t, e, n) { if (isNaN(e)) return t; var i, r, a, o, s, l, c = t._root, u = { data: n }, h = t._x0, d = t._x1; if (!c) return t._root = u, t; for (; c.length;)if ((o = e >= (r = (h + d) / 2)) ? h = r : d = r, i = c, !(c = c[s = +o])) return i[s] = u, t; if (e === (a = +t._x.call(null, c.data))) return u.next = c, i ? i[s] = u : t._root = u, t; do { i = i ? i[s] = new Array(2) : t._root = new Array(2), (o = e >= (r = (h + d) / 2)) ? h = r : d = r } while ((s = +o) == (l = +(a >= r))); return i[l] = c, i[s] = u, t } function il(t, e, n) { this.node = t, this.x0 = e, this.x1 = n } function rl(t) { return t[0] } function al(t, e) { var n = new ol(null == e ? rl : e, NaN, NaN); return null == t ? n : n.addAll(t) } function ol(t, e, n) { this._x = t, this._x0 = e, this._x1 = n, this._root = void 0 } function sl(t) { for (var e = { data: t.data }, n = e; t = t.next;)n = n.next = { data: t.data }; return e } var ll = al.prototype = ol.prototype; function cl(t, e, n, i) { if (isNaN(e) || isNaN(n)) return t; var r, a, o, s, l, c, u, h, d, p = t._root, f = { data: i }, m = t._x0, g = t._y0, v = t._x1, _ = t._y1; if (!p) return t._root = f, t; for (; p.length;)if ((c = e >= (a = (m + v) / 2)) ? m = a : v = a, (u = n >= (o = (g + _) / 2)) ? g = o : _ = o, r = p, !(p = p[h = u << 1 | c])) return r[h] = f, t; if (s = +t._x.call(null, p.data), l = +t._y.call(null, p.data), e === s && n === l) return f.next = p, r ? r[h] = f : t._root = f, t; do { r = r ? r[h] = new Array(4) : t._root = new Array(4), (c = e >= (a = (m + v) / 2)) ? m = a : v = a, (u = n >= (o = (g + _) / 2)) ? g = o : _ = o } while ((h = u << 1 | c) == (d = (l >= o) << 1 | s >= a)); return r[d] = p, r[h] = f, t } function ul(t, e, n, i, r) { this.node = t, this.x0 = e, this.y0 = n, this.x1 = i, this.y1 = r } function hl(t) { return t[0] } function dl(t) { return t[1] } function pl(t, e, n) { var i = new fl(null == e ? hl : e, null == n ? dl : n, NaN, NaN, NaN, NaN); return null == t ? i : i.addAll(t) } function fl(t, e, n, i, r, a) { this._x = t, this._y = e, this._x0 = n, this._y0 = i, this._x1 = r, this._y1 = a, this._root = void 0 } function ml(t) { for (var e = { data: t.data }, n = e; t = t.next;)n = n.next = { data: t.data }; return e } ll.copy = function () { var t, e, n = new ol(this._x, this._x0, this._x1), i = this._root; if (!i) return n; if (!i.length) return n._root = sl(i), n; for (t = [{ source: i, target: n._root = new Array(2) }]; i = t.pop();)for (var r = 0; r < 2; ++r)(e = i.source[r]) && (e.length ? t.push({ source: e, target: i.target[r] = new Array(2) }) : i.target[r] = sl(e)); return n }, ll.add = function (t) { const e = +this._x.call(null, t); return nl(this.cover(e), e, t) }, ll.addAll = function (t) { Array.isArray(t) || (t = Array.from(t)); const e = t.length, n = new Float64Array(e); let i = 1 / 0, r = -1 / 0; for (let a, o = 0; o < e; ++o)isNaN(a = +this._x.call(null, t[o])) || (n[o] = a, a < i && (i = a), a > r && (r = a)); if (i > r) return this; this.cover(i).cover(r); for (let i = 0; i < e; ++i)nl(this, n[i], t[i]); return this }, ll.cover = function (t) { if (isNaN(t = +t)) return this; var e = this._x0, n = this._x1; if (isNaN(e)) n = (e = Math.floor(t)) + 1; else { for (var i, r, a = n - e || 1, o = this._root; e > t || t >= n;)switch (r = +(t < e), (i = new Array(2))[r] = o, o = i, a *= 2, r) { case 0: n = e + a; break; case 1: e = n - a }this._root && this._root.length && (this._root = o) } return this._x0 = e, this._x1 = n, this }, ll.data = function () { var t = []; return this.visit((function (e) { if (!e.length) do { t.push(e.data) } while (e = e.next) })), t }, ll.extent = function (t) { return arguments.length ? this.cover(+t[0][0]).cover(+t[1][0]) : isNaN(this._x0) ? void 0 : [[this._x0], [this._x1]] }, ll.find = function (t, e) { var n, i, r, a, o, s = this._x0, l = this._x1, c = [], u = this._root; for (u && c.push(new il(u, s, l)), null == e ? e = 1 / 0 : (s = t - e, l = t + e); a = c.pop();)if (!(!(u = a.node) || (i = a.x0) > l || (r = a.x1) < s)) if (u.length) { var h = (i + r) / 2; c.push(new il(u[1], h, r), new il(u[0], i, h)), (o = +(t >= h)) && (a = c[c.length - 1], c[c.length - 1] = c[c.length - 1 - o], c[c.length - 1 - o] = a) } else { var d = Math.abs(t - +this._x.call(null, u.data)); d < e && (e = d, s = t - d, l = t + d, n = u.data) } return n }, ll.remove = function (t) { if (isNaN(a = +this._x.call(null, t))) return this; var e, n, i, r, a, o, s, l, c, u = this._root, h = this._x0, d = this._x1; if (!u) return this; if (u.length) for (; ;) { if ((s = a >= (o = (h + d) / 2)) ? h = o : d = o, e = u, !(u = u[l = +s])) return this; if (!u.length) break; e[l + 1 & 1] && (n = e, c = l) } for (; u.data !== t;)if (i = u, !(u = u.next)) return this; return (r = u.next) && delete u.next, i ? (r ? i.next = r : delete i.next, this) : e ? (r ? e[l] = r : delete e[l], (u = e[0] || e[1]) && u === (e[1] || e[0]) && !u.length && (n ? n[c] = u : this._root = u), this) : (this._root = r, this) }, ll.removeAll = function (t) { for (var e = 0, n = t.length; e < n; ++e)this.remove(t[e]); return this }, ll.root = function () { return this._root }, ll.size = function () { var t = 0; return this.visit((function (e) { if (!e.length) do { ++t } while (e = e.next) })), t }, ll.visit = function (t) { var e, n, i, r, a = [], o = this._root; for (o && a.push(new il(o, this._x0, this._x1)); e = a.pop();)if (!t(o = e.node, i = e.x0, r = e.x1) && o.length) { var s = (i + r) / 2; (n = o[1]) && a.push(new il(n, s, r)), (n = o[0]) && a.push(new il(n, i, s)) } return this }, ll.visitAfter = function (t) { var e, n = [], i = []; for (this._root && n.push(new il(this._root, this._x0, this._x1)); e = n.pop();) { var r = e.node; if (r.length) { var a, o = e.x0, s = e.x1, l = (o + s) / 2; (a = r[0]) && n.push(new il(a, o, l)), (a = r[1]) && n.push(new il(a, l, s)) } i.push(e) } for (; e = i.pop();)t(e.node, e.x0, e.x1); return this }, ll.x = function (t) { return arguments.length ? (this._x = t, this) : this._x }; var gl = pl.prototype = fl.prototype; function vl(t, e, n, i, r) { if (isNaN(e) || isNaN(n) || isNaN(i)) return t; var a, o, s, l, c, u, h, d, p, f, m, g, v = t._root, _ = { data: r }, y = t._x0, x = t._y0, b = t._z0, w = t._x1, M = t._y1, S = t._z1; if (!v) return t._root = _, t; for (; v.length;)if ((d = e >= (o = (y + w) / 2)) ? y = o : w = o, (p = n >= (s = (x + M) / 2)) ? x = s : M = s, (f = i >= (l = (b + S) / 2)) ? b = l : S = l, a = v, !(v = v[m = f << 2 | p << 1 | d])) return a[m] = _, t; if (c = +t._x.call(null, v.data), u = +t._y.call(null, v.data), h = +t._z.call(null, v.data), e === c && n === u && i === h) return _.next = v, a ? a[m] = _ : t._root = _, t; do { a = a ? a[m] = new Array(8) : t._root = new Array(8), (d = e >= (o = (y + w) / 2)) ? y = o : w = o, (p = n >= (s = (x + M) / 2)) ? x = s : M = s, (f = i >= (l = (b + S) / 2)) ? b = l : S = l } while ((m = f << 2 | p << 1 | d) == (g = (h >= l) << 2 | (u >= s) << 1 | c >= o)); return a[g] = v, a[m] = _, t } function _l(t, e, n, i, r, a, o) { this.node = t, this.x0 = e, this.y0 = n, this.z0 = i, this.x1 = r, this.y1 = a, this.z1 = o } function yl(t) { return t[0] } function xl(t) { return t[1] } function bl(t) { return t[2] } function wl(t, e, n, i) { var r = new Ml(null == e ? yl : e, null == n ? xl : n, null == i ? bl : i, NaN, NaN, NaN, NaN, NaN, NaN); return null == t ? r : r.addAll(t) } function Ml(t, e, n, i, r, a, o, s, l) { this._x = t, this._y = e, this._z = n, this._x0 = i, this._y0 = r, this._z0 = a, this._x1 = o, this._y1 = s, this._z1 = l, this._root = void 0 } function Sl(t) { for (var e = { data: t.data }, n = e; t = t.next;)n = n.next = { data: t.data }; return e } gl.copy = function () { var t, e, n = new fl(this._x, this._y, this._x0, this._y0, this._x1, this._y1), i = this._root; if (!i) return n; if (!i.length) return n._root = ml(i), n; for (t = [{ source: i, target: n._root = new Array(4) }]; i = t.pop();)for (var r = 0; r < 4; ++r)(e = i.source[r]) && (e.length ? t.push({ source: e, target: i.target[r] = new Array(4) }) : i.target[r] = ml(e)); return n }, gl.add = function (t) { const e = +this._x.call(null, t), n = +this._y.call(null, t); return cl(this.cover(e, n), e, n, t) }, gl.addAll = function (t) { var e, n, i, r, a = t.length, o = new Array(a), s = new Array(a), l = 1 / 0, c = 1 / 0, u = -1 / 0, h = -1 / 0; for (n = 0; n < a; ++n)isNaN(i = +this._x.call(null, e = t[n])) || isNaN(r = +this._y.call(null, e)) || (o[n] = i, s[n] = r, i < l && (l = i), i > u && (u = i), r < c && (c = r), r > h && (h = r)); if (l > u || c > h) return this; for (this.cover(l, c).cover(u, h), n = 0; n < a; ++n)cl(this, o[n], s[n], t[n]); return this }, gl.cover = function (t, e) { if (isNaN(t = +t) || isNaN(e = +e)) return this; var n = this._x0, i = this._y0, r = this._x1, a = this._y1; if (isNaN(n)) r = (n = Math.floor(t)) + 1, a = (i = Math.floor(e)) + 1; else { for (var o, s, l = r - n || 1, c = this._root; n > t || t >= r || i > e || e >= a;)switch (s = (e < i) << 1 | t < n, (o = new Array(4))[s] = c, c = o, l *= 2, s) { case 0: r = n + l, a = i + l; break; case 1: n = r - l, a = i + l; break; case 2: r = n + l, i = a - l; break; case 3: n = r - l, i = a - l }this._root && this._root.length && (this._root = c) } return this._x0 = n, this._y0 = i, this._x1 = r, this._y1 = a, this }, gl.data = function () { var t = []; return this.visit((function (e) { if (!e.length) do { t.push(e.data) } while (e = e.next) })), t }, gl.extent = function (t) { return arguments.length ? this.cover(+t[0][0], +t[0][1]).cover(+t[1][0], +t[1][1]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0], [this._x1, this._y1]] }, gl.find = function (t, e, n) { var i, r, a, o, s, l, c, u = this._x0, h = this._y0, d = this._x1, p = this._y1, f = [], m = this._root; for (m && f.push(new ul(m, u, h, d, p)), null == n ? n = 1 / 0 : (u = t - n, h = e - n, d = t + n, p = e + n, n *= n); l = f.pop();)if (!(!(m = l.node) || (r = l.x0) > d || (a = l.y0) > p || (o = l.x1) < u || (s = l.y1) < h)) if (m.length) { var g = (r + o) / 2, v = (a + s) / 2; f.push(new ul(m[3], g, v, o, s), new ul(m[2], r, v, g, s), new ul(m[1], g, a, o, v), new ul(m[0], r, a, g, v)), (c = (e >= v) << 1 | t >= g) && (l = f[f.length - 1], f[f.length - 1] = f[f.length - 1 - c], f[f.length - 1 - c] = l) } else { var _ = t - +this._x.call(null, m.data), y = e - +this._y.call(null, m.data), x = _ * _ + y * y; if (x < n) { var b = Math.sqrt(n = x); u = t - b, h = e - b, d = t + b, p = e + b, i = m.data } } return i }, gl.remove = function (t) { if (isNaN(a = +this._x.call(null, t)) || isNaN(o = +this._y.call(null, t))) return this; var e, n, i, r, a, o, s, l, c, u, h, d, p = this._root, f = this._x0, m = this._y0, g = this._x1, v = this._y1; if (!p) return this; if (p.length) for (; ;) { if ((c = a >= (s = (f + g) / 2)) ? f = s : g = s, (u = o >= (l = (m + v) / 2)) ? m = l : v = l, e = p, !(p = p[h = u << 1 | c])) return this; if (!p.length) break; (e[h + 1 & 3] || e[h + 2 & 3] || e[h + 3 & 3]) && (n = e, d = h) } for (; p.data !== t;)if (i = p, !(p = p.next)) return this; return (r = p.next) && delete p.next, i ? (r ? i.next = r : delete i.next, this) : e ? (r ? e[h] = r : delete e[h], (p = e[0] || e[1] || e[2] || e[3]) && p === (e[3] || e[2] || e[1] || e[0]) && !p.length && (n ? n[d] = p : this._root = p), this) : (this._root = r, this) }, gl.removeAll = function (t) { for (var e = 0, n = t.length; e < n; ++e)this.remove(t[e]); return this }, gl.root = function () { return this._root }, gl.size = function () { var t = 0; return this.visit((function (e) { if (!e.length) do { ++t } while (e = e.next) })), t }, gl.visit = function (t) { var e, n, i, r, a, o, s = [], l = this._root; for (l && s.push(new ul(l, this._x0, this._y0, this._x1, this._y1)); e = s.pop();)if (!t(l = e.node, i = e.x0, r = e.y0, a = e.x1, o = e.y1) && l.length) { var c = (i + a) / 2, u = (r + o) / 2; (n = l[3]) && s.push(new ul(n, c, u, a, o)), (n = l[2]) && s.push(new ul(n, i, u, c, o)), (n = l[1]) && s.push(new ul(n, c, r, a, u)), (n = l[0]) && s.push(new ul(n, i, r, c, u)) } return this }, gl.visitAfter = function (t) { var e, n = [], i = []; for (this._root && n.push(new ul(this._root, this._x0, this._y0, this._x1, this._y1)); e = n.pop();) { var r = e.node; if (r.length) { var a, o = e.x0, s = e.y0, l = e.x1, c = e.y1, u = (o + l) / 2, h = (s + c) / 2; (a = r[0]) && n.push(new ul(a, o, s, u, h)), (a = r[1]) && n.push(new ul(a, u, s, l, h)), (a = r[2]) && n.push(new ul(a, o, h, u, c)), (a = r[3]) && n.push(new ul(a, u, h, l, c)) } i.push(e) } for (; e = i.pop();)t(e.node, e.x0, e.y0, e.x1, e.y1); return this }, gl.x = function (t) { return arguments.length ? (this._x = t, this) : this._x }, gl.y = function (t) { return arguments.length ? (this._y = t, this) : this._y }; var El = wl.prototype = Ml.prototype; function Tl(t) { return function () { return t } } function Al(t) { return 1e-6 * (t() - .5) } function Cl(t) { return t.index } function Ll(t, e) { var n = t.get(e); if (!n) throw new Error("node not found: " + e); return n } function Pl(t) { var e, n, i, r, a, o, s, l = Cl, c = function (t) { return 1 / Math.min(a[t.source.index], a[t.target.index]) }, u = Tl(30), h = 1; function d(i) { for (var a = 0, l = t.length; a < h; ++a)for (var c, u, d, p, f, m = 0, g = 0, v = 0, _ = 0; m < l; ++m)u = (c = t[m]).source, g = (d = c.target).x + d.vx - u.x - u.vx || Al(s), r > 1 && (v = d.y + d.vy - u.y - u.vy || Al(s)), r > 2 && (_ = d.z + d.vz - u.z - u.vz || Al(s)), g *= p = ((p = Math.sqrt(g * g + v * v + _ * _)) - n[m]) / p * i * e[m], v *= p, _ *= p, d.vx -= g * (f = o[m]), r > 1 && (d.vy -= v * f), r > 2 && (d.vz -= _ * f), u.vx += g * (f = 1 - f), r > 1 && (u.vy += v * f), r > 2 && (u.vz += _ * f) } function p() { if (i) { var r, s, c = i.length, u = t.length, h = new Map(i.map(((t, e) => [l(t, e, i), t]))); for (r = 0, a = new Array(c); r < u; ++r)(s = t[r]).index = r, "object" != typeof s.source && (s.source = Ll(h, s.source)), "object" != typeof s.target && (s.target = Ll(h, s.target)), a[s.source.index] = (a[s.source.index] || 0) + 1, a[s.target.index] = (a[s.target.index] || 0) + 1; for (r = 0, o = new Array(u); r < u; ++r)s = t[r], o[r] = a[s.source.index] / (a[s.source.index] + a[s.target.index]); e = new Array(u), f(), n = new Array(u), m() } } function f() { if (i) for (var n = 0, r = t.length; n < r; ++n)e[n] = +c(t[n], n, t) } function m() { if (i) for (var e = 0, r = t.length; e < r; ++e)n[e] = +u(t[e], e, t) } return null == t && (t = []), d.initialize = function (t, ...e) { i = t, s = e.find((t => "function" == typeof t)) || Math.random, r = e.find((t => [1, 2, 3].includes(t))) || 2, p() }, d.links = function (e) { return arguments.length ? (t = e, p(), d) : t }, d.id = function (t) { return arguments.length ? (l = t, d) : l }, d.iterations = function (t) { return arguments.length ? (h = +t, d) : h }, d.strength = function (t) { return arguments.length ? (c = "function" == typeof t ? t : Tl(+t), f(), d) : c }, d.distance = function (t) { return arguments.length ? (u = "function" == typeof t ? t : Tl(+t), m(), d) : u }, d } El.copy = function () { var t, e, n = new Ml(this._x, this._y, this._z, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1), i = this._root; if (!i) return n; if (!i.length) return n._root = Sl(i), n; for (t = [{ source: i, target: n._root = new Array(8) }]; i = t.pop();)for (var r = 0; r < 8; ++r)(e = i.source[r]) && (e.length ? t.push({ source: e, target: i.target[r] = new Array(8) }) : i.target[r] = Sl(e)); return n }, El.add = function (t) { const e = +this._x.call(null, t), n = +this._y.call(null, t), i = +this._z.call(null, t); return vl(this.cover(e, n, i), e, n, i, t) }, El.addAll = function (t) { Array.isArray(t) || (t = Array.from(t)); const e = t.length, n = new Float64Array(e), i = new Float64Array(e), r = new Float64Array(e); let a = 1 / 0, o = 1 / 0, s = 1 / 0, l = -1 / 0, c = -1 / 0, u = -1 / 0; for (let h, d, p, f, m = 0; m < e; ++m)isNaN(d = +this._x.call(null, h = t[m])) || isNaN(p = +this._y.call(null, h)) || isNaN(f = +this._z.call(null, h)) || (n[m] = d, i[m] = p, r[m] = f, d < a && (a = d), d > l && (l = d), p < o && (o = p), p > c && (c = p), f < s && (s = f), f > u && (u = f)); if (a > l || o > c || s > u) return this; this.cover(a, o, s).cover(l, c, u); for (let a = 0; a < e; ++a)vl(this, n[a], i[a], r[a], t[a]); return this }, El.cover = function (t, e, n) { if (isNaN(t = +t) || isNaN(e = +e) || isNaN(n = +n)) return this; var i = this._x0, r = this._y0, a = this._z0, o = this._x1, s = this._y1, l = this._z1; if (isNaN(i)) o = (i = Math.floor(t)) + 1, s = (r = Math.floor(e)) + 1, l = (a = Math.floor(n)) + 1; else { for (var c, u, h = o - i || 1, d = this._root; i > t || t >= o || r > e || e >= s || a > n || n >= l;)switch (u = (n < a) << 2 | (e < r) << 1 | t < i, (c = new Array(8))[u] = d, d = c, h *= 2, u) { case 0: o = i + h, s = r + h, l = a + h; break; case 1: i = o - h, s = r + h, l = a + h; break; case 2: o = i + h, r = s - h, l = a + h; break; case 3: i = o - h, r = s - h, l = a + h; break; case 4: o = i + h, s = r + h, a = l - h; break; case 5: i = o - h, s = r + h, a = l - h; break; case 6: o = i + h, r = s - h, a = l - h; break; case 7: i = o - h, r = s - h, a = l - h }this._root && this._root.length && (this._root = d) } return this._x0 = i, this._y0 = r, this._z0 = a, this._x1 = o, this._y1 = s, this._z1 = l, this }, El.data = function () { var t = []; return this.visit((function (e) { if (!e.length) do { t.push(e.data) } while (e = e.next) })), t }, El.extent = function (t) { return arguments.length ? this.cover(+t[0][0], +t[0][1], +t[0][2]).cover(+t[1][0], +t[1][1], +t[1][2]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0, this._z0], [this._x1, this._y1, this._z1]] }, El.find = function (t, e, n, i) { var r, a, o, s, l, c, u, h, d, p = this._x0, f = this._y0, m = this._z0, g = this._x1, v = this._y1, _ = this._z1, y = [], x = this._root; for (x && y.push(new _l(x, p, f, m, g, v, _)), null == i ? i = 1 / 0 : (p = t - i, f = e - i, m = n - i, g = t + i, v = e + i, _ = n + i, i *= i); h = y.pop();)if (!(!(x = h.node) || (a = h.x0) > g || (o = h.y0) > v || (s = h.z0) > _ || (l = h.x1) < p || (c = h.y1) < f || (u = h.z1) < m)) if (x.length) { var b = (a + l) / 2, w = (o + c) / 2, M = (s + u) / 2; y.push(new _l(x[7], b, w, M, l, c, u), new _l(x[6], a, w, M, b, c, u), new _l(x[5], b, o, M, l, w, u), new _l(x[4], a, o, M, b, w, u), new _l(x[3], b, w, s, l, c, M), new _l(x[2], a, w, s, b, c, M), new _l(x[1], b, o, s, l, w, M), new _l(x[0], a, o, s, b, w, M)), (d = (n >= M) << 2 | (e >= w) << 1 | t >= b) && (h = y[y.length - 1], y[y.length - 1] = y[y.length - 1 - d], y[y.length - 1 - d] = h) } else { var S = t - +this._x.call(null, x.data), E = e - +this._y.call(null, x.data), T = n - +this._z.call(null, x.data), A = S * S + E * E + T * T; if (A < i) { var C = Math.sqrt(i = A); p = t - C, f = e - C, m = n - C, g = t + C, v = e + C, _ = n + C, r = x.data } } return r }, El.remove = function (t) { if (isNaN(a = +this._x.call(null, t)) || isNaN(o = +this._y.call(null, t)) || isNaN(s = +this._z.call(null, t))) return this; var e, n, i, r, a, o, s, l, c, u, h, d, p, f, m, g = this._root, v = this._x0, _ = this._y0, y = this._z0, x = this._x1, b = this._y1, w = this._z1; if (!g) return this; if (g.length) for (; ;) { if ((h = a >= (l = (v + x) / 2)) ? v = l : x = l, (d = o >= (c = (_ + b) / 2)) ? _ = c : b = c, (p = s >= (u = (y + w) / 2)) ? y = u : w = u, e = g, !(g = g[f = p << 2 | d << 1 | h])) return this; if (!g.length) break; (e[f + 1 & 7] || e[f + 2 & 7] || e[f + 3 & 7] || e[f + 4 & 7] || e[f + 5 & 7] || e[f + 6 & 7] || e[f + 7 & 7]) && (n = e, m = f) } for (; g.data !== t;)if (i = g, !(g = g.next)) return this; return (r = g.next) && delete g.next, i ? (r ? i.next = r : delete i.next, this) : e ? (r ? e[f] = r : delete e[f], (g = e[0] || e[1] || e[2] || e[3] || e[4] || e[5] || e[6] || e[7]) && g === (e[7] || e[6] || e[5] || e[4] || e[3] || e[2] || e[1] || e[0]) && !g.length && (n ? n[m] = g : this._root = g), this) : (this._root = r, this) }, El.removeAll = function (t) { for (var e = 0, n = t.length; e < n; ++e)this.remove(t[e]); return this }, El.root = function () { return this._root }, El.size = function () { var t = 0; return this.visit((function (e) { if (!e.length) do { ++t } while (e = e.next) })), t }, El.visit = function (t) { var e, n, i, r, a, o, s, l, c = [], u = this._root; for (u && c.push(new _l(u, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1)); e = c.pop();)if (!t(u = e.node, i = e.x0, r = e.y0, a = e.z0, o = e.x1, s = e.y1, l = e.z1) && u.length) { var h = (i + o) / 2, d = (r + s) / 2, p = (a + l) / 2; (n = u[7]) && c.push(new _l(n, h, d, p, o, s, l)), (n = u[6]) && c.push(new _l(n, i, d, p, h, s, l)), (n = u[5]) && c.push(new _l(n, h, r, p, o, d, l)), (n = u[4]) && c.push(new _l(n, i, r, p, h, d, l)), (n = u[3]) && c.push(new _l(n, h, d, a, o, s, p)), (n = u[2]) && c.push(new _l(n, i, d, a, h, s, p)), (n = u[1]) && c.push(new _l(n, h, r, a, o, d, p)), (n = u[0]) && c.push(new _l(n, i, r, a, h, d, p)) } return this }, El.visitAfter = function (t) { var e, n = [], i = []; for (this._root && n.push(new _l(this._root, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1)); e = n.pop();) { var r = e.node; if (r.length) { var a, o = e.x0, s = e.y0, l = e.z0, c = e.x1, u = e.y1, h = e.z1, d = (o + c) / 2, p = (s + u) / 2, f = (l + h) / 2; (a = r[0]) && n.push(new _l(a, o, s, l, d, p, f)), (a = r[1]) && n.push(new _l(a, d, s, l, c, p, f)), (a = r[2]) && n.push(new _l(a, o, p, l, d, u, f)), (a = r[3]) && n.push(new _l(a, d, p, l, c, u, f)), (a = r[4]) && n.push(new _l(a, o, s, f, d, p, h)), (a = r[5]) && n.push(new _l(a, d, s, f, c, p, h)), (a = r[6]) && n.push(new _l(a, o, p, f, d, u, h)), (a = r[7]) && n.push(new _l(a, d, p, f, c, u, h)) } i.push(e) } for (; e = i.pop();)t(e.node, e.x0, e.y0, e.z0, e.x1, e.y1, e.z1); return this }, El.x = function (t) { return arguments.length ? (this._x = t, this) : this._x }, El.y = function (t) { return arguments.length ? (this._y = t, this) : this._y }, El.z = function (t) { return arguments.length ? (this._z = t, this) : this._z }; var Rl = { value: () => { } }; function Dl() { for (var t, e = 0, n = arguments.length, i = {}; e < n; ++e) { if (!(t = arguments[e] + "") || t in i || /[\s.]/.test(t)) throw new Error("illegal type: " + t); i[t] = [] } return new Ol(i) } function Ol(t) { this._ = t } function Il(t, e) { for (var n, i = 0, r = t.length; i < r; ++i)if ((n = t[i]).name === e) return n.value } function Nl(t, e, n) { for (var i = 0, r = t.length; i < r; ++i)if (t[i].name === e) { t[i] = Rl, t = t.slice(0, i).concat(t.slice(i + 1)); break } return null != n && t.push({ name: e, value: n }), t } Ol.prototype = Dl.prototype = { constructor: Ol, on: function (t, e) { var n, i, r = this._, a = (i = r, (t + "").trim().split(/^|\s+/).map((function (t) { var e = "", n = t.indexOf("."); if (n >= 0 && (e = t.slice(n + 1), t = t.slice(0, n)), t && !i.hasOwnProperty(t)) throw new Error("unknown type: " + t); return { type: t, name: e } }))), o = -1, s = a.length; if (!(arguments.length < 2)) { if (null != e && "function" != typeof e) throw new Error("invalid callback: " + e); for (; ++o < s;)if (n = (t = a[o]).type) r[n] = Nl(r[n], t.name, e); else if (null == e) for (n in r) r[n] = Nl(r[n], t.name, null); return this } for (; ++o < s;)if ((n = (t = a[o]).type) && (n = Il(r[n], t.name))) return n }, copy: function () { var t = {}, e = this._; for (var n in e) t[n] = e[n].slice(); return new Ol(t) }, call: function (t, e) { if ((n = arguments.length - 2) > 0) for (var n, i, r = new Array(n), a = 0; a < n; ++a)r[a] = arguments[a + 2]; if (!this._.hasOwnProperty(t)) throw new Error("unknown type: " + t); for (a = 0, n = (i = this._[t]).length; a < n; ++a)i[a].value.apply(e, r) }, apply: function (t, e, n) { if (!this._.hasOwnProperty(t)) throw new Error("unknown type: " + t); for (var i = this._[t], r = 0, a = i.length; r < a; ++r)i[r].value.apply(e, n) } }; var kl, zl, Ul = 0, Fl = 0, Bl = 0, jl = 1e3, Gl = 0, Hl = 0, Vl = 0, Wl = "object" == typeof performance && performance.now ? performance : Date, ql = "object" == typeof window && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (t) { setTimeout(t, 17) }; function Xl() { return Hl || (ql(Yl), Hl = Wl.now() + Vl) } function Yl() { Hl = 0 } function $l() { this._call = this._time = this._next = null } function Zl(t, e, n) { var i = new $l; return i.restart(t, e, n), i } function Jl() { Hl = (Gl = Wl.now()) + Vl, Ul = Fl = 0; try { !function () { Xl(), ++Ul; for (var t, e = kl; e;)(t = Hl - e._time) >= 0 && e._call.call(void 0, t), e = e._next; --Ul }() } finally { Ul = 0, function () { var t, e, n = kl, i = 1 / 0; for (; n;)n._call ? (i > n._time && (i = n._time), t = n, n = n._next) : (e = n._next, n._next = null, n = t ? t._next = e : kl = e); zl = t, Ql(i) }(), Hl = 0 } } function Kl() { var t = Wl.now(), e = t - Gl; e > jl && (Vl -= e, Gl = t) } function Ql(t) { Ul || (Fl && (Fl = clearTimeout(Fl)), t - Hl > 24 ? (t < 1 / 0 && (Fl = setTimeout(Jl, t - Wl.now() - Vl)), Bl && (Bl = clearInterval(Bl))) : (Bl || (Gl = Wl.now(), Bl = setInterval(Kl, jl)), Ul = 1, ql(Jl))) } $l.prototype = Zl.prototype = { constructor: $l, restart: function (t, e, n) { if ("function" != typeof t) throw new TypeError("callback is not a function"); n = (null == n ? Xl() : +n) + (null == e ? 0 : +e), this._next || zl === this || (zl ? zl._next = this : kl = this, zl = this), this._call = t, this._time = n, Ql() }, stop: function () { this._call && (this._call = null, this._time = 1 / 0, Ql()) } }; const tc = 1664525, ec = 1013904223, nc = 4294967296; var ic = 3; function rc(t) { return t.x } function ac(t) { return t.y } function oc(t) { return t.z } var sc = 10, lc = Math.PI * (3 - Math.sqrt(5)), cc = 20 * Math.PI / (9 + Math.sqrt(221)); function uc(t, e) { e = e || 2; var n, i = Math.min(ic, Math.max(1, Math.round(e))), r = 1, a = .001, o = 1 - Math.pow(a, 1 / 300), s = 0, l = .6, c = new Map, u = Zl(p), h = Dl("tick", "end"), d = function () { let t = 1; return () => (t = (tc * t + ec) % nc) / nc }(); function p() { f(), h.call("tick", n), r < a && (u.stop(), h.call("end", n)) } function f(e) { var a, u, h = t.length; void 0 === e && (e = 1); for (var d = 0; d < e; ++d)for (r += (s - r) * o, c.forEach((function (t) { t(r) })), a = 0; a < h; ++a)null == (u = t[a]).fx ? u.x += u.vx *= l : (u.x = u.fx, u.vx = 0), i > 1 && (null == u.fy ? u.y += u.vy *= l : (u.y = u.fy, u.vy = 0)), i > 2 && (null == u.fz ? u.z += u.vz *= l : (u.z = u.fz, u.vz = 0)); return n } function m() { for (var e, n = 0, r = t.length; n < r; ++n) { if ((e = t[n]).index = n, null != e.fx && (e.x = e.fx), null != e.fy && (e.y = e.fy), null != e.fz && (e.z = e.fz), isNaN(e.x) || i > 1 && isNaN(e.y) || i > 2 && isNaN(e.z)) { var a = sc * (i > 2 ? Math.cbrt(.5 + n) : i > 1 ? Math.sqrt(.5 + n) : n), o = n * lc, s = n * cc; 1 === i ? e.x = a : 2 === i ? (e.x = a * Math.cos(o), e.y = a * Math.sin(o)) : (e.x = a * Math.sin(o) * Math.cos(s), e.y = a * Math.cos(o), e.z = a * Math.sin(o) * Math.sin(s)) } (isNaN(e.vx) || i > 1 && isNaN(e.vy) || i > 2 && isNaN(e.vz)) && (e.vx = 0, i > 1 && (e.vy = 0), i > 2 && (e.vz = 0)) } } function g(e) { return e.initialize && e.initialize(t, d, i), e } return null == t && (t = []), m(), n = { tick: f, restart: function () { return u.restart(p), n }, stop: function () { return u.stop(), n }, numDimensions: function (t) { return arguments.length ? (i = Math.min(ic, Math.max(1, Math.round(t))), c.forEach(g), n) : i }, nodes: function (e) { return arguments.length ? (t = e, m(), c.forEach(g), n) : t }, alpha: function (t) { return arguments.length ? (r = +t, n) : r }, alphaMin: function (t) { return arguments.length ? (a = +t, n) : a }, alphaDecay: function (t) { return arguments.length ? (o = +t, n) : +o }, alphaTarget: function (t) { return arguments.length ? (s = +t, n) : s }, velocityDecay: function (t) { return arguments.length ? (l = 1 - t, n) : 1 - l }, randomSource: function (t) { return arguments.length ? (d = t, c.forEach(g), n) : d }, force: function (t, e) { return arguments.length > 1 ? (null == e ? c.delete(t) : c.set(t, g(e)), n) : c.get(t) }, find: function () { var e, n, r, a, o, s, l = Array.prototype.slice.call(arguments), c = l.shift() || 0, u = (i > 1 ? l.shift() : null) || 0, h = (i > 2 ? l.shift() : null) || 0, d = l.shift() || 1 / 0, p = 0, f = t.length; for (d *= d, p = 0; p < f; ++p)(a = (e = c - (o = t[p]).x) * e + (n = u - (o.y || 0)) * n + (r = h - (o.z || 0)) * r) < d && (s = o, d = a); return s }, on: function (t, e) { return arguments.length > 1 ? (h.on(t, e), n) : h.on(t) } } } function hc() { var t, e, n, i, r, a, o = Tl(-30), s = 1, l = 1 / 0, c = .81; function u(i) { var a, o = t.length, s = (1 === e ? al(t, rc) : 2 === e ? pl(t, rc, ac) : 3 === e ? wl(t, rc, ac, oc) : null).visitAfter(d); for (r = i, a = 0; a < o; ++a)n = t[a], s.visit(p) } function h() { if (t) { var e, n, i = t.length; for (a = new Array(i), e = 0; e < i; ++e)n = t[e], a[n.index] = +o(n, e, t) } } function d(t) { var n, i, r, o, s, l, c = 0, u = 0, h = t.length; if (h) { for (r = o = s = l = 0; l < h; ++l)(n = t[l]) && (i = Math.abs(n.value)) && (c += n.value, u += i, r += i * (n.x || 0), o += i * (n.y || 0), s += i * (n.z || 0)); c *= Math.sqrt(4 / h), t.x = r / u, e > 1 && (t.y = o / u), e > 2 && (t.z = s / u) } else { (n = t).x = n.data.x, e > 1 && (n.y = n.data.y), e > 2 && (n.z = n.data.z); do { c += a[n.data.index] } while (n = n.next) } t.value = c } function p(t, o, u, h, d) { if (!t.value) return !0; var p = [u, h, d][e - 1], f = t.x - n.x, m = e > 1 ? t.y - n.y : 0, g = e > 2 ? t.z - n.z : 0, v = p - o, _ = f * f + m * m + g * g; if (v * v / c < _) return _ < l && (0 === f && (_ += (f = Al(i)) * f), e > 1 && 0 === m && (_ += (m = Al(i)) * m), e > 2 && 0 === g && (_ += (g = Al(i)) * g), _ < s && (_ = Math.sqrt(s * _)), n.vx += f * t.value * r / _, e > 1 && (n.vy += m * t.value * r / _), e > 2 && (n.vz += g * t.value * r / _)), !0; if (!(t.length || _ >= l)) { (t.data !== n || t.next) && (0 === f && (_ += (f = Al(i)) * f), e > 1 && 0 === m && (_ += (m = Al(i)) * m), e > 2 && 0 === g && (_ += (g = Al(i)) * g), _ < s && (_ = Math.sqrt(s * _))); do { t.data !== n && (v = a[t.data.index] * r / _, n.vx += f * v, e > 1 && (n.vy += m * v), e > 2 && (n.vz += g * v)) } while (t = t.next) } } return u.initialize = function (n, ...r) { t = n, i = r.find((t => "function" == typeof t)) || Math.random, e = r.find((t => [1, 2, 3].includes(t))) || 2, h() }, u.strength = function (t) { return arguments.length ? (o = "function" == typeof t ? t : Tl(+t), h(), u) : o }, u.distanceMin = function (t) { return arguments.length ? (s = t * t, u) : Math.sqrt(s) }, u.distanceMax = function (t) { return arguments.length ? (l = t * t, u) : Math.sqrt(l) }, u.theta = function (t) { return arguments.length ? (c = t * t, u) : Math.sqrt(c) }, u } var dc = function (t) { !function (t) { if (!t) throw new Error("Eventify cannot use falsy object as events subject"); for (var e = ["on", "fire", "off"], n = 0; n < e.length; ++n)if (t.hasOwnProperty(e[n])) throw new Error("Subject cannot be eventified, since it already has property '" + e[n] + "'") }(t); var e = function (t) { var e = Object.create(null); return { on: function (n, i, r) { if ("function" != typeof i) throw new Error("callback is expected to be a function"); var a = e[n]; return a || (a = e[n] = []), a.push({ callback: i, ctx: r }), t }, off: function (n, i) { if (void 0 === n) return e = Object.create(null), t; if (e[n]) if ("function" != typeof i) delete e[n]; else for (var r = e[n], a = 0; a < r.length; ++a)r[a].callback === i && r.splice(a, 1); return t }, fire: function (n) { var i, r = e[n]; if (!r) return t; arguments.length > 1 && (i = Array.prototype.splice.call(arguments, 1)); for (var a = 0; a < r.length; ++a) { var o = r[a]; o.callback.apply(o.ctx, i) } return t } } }(t); return t.on = e.on, t.off = e.off, t.fire = e.fire, t }; var pc = function (t) { "uniqueLinkId" in (t = t || {}) && (console.warn("ngraph.graph: Starting from version 0.14 `uniqueLinkId` is deprecated.\nUse `multigraph` option instead\n", "\n", "Note: there is also change in default behavior: From now on each graph\nis considered to be not a multigraph by default (each edge is unique)."), t.multigraph = t.uniqueLinkId); void 0 === t.multigraph && (t.multigraph = !1); if ("function" != typeof Map) throw new Error("ngraph.graph requires `Map` to be defined. Please polyfill it before using ngraph"); var e = new Map, n = new Map, i = {}, r = 0, a = t.multigraph ? function (t, e, n) { var r = _c(t, e), a = i.hasOwnProperty(r); if (a || x(t, e)) { a || (i[r] = 0); var o = "@" + ++i[r]; r = _c(t + o, e + o) } return new vc(t, e, n, r) } : function (t, e, i) { var r = _c(t, e), a = n.get(r); if (a) return a.data = i, a; return new vc(t, e, i, r) }, o = [], s = b, l = b, c = b, u = b, h = { version: 20, addNode: f, addLink: function (t, e, i) { c(); var r = m(t) || f(t), o = m(e) || f(e), l = a(t, e, i), h = n.has(l.id); n.set(l.id, l), gc(r, l), t !== e && gc(o, l); return s(l, h ? "update" : "add"), u(), l }, removeLink: function (t, e) { void 0 !== e && (t = x(t, e)); return y(t) }, removeNode: g, getNode: m, getNodeCount: v, getLinkCount: _, getEdgeCount: _, getLinksCount: _, getNodesCount: v, getLinks: function (t) { var e = m(t); return e ? e.links : null }, forEachNode: S, forEachLinkedNode: function (t, n, i) { var r = m(t); if (r && r.links && "function" == typeof n) return i ? function (t, n, i) { var r = t.values(), a = r.next(); for (; !a.done;) { var o = a.value; if (o.fromId === n && i(e.get(o.toId), o)) return !0; a = r.next() } }(r.links, t, n) : function (t, n, i) { var r = t.values(), a = r.next(); for (; !a.done;) { var o = a.value, s = o.fromId === n ? o.toId : o.fromId; if (i(e.get(s), o)) return !0; a = r.next() } }(r.links, t, n) }, forEachLink: function (t) { if ("function" == typeof t) for (var e = n.values(), i = e.next(); !i.done;) { if (t(i.value)) return !0; i = e.next() } }, beginUpdate: c, endUpdate: u, clear: function () { c(), S((function (t) { g(t.id) })), u() }, hasLink: x, hasNode: m, getLink: x }; return fc(h), function () { var t = h.on; function e() { return h.beginUpdate = c = w, h.endUpdate = u = M, s = d, l = p, h.on = t, t.apply(h, arguments) } h.on = e }(), h; function d(t, e) { o.push({ link: t, changeType: e }) } function p(t, e) { o.push({ node: t, changeType: e }) } function f(t, n) { if (void 0 === t) throw new Error("Invalid node identifier"); c(); var i = m(t); return i ? (i.data = n, l(i, "update")) : (i = new mc(t, n), l(i, "add")), e.set(t, i), u(), i } function m(t) { return e.get(t) } function g(t) { var n = m(t); if (!n) return !1; c(); var i = n.links; return i && (i.forEach(y), n.links = null), e.delete(t), l(n, "remove"), u(), !0 } function v() { return e.size } function _() { return n.size } function y(t) { if (!t) return !1; if (!n.get(t.id)) return !1; c(), n.delete(t.id); var e = m(t.fromId), i = m(t.toId); return e && e.links.delete(t), i && i.links.delete(t), s(t, "remove"), u(), !0 } function x(t, e) { if (void 0 !== t && void 0 !== e) return n.get(_c(t, e)) } function b() { } function w() { r += 1 } function M() { 0 === (r -= 1) && o.length > 0 && (h.fire("changed", o), o.length = 0) } function S(t) { if ("function" != typeof t) throw new Error("Function is expected to iterate over graph nodes. You passed " + t); for (var n = e.values(), i = n.next(); !i.done;) { if (t(i.value)) return !0; i = n.next() } } }, fc = dc; function mc(t, e) { this.id = t, this.links = null, this.data = e } function gc(t, e) { t.links ? t.links.add(e) : t.links = new Set([e]) } function vc(t, e, n, i) { this.fromId = t, this.toId = e, this.data = n, this.id = i } function _c(t, e) { return t.toString() + "👉 " + e.toString() } var yc = {}, xc = { get exports() { return yc }, set exports(t) { yc = t } }, bc = {}, wc = function (t) { return 0 === t ? "x" : 1 === t ? "y" : 2 === t ? "z" : "c" + (t + 1) }; const Mc = wc; var Sc = function (t) { return function (e, n) { let i = n && n.indent || 0, r = n && void 0 !== n.join ? n.join : "\n", a = Array(i + 1).join(" "), o = []; for (let n = 0; n < t; ++n) { let t = Mc(n), i = 0 === n ? "" : a; o.push(i + e.replace(/{var}/g, t)) } return o.join(r) } }; const Ec = Sc; function Tc(t, e) { return `\n${Cc(t, e)}\n${Ac(t)}\nreturn {Body: Body, Vector: Vector};\n` } function Ac(t) { let e = Ec(t), n = e("{var}", { join: ", " }); return `\nfunction Body(${n}) {\n  this.isPinned = false;\n  this.pos = new Vector(${n});\n  this.force = new Vector();\n  this.velocity = new Vector();\n  this.mass = 1;\n\n  this.springCount = 0;\n  this.springLength = 0;\n}\n\nBody.prototype.reset = function() {\n  this.force.reset();\n  this.springCount = 0;\n  this.springLength = 0;\n}\n\nBody.prototype.setPosition = function (${n}) {\n  ${e("this.pos.{var} = {var} || 0;", { indent: 2 })}\n};` } function Cc(t, e) { let n = Ec(t), i = ""; return e && (i = `${n("\n   var v{var};\nObject.defineProperty(this, '{var}', {\n  set: function(v) { \n    if (!Number.isFinite(v)) throw new Error('Cannot set non-numbers to {var}');\n    v{var} = v; \n  },\n  get: function() { return v{var}; }\n});")}`), `function Vector(${n("{var}", { join: ", " })}) {\n  ${i}\n    if (typeof arguments[0] === 'object') {\n      // could be another vector\n      let v = arguments[0];\n      ${n('if (!Number.isFinite(v.{var})) throw new Error("Expected value is not a finite number at Vector constructor ({var})");', { indent: 4 })}\n      ${n("this.{var} = v.{var};", { indent: 4 })}\n    } else {\n      ${n('this.{var} = typeof {var} === "number" ? {var} : 0;', { indent: 4 })}\n    }\n  }\n  \n  Vector.prototype.reset = function () {\n    ${n("this.{var} = ", { join: "" })}0;\n  };` } ({ get exports() { return bc }, set exports(t) { bc = t } }).exports = function (t, e) { let n = Tc(t, e), { Body: i } = new Function(n)(); return i }, bc.generateCreateBodyFunctionBody = Tc, bc.getVectorCode = Cc, bc.getBodyCode = Ac; var Lc = {}; const Pc = Sc, Rc = wc; function Dc(t) { let e = Pc(t), n = Math.pow(2, t); return `\n${zc()}\n${kc(t)}\n${Oc(t)}\n${Nc(t)}\n${Ic(t)}\n\nfunction createQuadTree(options, random) {\n  options = options || {};\n  options.gravity = typeof options.gravity === 'number' ? options.gravity : -1;\n  options.theta = typeof options.theta === 'number' ? options.theta : 0.8;\n\n  var gravity = options.gravity;\n  var updateQueue = [];\n  var insertStack = new InsertStack();\n  var theta = options.theta;\n\n  var nodesCache = [];\n  var currentInCache = 0;\n  var root = newNode();\n\n  return {\n    insertBodies: insertBodies,\n\n    /**\n     * Gets root node if it is present\n     */\n    getRoot: function() {\n      return root;\n    },\n\n    updateBodyForce: update,\n\n    options: function(newOptions) {\n      if (newOptions) {\n        if (typeof newOptions.gravity === 'number') {\n          gravity = newOptions.gravity;\n        }\n        if (typeof newOptions.theta === 'number') {\n          theta = newOptions.theta;\n        }\n\n        return this;\n      }\n\n      return {\n        gravity: gravity,\n        theta: theta\n      };\n    }\n  };\n\n  function newNode() {\n    // To avoid pressure on GC we reuse nodes.\n    var node = nodesCache[currentInCache];\n    if (node) {\n${function (t) { let e = []; for (let i = 0; i < n; ++i)e.push(`${t}quad${i} = null;`); return e.join("\n") }("      node.")}\n      node.body = null;\n      node.mass = ${e("node.mass_{var} = ", { join: "" })}0;\n      ${e("node.min_{var} = node.max_{var} = ", { join: "" })}0;\n    } else {\n      node = new QuadNode();\n      nodesCache[currentInCache] = node;\n    }\n\n    ++currentInCache;\n    return node;\n  }\n\n  function update(sourceBody) {\n    var queue = updateQueue;\n    var v;\n    ${e("var d{var};", { indent: 4 })}\n    var r; \n    ${e("var f{var} = 0;", { indent: 4 })}\n    var queueLength = 1;\n    var shiftIdx = 0;\n    var pushIdx = 1;\n\n    queue[0] = root;\n\n    while (queueLength) {\n      var node = queue[shiftIdx];\n      var body = node.body;\n\n      queueLength -= 1;\n      shiftIdx += 1;\n      var differentBody = (body !== sourceBody);\n      if (body && differentBody) {\n        // If the current node is a leaf node (and it is not source body),\n        // calculate the force exerted by the current node on body, and add this\n        // amount to body's net force.\n        ${e("d{var} = body.pos.{var} - sourceBody.pos.{var};", { indent: 8 })}\n        r = Math.sqrt(${e("d{var} * d{var}", { join: " + " })});\n\n        if (r === 0) {\n          // Poor man's protection against zero distance.\n          ${e("d{var} = (random.nextDouble() - 0.5) / 50;", { indent: 10 })}\n          r = Math.sqrt(${e("d{var} * d{var}", { join: " + " })});\n        }\n\n        // This is standard gravitation force calculation but we divide\n        // by r^3 to save two operations when normalizing force vector.\n        v = gravity * body.mass * sourceBody.mass / (r * r * r);\n        ${e("f{var} += v * d{var};", { indent: 8 })}\n      } else if (differentBody) {\n        // Otherwise, calculate the ratio s / r,  where s is the width of the region\n        // represented by the internal node, and r is the distance between the body\n        // and the node's center-of-mass\n        ${e("d{var} = node.mass_{var} / node.mass - sourceBody.pos.{var};", { indent: 8 })}\n        r = Math.sqrt(${e("d{var} * d{var}", { join: " + " })});\n\n        if (r === 0) {\n          // Sorry about code duplication. I don't want to create many functions\n          // right away. Just want to see performance first.\n          ${e("d{var} = (random.nextDouble() - 0.5) / 50;", { indent: 10 })}\n          r = Math.sqrt(${e("d{var} * d{var}", { join: " + " })});\n        }\n        // If s / r < θ, treat this internal node as a single body, and calculate the\n        // force it exerts on sourceBody, and add this amount to sourceBody's net force.\n        if ((node.max_${Rc(0)} - node.min_${Rc(0)}) / r < theta) {\n          // in the if statement above we consider node's width only\n          // because the region was made into square during tree creation.\n          // Thus there is no difference between using width or height.\n          v = gravity * node.mass * sourceBody.mass / (r * r * r);\n          ${e("f{var} += v * d{var};", { indent: 10 })}\n        } else {\n          // Otherwise, run the procedure recursively on each of the current node's children.\n\n          // I intentionally unfolded this loop, to save several CPU cycles.\n${function () { let t = Array(11).join(" "), e = []; for (let i = 0; i < n; ++i)e.push(t + `if (node.quad${i}) {`), e.push(t + `  queue[pushIdx] = node.quad${i};`), e.push(t + "  queueLength += 1;"), e.push(t + "  pushIdx += 1;"), e.push(t + "}"); return e.join("\n") }()}\n        }\n      }\n    }\n\n    ${e("sourceBody.force.{var} += f{var};", { indent: 4 })}\n  }\n\n  function insertBodies(bodies) {\n    ${e("var {var}min = Number.MAX_VALUE;", { indent: 4 })}\n    ${e("var {var}max = Number.MIN_VALUE;", { indent: 4 })}\n    var i = bodies.length;\n\n    // To reduce quad tree depth we are looking for exact bounding box of all particles.\n    while (i--) {\n      var pos = bodies[i].pos;\n      ${e("if (pos.{var} < {var}min) {var}min = pos.{var};", { indent: 6 })}\n      ${e("if (pos.{var} > {var}max) {var}max = pos.{var};", { indent: 6 })}\n    }\n\n    // Makes the bounds square.\n    var maxSideLength = -Infinity;\n    ${e("if ({var}max - {var}min > maxSideLength) maxSideLength = {var}max - {var}min ;", { indent: 4 })}\n\n    currentInCache = 0;\n    root = newNode();\n    ${e("root.min_{var} = {var}min;", { indent: 4 })}\n    ${e("root.max_{var} = {var}min + maxSideLength;", { indent: 4 })}\n\n    i = bodies.length - 1;\n    if (i >= 0) {\n      root.body = bodies[i];\n    }\n    while (i--) {\n      insert(bodies[i], root);\n    }\n  }\n\n  function insert(newBody) {\n    insertStack.reset();\n    insertStack.push(root, newBody);\n\n    while (!insertStack.isEmpty()) {\n      var stackItem = insertStack.pop();\n      var node = stackItem.node;\n      var body = stackItem.body;\n\n      if (!node.body) {\n        // This is internal node. Update the total mass of the node and center-of-mass.\n        ${e("var {var} = body.pos.{var};", { indent: 8 })}\n        node.mass += body.mass;\n        ${e("node.mass_{var} += body.mass * {var};", { indent: 8 })}\n\n        // Recursively insert the body in the appropriate quadrant.\n        // But first find the appropriate quadrant.\n        var quadIdx = 0; // Assume we are in the 0's quad.\n        ${e("var min_{var} = node.min_{var};", { indent: 8 })}\n        ${e("var max_{var} = (min_{var} + node.max_{var}) / 2;", { indent: 8 })}\n\n${function (e) { let n = [], i = Array(e + 1).join(" "); for (let e = 0; e < t; ++e)n.push(i + `if (${Rc(e)} > max_${Rc(e)}) {`), n.push(i + `  quadIdx = quadIdx + ${Math.pow(2, e)};`), n.push(i + `  min_${Rc(e)} = max_${Rc(e)};`), n.push(i + `  max_${Rc(e)} = node.max_${Rc(e)};`), n.push(i + "}"); return n.join("\n") }(8)}\n\n        var child = getChild(node, quadIdx);\n\n        if (!child) {\n          // The node is internal but this quadrant is not taken. Add\n          // subnode to it.\n          child = newNode();\n          ${e("child.min_{var} = min_{var};", { indent: 10 })}\n          ${e("child.max_{var} = max_{var};", { indent: 10 })}\n          child.body = body;\n\n          setChild(node, quadIdx, child);\n        } else {\n          // continue searching in this quadrant.\n          insertStack.push(child, body);\n        }\n      } else {\n        // We are trying to add to the leaf node.\n        // We have to convert current leaf into internal node\n        // and continue adding two nodes.\n        var oldBody = node.body;\n        node.body = null; // internal nodes do not cary bodies\n\n        if (isSamePosition(oldBody.pos, body.pos)) {\n          // Prevent infinite subdivision by bumping one node\n          // anywhere in this quadrant\n          var retriesCount = 3;\n          do {\n            var offset = random.nextDouble();\n            ${e("var d{var} = (node.max_{var} - node.min_{var}) * offset;", { indent: 12 })}\n\n            ${e("oldBody.pos.{var} = node.min_{var} + d{var};", { indent: 12 })}\n            retriesCount -= 1;\n            // Make sure we don't bump it out of the box. If we do, next iteration should fix it\n          } while (retriesCount > 0 && isSamePosition(oldBody.pos, body.pos));\n\n          if (retriesCount === 0 && isSamePosition(oldBody.pos, body.pos)) {\n            // This is very bad, we ran out of precision.\n            // if we do not return from the method we'll get into\n            // infinite loop here. So we sacrifice correctness of layout, and keep the app running\n            // Next layout iteration should get larger bounding box in the first step and fix this\n            return;\n          }\n        }\n        // Next iteration should subdivide node further.\n        insertStack.push(node, oldBody);\n        insertStack.push(node, body);\n      }\n    }\n  }\n}\nreturn createQuadTree;\n\n` } function Oc(t) { let e = Pc(t); return `\n  function isSamePosition(point1, point2) {\n    ${e("var d{var} = Math.abs(point1.{var} - point2.{var});", { indent: 2 })}\n  \n    return ${e("d{var} < 1e-8", { join: " && " })};\n  }  \n` } function Ic(t) { var e = Math.pow(2, t); return `\nfunction setChild(node, idx, child) {\n  ${function () { let t = []; for (let n = 0; n < e; ++n) { let e = 0 === n ? "  " : "  else "; t.push(`${e}if (idx === ${n}) node.quad${n} = child;`) } return t.join("\n") }()}\n}` } function Nc(t) { return `function getChild(node, idx) {\n${function () { let e = [], n = Math.pow(2, t); for (let t = 0; t < n; ++t)e.push(`  if (idx === ${t}) return node.quad${t};`); return e.join("\n") }()}\n  return null;\n}` } function kc(t) { let e = Pc(t), n = Math.pow(2, t); return `\nfunction QuadNode() {\n  // body stored inside this node. In quad tree only leaf nodes (by construction)\n  // contain bodies:\n  this.body = null;\n\n  // Child nodes are stored in quads. Each quad is presented by number:\n  // 0 | 1\n  // -----\n  // 2 | 3\n${function (t) { let e = []; for (let i = 0; i < n; ++i)e.push(`${t}quad${i} = null;`); return e.join("\n") }("  this.")}\n\n  // Total mass of current node\n  this.mass = 0;\n\n  // Center of mass coordinates\n  ${e("this.mass_{var} = 0;", { indent: 2 })}\n\n  // bounding box coordinates\n  ${e("this.min_{var} = 0;", { indent: 2 })}\n  ${e("this.max_{var} = 0;", { indent: 2 })}\n}\n` } function zc() { return "\n/**\n * Our implementation of QuadTree is non-recursive to avoid GC hit\n * This data structure represent stack of elements\n * which we are trying to insert into quad tree.\n */\nfunction InsertStack () {\n    this.stack = [];\n    this.popIdx = 0;\n}\n\nInsertStack.prototype = {\n    isEmpty: function() {\n        return this.popIdx === 0;\n    },\n    push: function (node, body) {\n        var item = this.stack[this.popIdx];\n        if (!item) {\n            // we are trying to avoid memory pressure: create new element\n            // only when absolutely necessary\n            this.stack[this.popIdx] = new InsertStackElement(node, body);\n        } else {\n            item.node = node;\n            item.body = body;\n        }\n        ++this.popIdx;\n    },\n    pop: function () {\n        if (this.popIdx > 0) {\n            return this.stack[--this.popIdx];\n        }\n    },\n    reset: function () {\n        this.popIdx = 0;\n    }\n};\n\nfunction InsertStackElement(node, body) {\n    this.node = node; // QuadTree node\n    this.body = body; // physical body which needs to be inserted to node\n}\n" } ({ get exports() { return Lc }, set exports(t) { Lc = t } }).exports = function (t) { let e = Dc(t); return new Function(e)() }, Lc.generateQuadTreeFunctionBody = Dc, Lc.getInsertStackCode = zc, Lc.getQuadNodeCode = kc, Lc.isSamePosition = Oc, Lc.getChildBodyCode = Nc, Lc.setChildBodyCode = Ic; var Uc = {}; ({ get exports() { return Uc }, set exports(t) { Uc = t } }).exports = function (t) { let e = Bc(t); return new Function("bodies", "settings", "random", e) }, Uc.generateFunctionBody = Bc; const Fc = Sc; function Bc(t) { let e = Fc(t); return `\n  var boundingBox = {\n    ${e("min_{var}: 0, max_{var}: 0,", { indent: 4 })}\n  };\n\n  return {\n    box: boundingBox,\n\n    update: updateBoundingBox,\n\n    reset: resetBoundingBox,\n\n    getBestNewPosition: function (neighbors) {\n      var ${e("base_{var} = 0", { join: ", " })};\n\n      if (neighbors.length) {\n        for (var i = 0; i < neighbors.length; ++i) {\n          let neighborPos = neighbors[i].pos;\n          ${e("base_{var} += neighborPos.{var};", { indent: 10 })}\n        }\n\n        ${e("base_{var} /= neighbors.length;", { indent: 8 })}\n      } else {\n        ${e("base_{var} = (boundingBox.min_{var} + boundingBox.max_{var}) / 2;", { indent: 8 })}\n      }\n\n      var springLength = settings.springLength;\n      return {\n        ${e("{var}: base_{var} + (random.nextDouble() - 0.5) * springLength,", { indent: 8 })}\n      };\n    }\n  };\n\n  function updateBoundingBox() {\n    var i = bodies.length;\n    if (i === 0) return; // No bodies - no borders.\n\n    ${e("var max_{var} = -Infinity;", { indent: 4 })}\n    ${e("var min_{var} = Infinity;", { indent: 4 })}\n\n    while(i--) {\n      // this is O(n), it could be done faster with quadtree, if we check the root node bounds\n      var bodyPos = bodies[i].pos;\n      ${e("if (bodyPos.{var} < min_{var}) min_{var} = bodyPos.{var};", { indent: 6 })}\n      ${e("if (bodyPos.{var} > max_{var}) max_{var} = bodyPos.{var};", { indent: 6 })}\n    }\n\n    ${e("boundingBox.min_{var} = min_{var};", { indent: 4 })}\n    ${e("boundingBox.max_{var} = max_{var};", { indent: 4 })}\n  }\n\n  function resetBoundingBox() {\n    ${e("boundingBox.min_{var} = boundingBox.max_{var} = 0;", { indent: 4 })}\n  }\n` } var jc = {}; const Gc = Sc; function Hc(t) { return `\n  if (!Number.isFinite(options.dragCoefficient)) throw new Error('dragCoefficient is not a finite number');\n\n  return {\n    update: function(body) {\n      ${Gc(t)("body.force.{var} -= options.dragCoefficient * body.velocity.{var};", { indent: 6 })}\n    }\n  };\n` } ({ get exports() { return jc }, set exports(t) { jc = t } }).exports = function (t) { let e = Hc(t); return new Function("options", e) }, jc.generateCreateDragForceFunctionBody = Hc; var Vc = {}; const Wc = Sc; function qc(t) { let e = Wc(t); return `\n  if (!Number.isFinite(options.springCoefficient)) throw new Error('Spring coefficient is not a number');\n  if (!Number.isFinite(options.springLength)) throw new Error('Spring length is not a number');\n\n  return {\n    /**\n     * Updates forces acting on a spring\n     */\n    update: function (spring) {\n      var body1 = spring.from;\n      var body2 = spring.to;\n      var length = spring.length < 0 ? options.springLength : spring.length;\n      ${e("var d{var} = body2.pos.{var} - body1.pos.{var};", { indent: 6 })}\n      var r = Math.sqrt(${e("d{var} * d{var}", { join: " + " })});\n\n      if (r === 0) {\n        ${e("d{var} = (random.nextDouble() - 0.5) / 50;", { indent: 8 })}\n        r = Math.sqrt(${e("d{var} * d{var}", { join: " + " })});\n      }\n\n      var d = r - length;\n      var coefficient = ((spring.coefficient > 0) ? spring.coefficient : options.springCoefficient) * d / r;\n\n      ${e("body1.force.{var} += coefficient * d{var}", { indent: 6 })};\n      body1.springCount += 1;\n      body1.springLength += r;\n\n      ${e("body2.force.{var} -= coefficient * d{var}", { indent: 6 })};\n      body2.springCount += 1;\n      body2.springLength += r;\n    }\n  };\n` } ({ get exports() { return Vc }, set exports(t) { Vc = t } }).exports = function (t) { let e = qc(t); return new Function("options", "random", e) }, Vc.generateCreateSpringForceFunctionBody = qc; var Xc = {}; const Yc = Sc; function $c(t) { let e = Yc(t); return `\n  var length = bodies.length;\n  if (length === 0) return 0;\n\n  ${e("var d{var} = 0, t{var} = 0;", { indent: 2 })}\n\n  for (var i = 0; i < length; ++i) {\n    var body = bodies[i];\n    if (body.isPinned) continue;\n\n    if (adaptiveTimeStepWeight && body.springCount) {\n      timeStep = (adaptiveTimeStepWeight * body.springLength/body.springCount);\n    }\n\n    var coeff = timeStep / body.mass;\n\n    ${e("body.velocity.{var} += coeff * body.force.{var};", { indent: 4 })}\n    ${e("var v{var} = body.velocity.{var};", { indent: 4 })}\n    var v = Math.sqrt(${e("v{var} * v{var}", { join: " + " })});\n\n    if (v > 1) {\n      // We normalize it so that we move within timeStep range. \n      // for the case when v <= 1 - we let velocity to fade out.\n      ${e("body.velocity.{var} = v{var} / v;", { indent: 6 })}\n    }\n\n    ${e("d{var} = timeStep * body.velocity.{var};", { indent: 4 })}\n\n    ${e("body.pos.{var} += d{var};", { indent: 4 })}\n\n    ${e("t{var} += Math.abs(d{var});", { indent: 4 })}\n  }\n\n  return (${e("t{var} * t{var}", { join: " + " })})/length;\n` } var Zc, Jc, Kc, Qc; ({ get exports() { return Xc }, set exports(t) { Xc = t } }).exports = function (t) { let e = $c(t); return new Function("bodies", "timeStep", "adaptiveTimeStepWeight", e) }, Xc.generateIntegratorFunctionBody = $c; var tu, eu = {}, nu = { get exports() { return eu }, set exports(t) { eu = t } }; var iu = function (t) { var e = Jc ? Zc : (Jc = 1, Zc = function (t, e, n, i) { this.from = t, this.to = e, this.length = n, this.coefficient = i }), n = (Qc || (Qc = 1, Kc = function t(e, n) { var i; if (e || (e = {}), n) for (i in n) if (n.hasOwnProperty(i)) { var r = e.hasOwnProperty(i), a = typeof n[i]; r && typeof e[i] === a ? "object" === a && (e[i] = t(e[i], n[i])) : e[i] = n[i] } return e }), Kc), i = dc; if (t) { if (void 0 !== t.springCoeff) throw new Error("springCoeff was renamed to springCoefficient"); if (void 0 !== t.dragCoeff) throw new Error("dragCoeff was renamed to dragCoefficient") } t = n(t, { springLength: 10, springCoefficient: .8, gravity: -12, theta: .8, dragCoefficient: .9, timeStep: .5, adaptiveTimeStepWeight: 0, dimensions: 2, debug: !1 }); var r = uu[t.dimensions]; if (!r) { var a = t.dimensions; r = { Body: ru(a, t.debug), createQuadTree: au(a), createBounds: ou(a), createDragForce: su(a), createSpringForce: lu(a), integrate: cu(a) }, uu[a] = r } var o = r.Body, s = r.createQuadTree, l = r.createBounds, c = r.createDragForce, u = r.createSpringForce, h = r.integrate, d = function () { if (tu) return eu; function t(t) { return new e("number" == typeof t ? t : +new Date) } function e(t) { this.seed = t } function n(t) { return Math.sqrt(2 * Math.PI / t) * Math.pow(1 / Math.E * (t + 1 / (12 * t - 1 / (10 * t))), t) } function i() { var t = this.seed; return t = 4294967295 & (3042594569 ^ (t = 4251993797 + (t = 4294967295 & (3550635116 + (t = 374761393 + (t = 4294967295 & (3345072700 ^ (t = t + 2127912214 + (t << 12) & 4294967295) ^ t >>> 19)) + (t << 5) & 4294967295) ^ t << 9)) + (t << 3) & 4294967295) ^ t >>> 16), this.seed = t, (268435455 & t) / 268435456 } return tu = 1, nu.exports = t, eu.random = t, eu.randomIterator = function (e, n) { var i = n || t(); if ("function" != typeof i.next) throw new Error("customRandom does not match expected API: next() function is missing"); return { forEach: function (t) { var n, r, a; for (n = e.length - 1; n > 0; --n)r = i.next(n + 1), a = e[r], e[r] = e[n], e[n] = a, t(a); e.length && t(e[0]) }, shuffle: function () { var t, n, r; for (t = e.length - 1; t > 0; --t)n = i.next(t + 1), r = e[n], e[n] = e[t], e[t] = r; return e } } }, e.prototype.next = function (t) { return Math.floor(this.nextDouble() * t) }, e.prototype.nextDouble = i, e.prototype.uniform = i, e.prototype.gaussian = function () { var t, e, n; do { t = (e = 2 * this.nextDouble() - 1) * e + (n = 2 * this.nextDouble() - 1) * n } while (t >= 1 || 0 === t); return e * Math.sqrt(-2 * Math.log(t) / t) }, e.prototype.levy = function () { var t = 1.5, e = Math.pow(n(2.5) * Math.sin(Math.PI * t / 2) / (n(1.25) * t * Math.pow(2, .25)), 1 / t); return this.gaussian() * e / Math.pow(Math.abs(this.gaussian()), 1 / t) }, eu }().random(42), p = [], f = [], m = s(t, d), g = l(p, t, d), v = u(t, d), _ = c(t), y = [], x = new Map, b = 0; S("nbody", (function () { if (0 === p.length) return; m.insertBodies(p); var t = p.length; for (; t--;) { var e = p[t]; e.isPinned || (e.reset(), m.updateBodyForce(e), _.update(e)) } })), S("spring", (function () { var t = f.length; for (; t--;)v.update(f[t]) })); var w = { bodies: p, quadTree: m, springs: f, settings: t, addForce: S, removeForce: function (t) { var e = y.indexOf(x.get(t)); if (e < 0) return; y.splice(e, 1), x.delete(t) }, getForces: function () { return x }, step: function () { for (var e = 0; e < y.length; ++e)y[e](b); var n = h(p, t.timeStep, t.adaptiveTimeStepWeight); return b += 1, n }, addBody: function (t) { if (!t) throw new Error("Body is required"); return p.push(t), t }, addBodyAt: function (t) { if (!t) throw new Error("Body position is required"); var e = (t => new o(t))(t); return p.push(e), e }, removeBody: function (t) { if (t) { var e = p.indexOf(t); if (!(e < 0)) return p.splice(e, 1), 0 === p.length && g.reset(), !0 } }, addSpring: function (t, n, i, r) { if (!t || !n) throw new Error("Cannot add null spring to force simulator"); "number" != typeof i && (i = -1); var a = new e(t, n, i, r >= 0 ? r : -1); return f.push(a), a }, getTotalMovement: function () { return 0 }, removeSpring: function (t) { if (t) { var e = f.indexOf(t); return e > -1 ? (f.splice(e, 1), !0) : void 0 } }, getBestNewBodyPosition: function (t) { return g.getBestNewPosition(t) }, getBBox: M, getBoundingBox: M, invalidateBBox: function () { console.warn("invalidateBBox() is deprecated, bounds always recomputed on `getBBox()` call") }, gravity: function (e) { return void 0 !== e ? (t.gravity = e, m.options({ gravity: e }), this) : t.gravity }, theta: function (e) { return void 0 !== e ? (t.theta = e, m.options({ theta: e }), this) : t.theta }, random: d }; return function (t, e) { for (var n in t) hu(t, e, n) }(t, w), i(w), w; function M() { return g.update(), g.box } function S(t, e) { if (x.has(t)) throw new Error("Force " + t + " is already added"); x.set(t, e), y.push(e) } }, ru = bc, au = Lc, ou = Uc, su = jc, lu = Vc, cu = Xc, uu = {}; function hu(t, e, n) { if (t.hasOwnProperty(n) && "function" != typeof e[n]) { var i = Number.isFinite(t[n]); e[n] = i ? function (i) { if (void 0 !== i) { if (!Number.isFinite(i)) throw new Error("Value of " + n + " should be a valid number."); return t[n] = i, e } return t[n] } : function (i) { return void 0 !== i ? (t[n] = i, e) : t[n] } } } xc.exports = function (t, e) { if (!t) throw new Error("Graph structure cannot be undefined"); var n = (e && e.createSimulator || iu)(e); if (Array.isArray(e)) throw new Error("Physics settings is expected to be an object"); var i = t.version > 19 ? function (e) { var n = t.getLinks(e); return n ? 1 + n.size / 3 : 1 } : function (e) { var n = t.getLinks(e); return n ? 1 + n.length / 3 : 1 }; e && "function" == typeof e.nodeMass && (i = e.nodeMass); var r = new Map, a = {}, o = 0, s = n.settings.springTransform || pu; o = 0, t.forEachNode((function (t) { p(t.id), o += 1 })), t.forEachLink(m), t.on("changed", d); var l = !1, c = { step: function () { if (0 === o) return u(!0), !0; var t = n.step(); c.lastMove = t, c.fire("step"); var e = t / o <= .01; return u(e), e }, getNodePosition: function (t) { return _(t).pos }, setNodePosition: function (t) { var e = _(t); e.setPosition.apply(e, Array.prototype.slice.call(arguments, 1)) }, getLinkPosition: function (t) { var e = a[t]; if (e) return { from: e.from.pos, to: e.to.pos } }, getGraphRect: function () { return n.getBBox() }, forEachBody: h, pinNode: function (t, e) { _(t.id).isPinned = !!e }, isNodePinned: function (t) { return _(t.id).isPinned }, dispose: function () { t.off("changed", d), c.fire("disposed") }, getBody: function (t) { return r.get(t) }, getSpring: function (e, n) { var i; if (void 0 === n) i = "object" != typeof e ? e : e.id; else { var r = t.hasLink(e, n); if (!r) return; i = r.id } return a[i] }, getForceVectorLength: function () { var t = 0, e = 0; return h((function (n) { t += Math.abs(n.force.x), e += Math.abs(n.force.y) })), Math.sqrt(t * t + e * e) }, simulator: n, graph: t, lastMove: 0 }; return du(c), c; function u(t) { var e; l !== t && (l = t, e = t, c.fire("stable", e)) } function h(t) { r.forEach(t) } function d(e) { for (var n = 0; n < e.length; ++n) { var i = e[n]; "add" === i.changeType ? (i.node && p(i.node.id), i.link && m(i.link)) : "remove" === i.changeType && (i.node && f(i.node), i.link && g(i.link)) } o = t.getNodesCount() } function p(e) { var i = r.get(e); if (!i) { var a = t.getNode(e); if (!a) throw new Error("initBody() was called with unknown node id"); var o = a.position; if (!o) { var s = function (t) { var e = []; if (!t.links) return e; for (var n = Math.min(t.links.length, 2), i = 0; i < n; ++i) { var a = t.links[i], o = a.fromId !== t.id ? r.get(a.fromId) : r.get(a.toId); o && o.pos && e.push(o) } return e }(a); o = n.getBestNewBodyPosition(s) } (i = n.addBodyAt(o)).id = e, r.set(e, i), v(e), function (t) { return t && (t.isPinned || t.data && t.data.isPinned) }(a) && (i.isPinned = !0) } } function f(t) { var e = t.id, i = r.get(e); i && (r.delete(e), n.removeBody(i)) } function m(t) { v(t.fromId), v(t.toId); var e = r.get(t.fromId), i = r.get(t.toId), o = n.addSpring(e, i, t.length); s(t, o), a[t.id] = o } function g(e) { var i = a[e.id]; if (i) { var r = t.getNode(e.fromId), o = t.getNode(e.toId); r && v(r.id), o && v(o.id), delete a[e.id], n.removeSpring(i) } } function v(t) { var e = r.get(t); if (e.mass = i(t), Number.isNaN(e.mass)) throw new Error("Node mass should be a number") } function _(t) { var e = r.get(t); return e || (p(t), e = r.get(t)), e } }, yc.simulator = iu; var du = dc; function pu() { } function fu(t, e, n) { var i, r, a, o, s; function l() { var c = Date.now() - o; c < e && c >= 0 ? i = setTimeout(l, e - c) : (i = null, n || (s = t.apply(a, r), a = r = null)) } null == e && (e = 100); var c = function () { a = this, r = arguments, o = Date.now(); var c = n && !i; return i || (i = setTimeout(l, e)), c && (s = t.apply(a, r), a = r = null), s }; return c.clear = function () { i && (clearTimeout(i), i = null) }, c.flush = function () { i && (s = t.apply(a, r), a = r = null, clearTimeout(i), i = null) }, c } fu.debounce = fu; var mu = fu; function gu(t, e) { for (var n = 0; n < e.length; n++) { var i = e[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, (r = i.key, a = void 0, "symbol" == typeof (a = function (t, e) { if ("object" != typeof t || null === t) return t; var n = t[Symbol.toPrimitive]; if (void 0 !== n) { var i = n.call(t, e || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value.") } return ("string" === e ? String : Number)(t) }(r, "string")) ? a : String(a)), i) } var r, a } function vu(t, e, n) { return e && gu(t.prototype, e), n && gu(t, n), Object.defineProperty(t, "prototype", { writable: !1 }), t } function _u(t, e) { return function (t) { if (Array.isArray(t)) return t }(t) || function (t, e) { var n = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"]; if (null != n) { var i, r, a, o, s = [], l = !0, c = !1; try { if (a = (n = n.call(t)).next, 0 === e) { if (Object(n) !== n) return; l = !1 } else for (; !(l = (i = a.call(n)).done) && (s.push(i.value), s.length !== e); l = !0); } catch (t) { c = !0, r = t } finally { try { if (!l && null != n.return && (o = n.return(), Object(o) !== o)) return } finally { if (c) throw r } } return s } }(t, e) || function (t, e) { if (!t) return; if ("string" == typeof t) return yu(t, e); var n = Object.prototype.toString.call(t).slice(8, -1); "Object" === n && t.constructor && (n = t.constructor.name); if ("Map" === n || "Set" === n) return Array.from(t); if ("Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return yu(t, e) }(t, e) || function () { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function yu(t, e) { (null == e || e > t.length) && (e = t.length); for (var n = 0, i = new Array(e); n < e; n++)i[n] = t[n]; return i } var xu = vu((function t(e, n) { var i = n.default, r = void 0 === i ? null : i, a = n.triggerUpdate, o = void 0 === a || a, s = n.onChange, l = void 0 === s ? function (t, e) { } : s; !function (t, e) { if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function") }(this, t), this.name = e, this.defaultVal = r, this.triggerUpdate = o, this.onChange = l })); function bu(t) { var e = t.stateInit, n = void 0 === e ? function () { return {} } : e, i = t.props, r = void 0 === i ? {} : i, a = t.methods, o = void 0 === a ? {} : a, s = t.aliases, l = void 0 === s ? {} : s, c = t.init, u = void 0 === c ? function () { } : c, h = t.update, d = void 0 === h ? function () { } : h, p = Object.keys(r).map((function (t) { return new xu(t, r[t]) })); return function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, e = Object.assign({}, n instanceof Function ? n(t) : n, { initialised: !1 }), i = {}; function r(e) { return a(e, t), s(), r } var a = function (t, n) { u.call(r, t, e, n), e.initialised = !0 }, s = mu((function () { e.initialised && (d.call(r, e, i), i = {}) }), 1); return p.forEach((function (t) { r[t.name] = function (t) { var n = t.name, a = t.triggerUpdate, o = void 0 !== a && a, l = t.onChange, c = void 0 === l ? function (t, e) { } : l, u = t.defaultVal, h = void 0 === u ? null : u; return function (t) { var a = e[n]; if (!arguments.length) return a; var l = void 0 === t ? h : t; return e[n] = l, c.call(r, l, e, a), !i.hasOwnProperty(n) && (i[n] = a), o && s(), r } }(t) })), Object.keys(o).forEach((function (t) { r[t] = function () { for (var n, i = arguments.length, a = new Array(i), s = 0; s < i; s++)a[s] = arguments[s]; return (n = o[t]).call.apply(n, [r, e].concat(a)) } })), Object.entries(l).forEach((function (t) { var e = _u(t, 2), n = e[0], i = e[1]; return r[n] = r[i] })), r.resetProps = function () { return p.forEach((function (t) { r[t.name](t.defaultVal) })), r }, r.resetProps(), e._rerender = s, r } } var wu = function (t) { return t instanceof Function ? t : "string" == typeof t ? function (e) { return e[t] } : function (e) { return t } }; class Mu extends Map { constructor(t, e = Eu) { if (super(), Object.defineProperties(this, { _intern: { value: new Map }, _key: { value: e } }), null != t) for (const [e, n] of t) this.set(e, n) } get(t) { return super.get(Su(this, t)) } has(t) { return super.has(Su(this, t)) } set(t, e) { return super.set(function ({ _intern: t, _key: e }, n) { const i = e(n); return t.has(i) ? t.get(i) : (t.set(i, n), n) }(this, t), e) } delete(t) { return super.delete(function ({ _intern: t, _key: e }, n) { const i = e(n); t.has(i) && (n = t.get(i), t.delete(i)); return n }(this, t)) } } function Su({ _intern: t, _key: e }, n) { const i = e(n); return t.has(i) ? t.get(i) : n } function Eu(t) { return null !== t && "object" == typeof t ? t.valueOf() : t } function Tu(t, e) { let n; if (void 0 === e) for (const e of t) null != e && (n < e || void 0 === n && e >= e) && (n = e); else { let i = -1; for (let r of t) null != (r = e(r, ++i, t)) && (n < r || void 0 === n && r >= r) && (n = r) } return n } function Au(t, e) { let n; if (void 0 === e) for (const e of t) null != e && (n > e || void 0 === n && e >= e) && (n = e); else { let i = -1; for (let r of t) null != (r = e(r, ++i, t)) && (n > r || void 0 === n && r >= r) && (n = r) } return n } function Cu(t, e) { if (null == t) return {}; var n, i, r = function (t, e) { if (null == t) return {}; var n, i, r = {}, a = Object.keys(t); for (i = 0; i < a.length; i++)n = a[i], e.indexOf(n) >= 0 || (r[n] = t[n]); return r }(t, e); if (Object.getOwnPropertySymbols) { var a = Object.getOwnPropertySymbols(t); for (i = 0; i < a.length; i++)n = a[i], e.indexOf(n) >= 0 || Object.prototype.propertyIsEnumerable.call(t, n) && (r[n] = t[n]) } return r } function Lu(t, e) { return function (t) { if (Array.isArray(t)) return t }(t) || function (t, e) { var n = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"]; if (null != n) { var i, r, a, o, s = [], l = !0, c = !1; try { if (a = (n = n.call(t)).next, 0 === e) { if (Object(n) !== n) return; l = !1 } else for (; !(l = (i = a.call(n)).done) && (s.push(i.value), s.length !== e); l = !0); } catch (t) { c = !0, r = t } finally { try { if (!l && null != n.return && (o = n.return(), Object(o) !== o)) return } finally { if (c) throw r } } return s } }(t, e) || Ru(t, e) || function () { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function Pu(t) { return function (t) { if (Array.isArray(t)) return Du(t) }(t) || function (t) { if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t) }(t) || Ru(t) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function Ru(t, e) { if (t) { if ("string" == typeof t) return Du(t, e); var n = Object.prototype.toString.call(t).slice(8, -1); return "Object" === n && t.constructor && (n = t.constructor.name), "Map" === n || "Set" === n ? Array.from(t) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? Du(t, e) : void 0 } } function Du(t, e) { (null == e || e > t.length) && (e = t.length); for (var n = 0, i = new Array(e); n < e; n++)i[n] = t[n]; return i } function Ou(t) { var e = function (t, e) { if ("object" != typeof t || null === t) return t; var n = t[Symbol.toPrimitive]; if (void 0 !== n) { var i = n.call(t, e || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value.") } return ("string" === e ? String : Number)(t) }(t, "string"); return "symbol" == typeof e ? e : String(e) } var Iu = function () { var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [], e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], n = !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], i = arguments.length > 3 && void 0 !== arguments[3] && arguments[3], r = (e instanceof Array ? e.length ? e : [void 0] : [e]).map((function (t) { return { keyAccessor: t, isProp: !(t instanceof Function) } })), a = t.reduce((function (t, e) { var i = t, a = e; return r.forEach((function (t, e) { var o, s = t.keyAccessor; if (t.isProp) { var l = a, c = l[s], u = Cu(l, [s].map(Ou)); o = c, a = u } else o = s(a, e); e + 1 < r.length ? (i.hasOwnProperty(o) || (i[o] = {}), i = i[o]) : n ? (i.hasOwnProperty(o) || (i[o] = []), i[o].push(a)) : i[o] = a })), t }), {}); n instanceof Function && function t(e) { var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1; i === r.length ? Object.keys(e).forEach((function (t) { return e[t] = n(e[t]) })) : Object.values(e).forEach((function (e) { return t(e, i + 1) })) }(a); var o = a; return i && (o = [], function t(e) { var n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : []; n.length === r.length ? o.push({ keys: n, vals: e }) : Object.entries(e).forEach((function (e) { var i = Lu(e, 2), r = i[0], a = i[1]; return t(a, [].concat(Pu(n), [r])) })) }(a), e instanceof Array && 0 === e.length && 1 === o.length && (o[0].keys = [])), o }; function Nu(t, e) { var n = Object.keys(t); if (Object.getOwnPropertySymbols) { var i = Object.getOwnPropertySymbols(t); e && (i = i.filter((function (e) { return Object.getOwnPropertyDescriptor(t, e).enumerable }))), n.push.apply(n, i) } return n } function ku(t, e, n) { return (e = function (t) { var e = function (t, e) { if ("object" != typeof t || null === t) return t; var n = t[Symbol.toPrimitive]; if (void 0 !== n) { var i = n.call(t, e || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value.") } return ("string" === e ? String : Number)(t) }(t, "string"); return "symbol" == typeof e ? e : String(e) }(e)) in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t } function zu(t, e) { if (null == t) return {}; var n, i, r = function (t, e) { if (null == t) return {}; var n, i, r = {}, a = Object.keys(t); for (i = 0; i < a.length; i++)n = a[i], e.indexOf(n) >= 0 || (r[n] = t[n]); return r }(t, e); if (Object.getOwnPropertySymbols) { var a = Object.getOwnPropertySymbols(t); for (i = 0; i < a.length; i++)n = a[i], e.indexOf(n) >= 0 || Object.prototype.propertyIsEnumerable.call(t, n) && (r[n] = t[n]) } return r } function Uu(t, e) { return function (t) { if (Array.isArray(t)) return t }(t) || function (t, e) { var n = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"]; if (null != n) { var i, r, a, o, s = [], l = !0, c = !1; try { if (a = (n = n.call(t)).next, 0 === e) { if (Object(n) !== n) return; l = !1 } else for (; !(l = (i = a.call(n)).done) && (s.push(i.value), s.length !== e); l = !0); } catch (t) { c = !0, r = t } finally { try { if (!l && null != n.return && (o = n.return(), Object(o) !== o)) return } finally { if (c) throw r } } return s } }(t, e) || Bu(t, e) || function () { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function Fu(t) { return function (t) { if (Array.isArray(t)) return ju(t) }(t) || function (t) { if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t) }(t) || Bu(t) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function Bu(t, e) { if (t) { if ("string" == typeof t) return ju(t, e); var n = Object.prototype.toString.call(t).slice(8, -1); return "Object" === n && t.constructor && (n = t.constructor.name), "Map" === n || "Set" === n ? Array.from(t) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? ju(t, e) : void 0 } } function ju(t, e) { (null == e || e > t.length) && (e = t.length); for (var n = 0, i = new Array(e); n < e; n++)i[n] = t[n]; return i } var Gu = ["createObj", "updateObj", "exitObj", "objBindAttr", "dataBindAttr"]; function Hu(t, e, n) { var i = n.objBindAttr, r = void 0 === i ? "__obj" : i, a = n.dataBindAttr, o = void 0 === a ? "__data" : a, s = n.idAccessor, l = n.purge, c = void 0 !== l && l, u = function (t) { return t.hasOwnProperty(o) }, h = e.filter((function (t) { return !u(t) })), d = e.filter(u).map((function (t) { return t[o] })), p = c ? { enter: t, exit: d, update: [] } : function (t, e, n) { var i = { enter: [], update: [], exit: [] }; if (n) { var r = Iu(t, n, !1), a = Iu(e, n, !1), o = Object.assign({}, r, a); Object.entries(o).forEach((function (t) { var e = Uu(t, 2), n = e[0], o = e[1], s = r.hasOwnProperty(n) ? a.hasOwnProperty(n) ? "update" : "exit" : "enter"; i[s].push("update" === s ? [r[n], a[n]] : o) })) } else { var s = new Set(t), l = new Set(e); new Set([].concat(Fu(s), Fu(l))).forEach((function (t) { var e = s.has(t) ? l.has(t) ? "update" : "exit" : "enter"; i[e].push("update" === e ? [t, t] : t) })) } return i }(d, t, s); return p.update = p.update.map((function (t) { var e = Uu(t, 2), n = e[0], i = e[1]; return n !== i && (i[r] = n[r], i[r][o] = i), i })), p.exit = p.exit.concat(h.map((function (t) { return ku({}, r, t) }))), p } function Vu(t, e, n, i, r) { var a = r.createObj, o = void 0 === a ? function (t) { return {} } : a, s = r.updateObj, l = void 0 === s ? function (t, e) { } : s, c = r.exitObj, u = void 0 === c ? function (t) { } : c, h = r.objBindAttr, d = void 0 === h ? "__obj" : h, p = r.dataBindAttr, f = void 0 === p ? "__data" : p, m = zu(r, Gu), g = Hu(t, e, function (t) { for (var e = 1; e < arguments.length; e++) { var n = null != arguments[e] ? arguments[e] : {}; e % 2 ? Nu(Object(n), !0).forEach((function (e) { ku(t, e, n[e]) })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : Nu(Object(n)).forEach((function (e) { Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e)) })) } return t }({ objBindAttr: d, dataBindAttr: f }, m)), v = g.enter, _ = g.update; g.exit.forEach((function (t) { var e = t[d]; delete t[d], u(e), i(e) })); var y = function (t) { var e = []; return t.forEach((function (t) { var n = o(t); n && (n[f] = t, t[d] = n, e.push(n)) })), e }(v); !function (t) { t.forEach((function (t) { var e = t[d]; e && (e[f] = t, l(e, t)) })) }([].concat(Fu(v), Fu(_))), y.forEach(n) } function Wu(t, e) { switch (arguments.length) { case 0: break; case 1: this.range(t); break; default: this.range(e).domain(t) }return this } const qu = Symbol("implicit"); var Xu = function (t) { for (var e = t.length / 6 | 0, n = new Array(e), i = 0; i < e;)n[i] = "#" + t.slice(6 * i, 6 * ++i); return n }("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"); function Yu(t) { return Yu = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) { return typeof t } : function (t) { return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t }, Yu(t) } var $u = /^\s+/, Zu = /\s+$/; function Ju(t, e) { if (e = e || {}, (t = t || "") instanceof Ju) return t; if (!(this instanceof Ju)) return new Ju(t, e); var n = function (t) { var e = { r: 0, g: 0, b: 0 }, n = 1, i = null, r = null, a = null, o = !1, s = !1; "string" == typeof t && (t = function (t) { t = t.replace($u, "").replace(Zu, "").toLowerCase(); var e, n = !1; if (fh[t]) t = fh[t], n = !0; else if ("transparent" == t) return { r: 0, g: 0, b: 0, a: 0, format: "name" }; if (e = Ah.rgb.exec(t)) return { r: e[1], g: e[2], b: e[3] }; if (e = Ah.rgba.exec(t)) return { r: e[1], g: e[2], b: e[3], a: e[4] }; if (e = Ah.hsl.exec(t)) return { h: e[1], s: e[2], l: e[3] }; if (e = Ah.hsla.exec(t)) return { h: e[1], s: e[2], l: e[3], a: e[4] }; if (e = Ah.hsv.exec(t)) return { h: e[1], s: e[2], v: e[3] }; if (e = Ah.hsva.exec(t)) return { h: e[1], s: e[2], v: e[3], a: e[4] }; if (e = Ah.hex8.exec(t)) return { r: yh(e[1]), g: yh(e[2]), b: yh(e[3]), a: Mh(e[4]), format: n ? "name" : "hex8" }; if (e = Ah.hex6.exec(t)) return { r: yh(e[1]), g: yh(e[2]), b: yh(e[3]), format: n ? "name" : "hex" }; if (e = Ah.hex4.exec(t)) return { r: yh(e[1] + "" + e[1]), g: yh(e[2] + "" + e[2]), b: yh(e[3] + "" + e[3]), a: Mh(e[4] + "" + e[4]), format: n ? "name" : "hex8" }; if (e = Ah.hex3.exec(t)) return { r: yh(e[1] + "" + e[1]), g: yh(e[2] + "" + e[2]), b: yh(e[3] + "" + e[3]), format: n ? "name" : "hex" }; return !1 }(t)); "object" == Yu(t) && (Ch(t.r) && Ch(t.g) && Ch(t.b) ? (l = t.r, c = t.g, u = t.b, e = { r: 255 * vh(l, 255), g: 255 * vh(c, 255), b: 255 * vh(u, 255) }, o = !0, s = "%" === String(t.r).substr(-1) ? "prgb" : "rgb") : Ch(t.h) && Ch(t.s) && Ch(t.v) ? (i = bh(t.s), r = bh(t.v), e = function (t, e, n) { t = 6 * vh(t, 360), e = vh(e, 100), n = vh(n, 100); var i = Math.floor(t), r = t - i, a = n * (1 - e), o = n * (1 - r * e), s = n * (1 - (1 - r) * e), l = i % 6, c = [n, o, a, a, s, n][l], u = [s, n, n, o, a, a][l], h = [a, a, s, n, n, o][l]; return { r: 255 * c, g: 255 * u, b: 255 * h } }(t.h, i, r), o = !0, s = "hsv") : Ch(t.h) && Ch(t.s) && Ch(t.l) && (i = bh(t.s), a = bh(t.l), e = function (t, e, n) { var i, r, a; function o(t, e, n) { return n < 0 && (n += 1), n > 1 && (n -= 1), n < 1 / 6 ? t + 6 * (e - t) * n : n < .5 ? e : n < 2 / 3 ? t + (e - t) * (2 / 3 - n) * 6 : t } if (t = vh(t, 360), e = vh(e, 100), n = vh(n, 100), 0 === e) i = r = a = n; else { var s = n < .5 ? n * (1 + e) : n + e - n * e, l = 2 * n - s; i = o(l, s, t + 1 / 3), r = o(l, s, t), a = o(l, s, t - 1 / 3) } return { r: 255 * i, g: 255 * r, b: 255 * a } }(t.h, i, a), o = !0, s = "hsl"), t.hasOwnProperty("a") && (n = t.a)); var l, c, u; return n = gh(n), { ok: o, format: t.format || s, r: Math.min(255, Math.max(e.r, 0)), g: Math.min(255, Math.max(e.g, 0)), b: Math.min(255, Math.max(e.b, 0)), a: n } }(t); this._originalInput = t, this._r = n.r, this._g = n.g, this._b = n.b, this._a = n.a, this._roundA = Math.round(100 * this._a) / 100, this._format = e.format || n.format, this._gradientType = e.gradientType, this._r < 1 && (this._r = Math.round(this._r)), this._g < 1 && (this._g = Math.round(this._g)), this._b < 1 && (this._b = Math.round(this._b)), this._ok = n.ok } function Ku(t, e, n) { t = vh(t, 255), e = vh(e, 255), n = vh(n, 255); var i, r, a = Math.max(t, e, n), o = Math.min(t, e, n), s = (a + o) / 2; if (a == o) i = r = 0; else { var l = a - o; switch (r = s > .5 ? l / (2 - a - o) : l / (a + o), a) { case t: i = (e - n) / l + (e < n ? 6 : 0); break; case e: i = (n - t) / l + 2; break; case n: i = (t - e) / l + 4 }i /= 6 } return { h: i, s: r, l: s } } function Qu(t, e, n) { t = vh(t, 255), e = vh(e, 255), n = vh(n, 255); var i, r, a = Math.max(t, e, n), o = Math.min(t, e, n), s = a, l = a - o; if (r = 0 === a ? 0 : l / a, a == o) i = 0; else { switch (a) { case t: i = (e - n) / l + (e < n ? 6 : 0); break; case e: i = (n - t) / l + 2; break; case n: i = (t - e) / l + 4 }i /= 6 } return { h: i, s: r, v: s } } function th(t, e, n, i) { var r = [xh(Math.round(t).toString(16)), xh(Math.round(e).toString(16)), xh(Math.round(n).toString(16))]; return i && r[0].charAt(0) == r[0].charAt(1) && r[1].charAt(0) == r[1].charAt(1) && r[2].charAt(0) == r[2].charAt(1) ? r[0].charAt(0) + r[1].charAt(0) + r[2].charAt(0) : r.join("") } function eh(t, e, n, i) { return [xh(wh(i)), xh(Math.round(t).toString(16)), xh(Math.round(e).toString(16)), xh(Math.round(n).toString(16))].join("") } function nh(t, e) { e = 0 === e ? 0 : e || 10; var n = Ju(t).toHsl(); return n.s -= e / 100, n.s = _h(n.s), Ju(n) } function ih(t, e) { e = 0 === e ? 0 : e || 10; var n = Ju(t).toHsl(); return n.s += e / 100, n.s = _h(n.s), Ju(n) } function rh(t) { return Ju(t).desaturate(100) } function ah(t, e) { e = 0 === e ? 0 : e || 10; var n = Ju(t).toHsl(); return n.l += e / 100, n.l = _h(n.l), Ju(n) } function oh(t, e) { e = 0 === e ? 0 : e || 10; var n = Ju(t).toRgb(); return n.r = Math.max(0, Math.min(255, n.r - Math.round(-e / 100 * 255))), n.g = Math.max(0, Math.min(255, n.g - Math.round(-e / 100 * 255))), n.b = Math.max(0, Math.min(255, n.b - Math.round(-e / 100 * 255))), Ju(n) } function sh(t, e) { e = 0 === e ? 0 : e || 10; var n = Ju(t).toHsl(); return n.l -= e / 100, n.l = _h(n.l), Ju(n) } function lh(t, e) { var n = Ju(t).toHsl(), i = (n.h + e) % 360; return n.h = i < 0 ? 360 + i : i, Ju(n) } function ch(t) { var e = Ju(t).toHsl(); return e.h = (e.h + 180) % 360, Ju(e) } function uh(t, e) { if (isNaN(e) || e <= 0) throw new Error("Argument to polyad must be a positive number"); for (var n = Ju(t).toHsl(), i = [Ju(t)], r = 360 / e, a = 1; a < e; a++)i.push(Ju({ h: (n.h + a * r) % 360, s: n.s, l: n.l })); return i } function hh(t) { var e = Ju(t).toHsl(), n = e.h; return [Ju(t), Ju({ h: (n + 72) % 360, s: e.s, l: e.l }), Ju({ h: (n + 216) % 360, s: e.s, l: e.l })] } function dh(t, e, n) { e = e || 6, n = n || 30; var i = Ju(t).toHsl(), r = 360 / n, a = [Ju(t)]; for (i.h = (i.h - (r * e >> 1) + 720) % 360; --e;)i.h = (i.h + r) % 360, a.push(Ju(i)); return a } function ph(t, e) { e = e || 6; for (var n = Ju(t).toHsv(), i = n.h, r = n.s, a = n.v, o = [], s = 1 / e; e--;)o.push(Ju({ h: i, s: r, v: a })), a = (a + s) % 1; return o } Ju.prototype = { isDark: function () { return this.getBrightness() < 128 }, isLight: function () { return !this.isDark() }, isValid: function () { return this._ok }, getOriginalInput: function () { return this._originalInput }, getFormat: function () { return this._format }, getAlpha: function () { return this._a }, getBrightness: function () { var t = this.toRgb(); return (299 * t.r + 587 * t.g + 114 * t.b) / 1e3 }, getLuminance: function () { var t, e, n, i = this.toRgb(); return t = i.r / 255, e = i.g / 255, n = i.b / 255, .2126 * (t <= .03928 ? t / 12.92 : Math.pow((t + .055) / 1.055, 2.4)) + .7152 * (e <= .03928 ? e / 12.92 : Math.pow((e + .055) / 1.055, 2.4)) + .0722 * (n <= .03928 ? n / 12.92 : Math.pow((n + .055) / 1.055, 2.4)) }, setAlpha: function (t) { return this._a = gh(t), this._roundA = Math.round(100 * this._a) / 100, this }, toHsv: function () { var t = Qu(this._r, this._g, this._b); return { h: 360 * t.h, s: t.s, v: t.v, a: this._a } }, toHsvString: function () { var t = Qu(this._r, this._g, this._b), e = Math.round(360 * t.h), n = Math.round(100 * t.s), i = Math.round(100 * t.v); return 1 == this._a ? "hsv(" + e + ", " + n + "%, " + i + "%)" : "hsva(" + e + ", " + n + "%, " + i + "%, " + this._roundA + ")" }, toHsl: function () { var t = Ku(this._r, this._g, this._b); return { h: 360 * t.h, s: t.s, l: t.l, a: this._a } }, toHslString: function () { var t = Ku(this._r, this._g, this._b), e = Math.round(360 * t.h), n = Math.round(100 * t.s), i = Math.round(100 * t.l); return 1 == this._a ? "hsl(" + e + ", " + n + "%, " + i + "%)" : "hsla(" + e + ", " + n + "%, " + i + "%, " + this._roundA + ")" }, toHex: function (t) { return th(this._r, this._g, this._b, t) }, toHexString: function (t) { return "#" + this.toHex(t) }, toHex8: function (t) { return function (t, e, n, i, r) { var a = [xh(Math.round(t).toString(16)), xh(Math.round(e).toString(16)), xh(Math.round(n).toString(16)), xh(wh(i))]; if (r && a[0].charAt(0) == a[0].charAt(1) && a[1].charAt(0) == a[1].charAt(1) && a[2].charAt(0) == a[2].charAt(1) && a[3].charAt(0) == a[3].charAt(1)) return a[0].charAt(0) + a[1].charAt(0) + a[2].charAt(0) + a[3].charAt(0); return a.join("") }(this._r, this._g, this._b, this._a, t) }, toHex8String: function (t) { return "#" + this.toHex8(t) }, toRgb: function () { return { r: Math.round(this._r), g: Math.round(this._g), b: Math.round(this._b), a: this._a } }, toRgbString: function () { return 1 == this._a ? "rgb(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ")" : "rgba(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ", " + this._roundA + ")" }, toPercentageRgb: function () { return { r: Math.round(100 * vh(this._r, 255)) + "%", g: Math.round(100 * vh(this._g, 255)) + "%", b: Math.round(100 * vh(this._b, 255)) + "%", a: this._a } }, toPercentageRgbString: function () { return 1 == this._a ? "rgb(" + Math.round(100 * vh(this._r, 255)) + "%, " + Math.round(100 * vh(this._g, 255)) + "%, " + Math.round(100 * vh(this._b, 255)) + "%)" : "rgba(" + Math.round(100 * vh(this._r, 255)) + "%, " + Math.round(100 * vh(this._g, 255)) + "%, " + Math.round(100 * vh(this._b, 255)) + "%, " + this._roundA + ")" }, toName: function () { return 0 === this._a ? "transparent" : !(this._a < 1) && (mh[th(this._r, this._g, this._b, !0)] || !1) }, toFilter: function (t) { var e = "#" + eh(this._r, this._g, this._b, this._a), n = e, i = this._gradientType ? "GradientType = 1, " : ""; if (t) { var r = Ju(t); n = "#" + eh(r._r, r._g, r._b, r._a) } return "progid:DXImageTransform.Microsoft.gradient(" + i + "startColorstr=" + e + ",endColorstr=" + n + ")" }, toString: function (t) { var e = !!t; t = t || this._format; var n = !1, i = this._a < 1 && this._a >= 0; return e || !i || "hex" !== t && "hex6" !== t && "hex3" !== t && "hex4" !== t && "hex8" !== t && "name" !== t ? ("rgb" === t && (n = this.toRgbString()), "prgb" === t && (n = this.toPercentageRgbString()), "hex" !== t && "hex6" !== t || (n = this.toHexString()), "hex3" === t && (n = this.toHexString(!0)), "hex4" === t && (n = this.toHex8String(!0)), "hex8" === t && (n = this.toHex8String()), "name" === t && (n = this.toName()), "hsl" === t && (n = this.toHslString()), "hsv" === t && (n = this.toHsvString()), n || this.toHexString()) : "name" === t && 0 === this._a ? this.toName() : this.toRgbString() }, clone: function () { return Ju(this.toString()) }, _applyModification: function (t, e) { var n = t.apply(null, [this].concat([].slice.call(e))); return this._r = n._r, this._g = n._g, this._b = n._b, this.setAlpha(n._a), this }, lighten: function () { return this._applyModification(ah, arguments) }, brighten: function () { return this._applyModification(oh, arguments) }, darken: function () { return this._applyModification(sh, arguments) }, desaturate: function () { return this._applyModification(nh, arguments) }, saturate: function () { return this._applyModification(ih, arguments) }, greyscale: function () { return this._applyModification(rh, arguments) }, spin: function () { return this._applyModification(lh, arguments) }, _applyCombination: function (t, e) { return t.apply(null, [this].concat([].slice.call(e))) }, analogous: function () { return this._applyCombination(dh, arguments) }, complement: function () { return this._applyCombination(ch, arguments) }, monochromatic: function () { return this._applyCombination(ph, arguments) }, splitcomplement: function () { return this._applyCombination(hh, arguments) }, triad: function () { return this._applyCombination(uh, [3]) }, tetrad: function () { return this._applyCombination(uh, [4]) } }, Ju.fromRatio = function (t, e) { if ("object" == Yu(t)) { var n = {}; for (var i in t) t.hasOwnProperty(i) && (n[i] = "a" === i ? t[i] : bh(t[i])); t = n } return Ju(t, e) }, Ju.equals = function (t, e) { return !(!t || !e) && Ju(t).toRgbString() == Ju(e).toRgbString() }, Ju.random = function () { return Ju.fromRatio({ r: Math.random(), g: Math.random(), b: Math.random() }) }, Ju.mix = function (t, e, n) { n = 0 === n ? 0 : n || 50; var i = Ju(t).toRgb(), r = Ju(e).toRgb(), a = n / 100; return Ju({ r: (r.r - i.r) * a + i.r, g: (r.g - i.g) * a + i.g, b: (r.b - i.b) * a + i.b, a: (r.a - i.a) * a + i.a }) },
        // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)
        // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
        Ju.readability = function (t, e) { var n = Ju(t), i = Ju(e); return (Math.max(n.getLuminance(), i.getLuminance()) + .05) / (Math.min(n.getLuminance(), i.getLuminance()) + .05) }, Ju.isReadable = function (t, e, n) { var i, r, a = Ju.readability(t, e); switch (r = !1, (i = function (t) { var e, n; e = ((t = t || { level: "AA", size: "small" }).level || "AA").toUpperCase(), n = (t.size || "small").toLowerCase(), "AA" !== e && "AAA" !== e && (e = "AA"); "small" !== n && "large" !== n && (n = "small"); return { level: e, size: n } }(n)).level + i.size) { case "AAsmall": case "AAAlarge": r = a >= 4.5; break; case "AAlarge": r = a >= 3; break; case "AAAsmall": r = a >= 7 }return r }, Ju.mostReadable = function (t, e, n) { var i, r, a, o, s = null, l = 0; r = (n = n || {}).includeFallbackColors, a = n.level, o = n.size; for (var c = 0; c < e.length; c++)(i = Ju.readability(t, e[c])) > l && (l = i, s = Ju(e[c])); return Ju.isReadable(t, s, { level: a, size: o }) || !r ? s : (n.includeFallbackColors = !1, Ju.mostReadable(t, ["#fff", "#000"], n)) }; var fh = Ju.names = { aliceblue: "f0f8ff", antiquewhite: "faebd7", aqua: "0ff", aquamarine: "7fffd4", azure: "f0ffff", beige: "f5f5dc", bisque: "ffe4c4", black: "000", blanchedalmond: "ffebcd", blue: "00f", blueviolet: "8a2be2", brown: "a52a2a", burlywood: "deb887", burntsienna: "ea7e5d", cadetblue: "5f9ea0", chartreuse: "7fff00", chocolate: "d2691e", coral: "ff7f50", cornflowerblue: "6495ed", cornsilk: "fff8dc", crimson: "dc143c", cyan: "0ff", darkblue: "00008b", darkcyan: "008b8b", darkgoldenrod: "b8860b", darkgray: "a9a9a9", darkgreen: "006400", darkgrey: "a9a9a9", darkkhaki: "bdb76b", darkmagenta: "8b008b", darkolivegreen: "556b2f", darkorange: "ff8c00", darkorchid: "9932cc", darkred: "8b0000", darksalmon: "e9967a", darkseagreen: "8fbc8f", darkslateblue: "483d8b", darkslategray: "2f4f4f", darkslategrey: "2f4f4f", darkturquoise: "00ced1", darkviolet: "9400d3", deeppink: "ff1493", deepskyblue: "00bfff", dimgray: "696969", dimgrey: "696969", dodgerblue: "1e90ff", firebrick: "b22222", floralwhite: "fffaf0", forestgreen: "228b22", fuchsia: "f0f", gainsboro: "dcdcdc", ghostwhite: "f8f8ff", gold: "ffd700", goldenrod: "daa520", gray: "808080", green: "008000", greenyellow: "adff2f", grey: "808080", honeydew: "f0fff0", hotpink: "ff69b4", indianred: "cd5c5c", indigo: "4b0082", ivory: "fffff0", khaki: "f0e68c", lavender: "e6e6fa", lavenderblush: "fff0f5", lawngreen: "7cfc00", lemonchiffon: "fffacd", lightblue: "add8e6", lightcoral: "f08080", lightcyan: "e0ffff", lightgoldenrodyellow: "fafad2", lightgray: "d3d3d3", lightgreen: "90ee90", lightgrey: "d3d3d3", lightpink: "ffb6c1", lightsalmon: "ffa07a", lightseagreen: "20b2aa", lightskyblue: "87cefa", lightslategray: "789", lightslategrey: "789", lightsteelblue: "b0c4de", lightyellow: "ffffe0", lime: "0f0", limegreen: "32cd32", linen: "faf0e6", magenta: "f0f", maroon: "800000", mediumaquamarine: "66cdaa", mediumblue: "0000cd", mediumorchid: "ba55d3", mediumpurple: "9370db", mediumseagreen: "3cb371", mediumslateblue: "7b68ee", mediumspringgreen: "00fa9a", mediumturquoise: "48d1cc", mediumvioletred: "c71585", midnightblue: "191970", mintcream: "f5fffa", mistyrose: "ffe4e1", moccasin: "ffe4b5", navajowhite: "ffdead", navy: "000080", oldlace: "fdf5e6", olive: "808000", olivedrab: "6b8e23", orange: "ffa500", orangered: "ff4500", orchid: "da70d6", palegoldenrod: "eee8aa", palegreen: "98fb98", paleturquoise: "afeeee", palevioletred: "db7093", papayawhip: "ffefd5", peachpuff: "ffdab9", peru: "cd853f", pink: "ffc0cb", plum: "dda0dd", powderblue: "b0e0e6", purple: "800080", rebeccapurple: "663399", red: "f00", rosybrown: "bc8f8f", royalblue: "4169e1", saddlebrown: "8b4513", salmon: "fa8072", sandybrown: "f4a460", seagreen: "2e8b57", seashell: "fff5ee", sienna: "a0522d", silver: "c0c0c0", skyblue: "87ceeb", slateblue: "6a5acd", slategray: "708090", slategrey: "708090", snow: "fffafa", springgreen: "00ff7f", steelblue: "4682b4", tan: "d2b48c", teal: "008080", thistle: "d8bfd8", tomato: "ff6347", turquoise: "40e0d0", violet: "ee82ee", wheat: "f5deb3", white: "fff", whitesmoke: "f5f5f5", yellow: "ff0", yellowgreen: "9acd32" }, mh = Ju.hexNames = function (t) { var e = {}; for (var n in t) t.hasOwnProperty(n) && (e[t[n]] = n); return e }(fh); function gh(t) { return t = parseFloat(t), (isNaN(t) || t < 0 || t > 1) && (t = 1), t } function vh(t, e) { (function (t) { return "string" == typeof t && -1 != t.indexOf(".") && 1 === parseFloat(t) })(t) && (t = "100%"); var n = function (t) { return "string" == typeof t && -1 != t.indexOf("%") }(t); return t = Math.min(e, Math.max(0, parseFloat(t))), n && (t = parseInt(t * e, 10) / 100), Math.abs(t - e) < 1e-6 ? 1 : t % e / parseFloat(e) } function _h(t) { return Math.min(1, Math.max(0, t)) } function yh(t) { return parseInt(t, 16) } function xh(t) { return 1 == t.length ? "0" + t : "" + t } function bh(t) { return t <= 1 && (t = 100 * t + "%"), t } function wh(t) { return Math.round(255 * parseFloat(t)).toString(16) } function Mh(t) { return yh(t) / 255 } var Sh, Eh, Th, Ah = (Eh = "[\\s|\\(]+(" + (Sh = "(?:[-\\+]?\\d*\\.\\d+%?)|(?:[-\\+]?\\d+%?)") + ")[,|\\s]+(" + Sh + ")[,|\\s]+(" + Sh + ")\\s*\\)?", Th = "[\\s|\\(]+(" + Sh + ")[,|\\s]+(" + Sh + ")[,|\\s]+(" + Sh + ")[,|\\s]+(" + Sh + ")\\s*\\)?", { CSS_UNIT: new RegExp(Sh), rgb: new RegExp("rgb" + Eh), rgba: new RegExp("rgba" + Th), hsl: new RegExp("hsl" + Eh), hsla: new RegExp("hsla" + Th), hsv: new RegExp("hsv" + Eh), hsva: new RegExp("hsva" + Th), hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/, hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/, hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/, hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/ }); function Ch(t) { return !!Ah.CSS_UNIT.exec(t) } function Lh(t, e) { var n = Object.keys(t); if (Object.getOwnPropertySymbols) { var i = Object.getOwnPropertySymbols(t); e && (i = i.filter((function (e) { return Object.getOwnPropertyDescriptor(t, e).enumerable }))), n.push.apply(n, i) } return n } function Ph(t) { for (var e = 1; e < arguments.length; e++) { var n = null != arguments[e] ? arguments[e] : {}; e % 2 ? Lh(Object(n), !0).forEach((function (e) { Oh(t, e, n[e]) })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(t, Object.getOwnPropertyDescriptors(n)) : Lh(Object(n)).forEach((function (e) { Object.defineProperty(t, e, Object.getOwnPropertyDescriptor(n, e)) })) } return t } function Rh(t) { return Rh = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) { return typeof t } : function (t) { return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t }, Rh(t) } function Dh(t, e) { for (var n = 0; n < e.length; n++) { var i = e[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, Wh(i.key), i) } } function Oh(t, e, n) { return (e = Wh(e)) in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t } function Ih(t) { return Ih = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t) }, Ih(t) } function Nh(t, e) { return Nh = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t }, Nh(t, e) } function kh() { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } } function zh(t, e, n) { return zh = kh() ? Reflect.construct.bind() : function (t, e, n) { var i = [null]; i.push.apply(i, e); var r = new (Function.bind.apply(t, i)); return n && Nh(r, n.prototype), r }, zh.apply(null, arguments) } function Uh(t, e) { if (null == t) return {}; var n, i, r = function (t, e) { if (null == t) return {}; var n, i, r = {}, a = Object.keys(t); for (i = 0; i < a.length; i++)n = a[i], e.indexOf(n) >= 0 || (r[n] = t[n]); return r }(t, e); if (Object.getOwnPropertySymbols) { var a = Object.getOwnPropertySymbols(t); for (i = 0; i < a.length; i++)n = a[i], e.indexOf(n) >= 0 || Object.prototype.propertyIsEnumerable.call(t, n) && (r[n] = t[n]) } return r } function Fh(t) { if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return t } function Bh(t) { var e = kh(); return function () { var n, i = Ih(t); if (e) { var r = Ih(this).constructor; n = Reflect.construct(i, arguments, r) } else n = i.apply(this, arguments); return function (t, e) { if (e && ("object" == typeof e || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return Fh(t) }(this, n) } } function jh(t, e) { return function (t) { if (Array.isArray(t)) return t }(t) || function (t, e) { var n = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"]; if (null != n) { var i, r, a, o, s = [], l = !0, c = !1; try { if (a = (n = n.call(t)).next, 0 === e) { if (Object(n) !== n) return; l = !1 } else for (; !(l = (i = a.call(n)).done) && (s.push(i.value), s.length !== e); l = !0); } catch (t) { c = !0, r = t } finally { try { if (!l && null != n.return && (o = n.return(), Object(o) !== o)) return } finally { if (c) throw r } } return s } }(t, e) || Hh(t, e) || function () { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function Gh(t) { return function (t) { if (Array.isArray(t)) return Vh(t) }(t) || function (t) { if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t) }(t) || Hh(t) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function Hh(t, e) { if (t) { if ("string" == typeof t) return Vh(t, e); var n = Object.prototype.toString.call(t).slice(8, -1); return "Object" === n && t.constructor && (n = t.constructor.name), "Map" === n || "Set" === n ? Array.from(t) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? Vh(t, e) : void 0 } } function Vh(t, e) { (null == e || e > t.length) && (e = t.length); for (var n = 0, i = new Array(e); n < e; n++)i[n] = t[n]; return i } function Wh(t) { var e = function (t, e) { if ("object" != typeof t || null === t) return t; var n = t[Symbol.toPrimitive]; if (void 0 !== n) { var i = n.call(t, e || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value.") } return ("string" === e ? String : Number)(t) }(t, "string"); return "symbol" == typeof e ? e : String(e) } var qh = function t(e) { e instanceof Array ? e.forEach(t) : (e.map && e.map.dispose(), e.dispose()) }, Xh = function t(e) { e.geometry && e.geometry.dispose(), e.material && qh(e.material), e.texture && e.texture.dispose(), e.children && e.children.forEach(t) }, Yh = function (t) { for (; t.children.length;) { var e = t.children[0]; t.remove(e), Xh(e) } }, $h = ["objFilter"]; function Zh(t, e) { var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, i = n.objFilter, r = void 0 === i ? function () { return !0 } : i, a = Uh(n, $h); return Vu(t, e.children.filter(r), (function (t) { return e.add(t) }), (function (t) { e.remove(t), Yh(t) }), Ph({ objBindAttr: "__threeObj" }, a)) } var Jh = function (t) { return isNaN(t) ? parseInt(Ju(t).toHex(), 16) : t }, Kh = function (t) { return isNaN(t) ? Ju(t).getAlpha() : 1 }, Qh = function t() { var e = new Mu, n = [], i = [], r = qu; function a(t) { let a = e.get(t); if (void 0 === a) { if (r !== qu) return r; e.set(t, a = n.push(t) - 1) } return i[a % i.length] } return a.domain = function (t) { if (!arguments.length) return n.slice(); n = [], e = new Mu; for (const i of t) e.has(i) || e.set(i, n.push(i) - 1); return a }, a.range = function (t) { return arguments.length ? (i = Array.from(t), a) : i.slice() }, a.unknown = function (t) { return arguments.length ? (r = t, a) : r }, a.copy = function () { return t(n, i).unknown(r) }, Wu.apply(a, arguments), a }(Xu); function td(t, e, n) { e && "string" == typeof n && t.filter((function (t) { return !t[n] })).forEach((function (t) { t[n] = Qh(e(t)) })) } var ed = window.THREE ? window.THREE : { Group: Qo, Mesh: ir, MeshLambertMaterial: class extends bi { constructor(t) { super(), this.isMeshLambertMaterial = !0, this.type = "MeshLambertMaterial", this.color = new Ti(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new Ti(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = ve, this.normalScale = new ke(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.combine = X, this.reflectivity = 1, this.refractionRatio = .98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(t) } copy(t) { return super.copy(t), this.color.copy(t.color), this.map = t.map, this.lightMap = t.lightMap, this.lightMapIntensity = t.lightMapIntensity, this.aoMap = t.aoMap, this.aoMapIntensity = t.aoMapIntensity, this.emissive.copy(t.emissive), this.emissiveMap = t.emissiveMap, this.emissiveIntensity = t.emissiveIntensity, this.bumpMap = t.bumpMap, this.bumpScale = t.bumpScale, this.normalMap = t.normalMap, this.normalMapType = t.normalMapType, this.normalScale.copy(t.normalScale), this.displacementMap = t.displacementMap, this.displacementScale = t.displacementScale, this.displacementBias = t.displacementBias, this.specularMap = t.specularMap, this.alphaMap = t.alphaMap, this.envMap = t.envMap, this.combine = t.combine, this.reflectivity = t.reflectivity, this.refractionRatio = t.refractionRatio, this.wireframe = t.wireframe, this.wireframeLinewidth = t.wireframeLinewidth, this.wireframeLinecap = t.wireframeLinecap, this.wireframeLinejoin = t.wireframeLinejoin, this.flatShading = t.flatShading, this.fog = t.fog, this } }, Color: Ti, BufferGeometry: Gi, BufferAttribute: Ri, Matrix4: zn, Vector3: Ge, SphereGeometry: Cs, CylinderGeometry: Ts, TubeGeometry: Ls, ConeGeometry: As, Line: class extends li { constructor(t = new Gi, e = new ss) { super(), this.isLine = !0, this.type = "Line", this.geometry = t, this.material = e, this.updateMorphTargets() } copy(t, e) { return super.copy(t, e), this.material = t.material, this.geometry = t.geometry, this } computeLineDistances() { const t = this.geometry; if (null === t.index) { const e = t.attributes.position, n = [0]; for (let t = 1, i = e.count; t < i; t++)ls.fromBufferAttribute(e, t - 1), cs.fromBufferAttribute(e, t), n[t] = n[t - 1], n[t] += ls.distanceTo(cs); t.setAttribute("lineDistance", new Ii(n, 1)) } else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry."); return this } raycast(t, e) { const n = this.geometry, i = this.matrixWorld, r = t.params.Line.threshold, a = n.drawRange; if (null === n.boundingSphere && n.computeBoundingSphere(), ds.copy(n.boundingSphere), ds.applyMatrix4(i), ds.radius += r, !1 === t.ray.intersectsSphere(ds)) return; us.copy(i).invert(), hs.copy(t.ray).applyMatrix4(us); const o = r / ((this.scale.x + this.scale.y + this.scale.z) / 3), s = o * o, l = new Ge, c = new Ge, u = new Ge, h = new Ge, d = this.isLineSegments ? 2 : 1, p = n.index, f = n.attributes.position; if (null !== p) { for (let n = Math.max(0, a.start), i = Math.min(p.count, a.start + a.count) - 1; n < i; n += d) { const i = p.getX(n), r = p.getX(n + 1); l.fromBufferAttribute(f, i), c.fromBufferAttribute(f, r); if (hs.distanceSqToSegment(l, c, h, u) > s) continue; h.applyMatrix4(this.matrixWorld); const a = t.ray.origin.distanceTo(h); a < t.near || a > t.far || e.push({ distance: a, point: u.clone().applyMatrix4(this.matrixWorld), index: n, face: null, faceIndex: null, object: this }) } } else { for (let n = Math.max(0, a.start), i = Math.min(f.count, a.start + a.count) - 1; n < i; n += d) { l.fromBufferAttribute(f, n), c.fromBufferAttribute(f, n + 1); if (hs.distanceSqToSegment(l, c, h, u) > s) continue; h.applyMatrix4(this.matrixWorld); const i = t.ray.origin.distanceTo(h); i < t.near || i > t.far || e.push({ distance: i, point: u.clone().applyMatrix4(this.matrixWorld), index: n, face: null, faceIndex: null, object: this }) } } } updateMorphTargets() { const t = this.geometry.morphAttributes, e = Object.keys(t); if (e.length > 0) { const n = t[e[0]]; if (void 0 !== n) { this.morphTargetInfluences = [], this.morphTargetDictionary = {}; for (let t = 0, e = n.length; t < e; t++) { const e = n[t].name || String(t); this.morphTargetInfluences.push(0), this.morphTargetDictionary[e] = t } } } } }, LineBasicMaterial: ss, QuadraticBezierCurve3: Ss, CubicBezierCurve3: Ms, Box3: un }, nd = { graph: pc, forcelayout: yc }, id = (new ed.BufferGeometry).setAttribute ? "setAttribute" : "addAttribute", rd = (new ed.BufferGeometry).applyMatrix4 ? "applyMatrix4" : "applyMatrix", ad = bu({ props: { jsonUrl: { onChange: function (t, e) { var n = this; t && !e.fetchingJson && (e.fetchingJson = !0, e.onLoading(), fetch(t).then((function (t) { return t.json() })).then((function (t) { e.fetchingJson = !1, e.onFinishLoading(t), n.graphData(t) }))) }, triggerUpdate: !1 }, graphData: { default: { nodes: [], links: [] }, onChange: function (t, e) { e.engineRunning = !1 } }, numDimensions: { default: 3, onChange: function (t, e) { var n = e.d3ForceLayout.force("charge"); function i(t, e) { t.forEach((function (t) { delete t[e], delete t["v".concat(e)] })) } n && n.strength(t > 2 ? -60 : -30), t < 3 && i(e.graphData.nodes, "z"), t < 2 && i(e.graphData.nodes, "y") } }, dagMode: { onChange: function (t, e) { !t && "d3" === e.forceEngine && (e.graphData.nodes || []).forEach((function (t) { return t.fx = t.fy = t.fz = void 0 })) } }, dagLevelDistance: {}, dagNodeFilter: { default: function (t) { return !0 } }, onDagError: { triggerUpdate: !1 }, nodeRelSize: { default: 4 }, nodeId: { default: "id" }, nodeVal: { default: "val" }, nodeResolution: { default: 8 }, nodeColor: { default: "color" }, nodeAutoColorBy: {}, nodeOpacity: { default: .75 }, nodeVisibility: { default: !0 }, nodeThreeObject: {}, nodeThreeObjectExtend: { default: !1 }, nodePositionUpdate: { triggerUpdate: !1 }, linkSource: { default: "source" }, linkTarget: { default: "target" }, linkVisibility: { default: !0 }, linkColor: { default: "color" }, linkAutoColorBy: {}, linkOpacity: { default: .2 }, linkWidth: {}, linkResolution: { default: 6 }, linkCurvature: { default: 0, triggerUpdate: !1 }, linkCurveRotation: { default: 0, triggerUpdate: !1 }, linkMaterial: {}, linkThreeObject: {}, linkThreeObjectExtend: { default: !1 }, linkPositionUpdate: { triggerUpdate: !1 }, linkDirectionalArrowLength: { default: 0 }, linkDirectionalArrowColor: {}, linkDirectionalArrowRelPos: { default: .5, triggerUpdate: !1 }, linkDirectionalArrowResolution: { default: 8 }, linkDirectionalParticles: { default: 0 }, linkDirectionalParticleSpeed: { default: .01, triggerUpdate: !1 }, linkDirectionalParticleWidth: { default: .5 }, linkDirectionalParticleColor: {}, linkDirectionalParticleResolution: { default: 4 }, forceEngine: { default: "d3" }, d3AlphaMin: { default: 0 }, d3AlphaDecay: { default: .0228, triggerUpdate: !1, onChange: function (t, e) { e.d3ForceLayout.alphaDecay(t) } }, d3AlphaTarget: { default: 0, triggerUpdate: !1, onChange: function (t, e) { e.d3ForceLayout.alphaTarget(t) } }, d3VelocityDecay: { default: .4, triggerUpdate: !1, onChange: function (t, e) { e.d3ForceLayout.velocityDecay(t) } }, ngraphPhysics: { default: { timeStep: 20, gravity: -1.2, theta: .8, springLength: 30, springCoefficient: 8e-4, dragCoefficient: .02 } }, warmupTicks: { default: 0, triggerUpdate: !1 }, cooldownTicks: { default: 1 / 0, triggerUpdate: !1 }, cooldownTime: { default: 15e3, triggerUpdate: !1 }, onLoading: { default: function () { }, triggerUpdate: !1 }, onFinishLoading: { default: function () { }, triggerUpdate: !1 }, onUpdate: { default: function () { }, triggerUpdate: !1 }, onFinishUpdate: { default: function () { }, triggerUpdate: !1 }, onEngineTick: { default: function () { }, triggerUpdate: !1 }, onEngineStop: { default: function () { }, triggerUpdate: !1 } }, methods: { refresh: function (t) { return t._flushObjects = !0, t._rerender(), this }, d3Force: function (t, e, n) { return void 0 === n ? t.d3ForceLayout.force(e) : (t.d3ForceLayout.force(e, n), this) }, d3ReheatSimulation: function (t) { return t.d3ForceLayout.alpha(1), this.resetCountdown(), this }, resetCountdown: function (t) { return t.cntTicks = 0, t.startTickTime = new Date, t.engineRunning = !0, this }, tickFrame: function (t) { var e, n, i, r, a = "ngraph" !== t.forceEngine; return t.engineRunning && function () { ++t.cntTicks > t.cooldownTicks || new Date - t.startTickTime > t.cooldownTime || a && t.d3AlphaMin > 0 && t.d3ForceLayout.alpha() < t.d3AlphaMin ? (t.engineRunning = !1, t.onEngineStop()) : (t.layout[a ? "tick" : "step"](), t.onEngineTick()); var e = wu(t.nodeThreeObjectExtend); t.graphData.nodes.forEach((function (n) { var i = n.__threeObj; if (i) { var r = a ? n : t.layout.getNodePosition(n[t.nodeId]), o = e(n); t.nodePositionUpdate && t.nodePositionUpdate(o ? i.children[0] : i, { x: r.x, y: r.y, z: r.z }, n) && !o || (i.position.x = r.x, i.position.y = r.y || 0, i.position.z = r.z || 0) } })); var n = wu(t.linkWidth), i = wu(t.linkCurvature), r = wu(t.linkCurveRotation), o = wu(t.linkThreeObjectExtend); function s(e) { var n = a ? e : t.layout.getLinkPosition(t.layout.graph.getLink(e.source, e.target).id), o = n[a ? "source" : "from"], s = n[a ? "target" : "to"]; if (o && s && o.hasOwnProperty("x") && s.hasOwnProperty("x")) { var l = i(e); if (l) { var c, u = new ed.Vector3(o.x, o.y || 0, o.z || 0), h = new ed.Vector3(s.x, s.y || 0, s.z || 0), d = u.distanceTo(h), p = r(e); if (d > 0) { var f = s.x - o.x, m = s.y - o.y || 0, g = (new ed.Vector3).subVectors(h, u), v = g.clone().multiplyScalar(l).cross(0 !== f || 0 !== m ? new ed.Vector3(0, 0, 1) : new ed.Vector3(0, 1, 0)).applyAxisAngle(g.normalize(), p).add((new ed.Vector3).addVectors(u, h).divideScalar(2)); c = new ed.QuadraticBezierCurve3(u, v, h) } else { var _ = 70 * l, y = -p, x = y + Math.PI / 2; c = new ed.CubicBezierCurve3(u, new ed.Vector3(_ * Math.cos(x), _ * Math.sin(x), 0).add(u), new ed.Vector3(_ * Math.cos(y), _ * Math.sin(y), 0).add(u), h) } e.__curve = c } else e.__curve = null } } t.graphData.links.forEach((function (e) { var i = e.__lineObj; if (i) { var r = a ? e : t.layout.getLinkPosition(t.layout.graph.getLink(e.source, e.target).id), l = r[a ? "source" : "from"], c = r[a ? "target" : "to"]; if (l && c && l.hasOwnProperty("x") && c.hasOwnProperty("x")) { s(e); var u = o(e); if (!t.linkPositionUpdate || !t.linkPositionUpdate(u ? i.children[1] : i, { start: { x: l.x, y: l.y, z: l.z }, end: { x: c.x, y: c.y, z: c.z } }, e) || u) { var h = 30, d = e.__curve, p = i.children.length ? i.children[0] : i; if ("Line" === p.type) { if (d) p.geometry.setFromPoints(d.getPoints(h)); else { var f = p.geometry.getAttribute("position"); f && f.array && 6 === f.array.length || p.geometry[id]("position", f = new ed.BufferAttribute(new Float32Array(6), 3)), f.array[0] = l.x, f.array[1] = l.y || 0, f.array[2] = l.z || 0, f.array[3] = c.x, f.array[4] = c.y || 0, f.array[5] = c.z || 0, f.needsUpdate = !0 } p.geometry.computeBoundingSphere() } else if ("Mesh" === p.type) if (d) { p.geometry.type.match(/^Tube(Buffer)?Geometry$/) || (p.position.set(0, 0, 0), p.rotation.set(0, 0, 0), p.scale.set(1, 1, 1)); var m = Math.ceil(10 * n(e)) / 10 / 2, g = new ed.TubeGeometry(d, h, m, t.linkResolution, !1); p.geometry.dispose(), p.geometry = g } else { if (!p.geometry.type.match(/^Cylinder(Buffer)?Geometry$/)) { var v = Math.ceil(10 * n(e)) / 10 / 2, _ = new ed.CylinderGeometry(v, v, 1, t.linkResolution, 1, !1); _[rd]((new ed.Matrix4).makeTranslation(0, .5, 0)), _[rd]((new ed.Matrix4).makeRotationX(Math.PI / 2)), p.geometry.dispose(), p.geometry = _ } var y = new ed.Vector3(l.x, l.y || 0, l.z || 0), x = new ed.Vector3(c.x, c.y || 0, c.z || 0), b = y.distanceTo(x); p.position.x = y.x, p.position.y = y.y, p.position.z = y.z, p.scale.z = b, p.parent.localToWorld(x), p.lookAt(x) } } } } })) }(), e = wu(t.linkDirectionalArrowRelPos), n = wu(t.linkDirectionalArrowLength), i = wu(t.nodeVal), t.graphData.links.forEach((function (r) { var o = r.__arrowObj; if (o) { var s = a ? r : t.layout.getLinkPosition(t.layout.graph.getLink(r.source, r.target).id), l = s[a ? "source" : "from"], c = s[a ? "target" : "to"]; if (l && c && l.hasOwnProperty("x") && c.hasOwnProperty("x")) { var u = Math.cbrt(Math.max(0, i(l) || 1)) * t.nodeRelSize, h = Math.cbrt(Math.max(0, i(c) || 1)) * t.nodeRelSize, d = n(r), p = e(r), f = r.__curve ? function (t) { return r.__curve.getPoint(t) } : function (t) { var e = function (t, e, n, i) { return e[t] + (n[t] - e[t]) * i || 0 }; return { x: e("x", l, c, t), y: e("y", l, c, t), z: e("z", l, c, t) } }, m = r.__curve ? r.__curve.getLength() : Math.sqrt(["x", "y", "z"].map((function (t) { return Math.pow((c[t] || 0) - (l[t] || 0), 2) })).reduce((function (t, e) { return t + e }), 0)), g = u + d + (m - u - h - d) * p, v = f(g / m), _ = f((g - d) / m);["x", "y", "z"].forEach((function (t) { return o.position[t] = _[t] })); var y = zh(ed.Vector3, Gh(["x", "y", "z"].map((function (t) { return v[t] })))); o.parent.localToWorld(y), o.lookAt(y) } } })), r = wu(t.linkDirectionalParticleSpeed), t.graphData.links.forEach((function (e) { var n = e.__photonsObj && e.__photonsObj.children, i = e.__singleHopPhotonsObj && e.__singleHopPhotonsObj.children; if (i && i.length || n && n.length) { var o = a ? e : t.layout.getLinkPosition(t.layout.graph.getLink(e.source, e.target).id), s = o[a ? "source" : "from"], l = o[a ? "target" : "to"]; if (s && l && s.hasOwnProperty("x") && l.hasOwnProperty("x")) { var c = r(e), u = e.__curve ? function (t) { return e.__curve.getPoint(t) } : function (t) { var e = function (t, e, n, i) { return e[t] + (n[t] - e[t]) * i || 0 }; return { x: e("x", s, l, t), y: e("y", s, l, t), z: e("z", s, l, t) } };[].concat(Gh(n || []), Gh(i || [])).forEach((function (t, e) { var i = "singleHopPhotons" === t.parent.__linkThreeObjType; if (t.hasOwnProperty("__progressRatio") || (t.__progressRatio = i ? 0 : e / n.length), t.__progressRatio += c, t.__progressRatio >= 1) { if (i) return t.parent.remove(t), void Yh(t); t.__progressRatio = t.__progressRatio % 1 } var r = t.__progressRatio, a = u(r);["x", "y", "z"].forEach((function (e) { return t.position[e] = a[e] })) })) } } })), this }, emitParticle: function (t, e) { if (e && t.graphData.links.includes(e)) { if (!e.__singleHopPhotonsObj) { var n = new ed.Group; n.__linkThreeObjType = "singleHopPhotons", e.__singleHopPhotonsObj = n, t.graphScene.add(n) } var i = wu(t.linkDirectionalParticleWidth), r = Math.ceil(10 * i(e)) / 10 / 2, a = t.linkDirectionalParticleResolution, o = new ed.SphereGeometry(r, a, a), s = wu(t.linkColor), l = wu(t.linkDirectionalParticleColor)(e) || s(e) || "#f0f0f0", c = new ed.Color(Jh(l)), u = 3 * t.linkOpacity, h = new ed.MeshLambertMaterial({ color: c, transparent: !0, opacity: u }); e.__singleHopPhotonsObj.add(new ed.Mesh(o, h)) } return this }, getGraphBbox: function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : function () { return !0 }; if (!t.initialised) return null; var n = function t(n) { var i = []; if (n.geometry) { n.geometry.computeBoundingBox(); var r = new ed.Box3; r.copy(n.geometry.boundingBox).applyMatrix4(n.matrixWorld), i.push(r) } return i.concat.apply(i, Gh((n.children || []).filter((function (t) { return !t.hasOwnProperty("__graphObjType") || "node" === t.__graphObjType && e(t.__data) })).map(t))) }(t.graphScene); return n.length ? Object.assign.apply(Object, Gh(["x", "y", "z"].map((function (t) { return Oh({}, t, [Au(n, (function (e) { return e.min[t] })), Tu(n, (function (e) { return e.max[t] }))]) })))) : null } }, stateInit: function () { return { d3ForceLayout: uc().force("link", Pl()).force("charge", hc()).force("center", el()).force("dagRadial", null).stop(), engineRunning: !1 } }, init: function (t, e) { e.graphScene = t }, update: function (t, e) { var n = function (t) { return t.some((function (t) { return e.hasOwnProperty(t) })) }; if (t.engineRunning = !1, t.onUpdate(), null !== t.nodeAutoColorBy && n(["nodeAutoColorBy", "graphData", "nodeColor"]) && td(t.graphData.nodes, wu(t.nodeAutoColorBy), t.nodeColor), null !== t.linkAutoColorBy && n(["linkAutoColorBy", "graphData", "linkColor"]) && td(t.graphData.links, wu(t.linkAutoColorBy), t.linkColor), t._flushObjects || n(["graphData", "nodeThreeObject", "nodeThreeObjectExtend", "nodeVal", "nodeColor", "nodeVisibility", "nodeRelSize", "nodeResolution", "nodeOpacity"])) { var i = wu(t.nodeThreeObject), r = wu(t.nodeThreeObjectExtend), a = wu(t.nodeVal), o = wu(t.nodeColor), s = wu(t.nodeVisibility), l = {}, c = {}; Zh(t.graphData.nodes.filter(s), t.graphScene, { purge: t._flushObjects || n(["nodeThreeObject", "nodeThreeObjectExtend"]), objFilter: function (t) { return "node" === t.__graphObjType }, createObj: function (e) { var n, a = i(e), o = r(e); return a && t.nodeThreeObject === a && (a = a.clone()), a && !o ? n = a : ((n = new ed.Mesh).__graphDefaultObj = !0, a && o && n.add(a)), n.__graphObjType = "node", n }, updateObj: function (e, n) { if (e.__graphDefaultObj) { var i = a(n) || 1, r = Math.cbrt(i) * t.nodeRelSize, s = t.nodeResolution; e.geometry.type.match(/^Sphere(Buffer)?Geometry$/) && e.geometry.parameters.radius === r && e.geometry.parameters.widthSegments === s || (l.hasOwnProperty(i) || (l[i] = new ed.SphereGeometry(r, s, s)), e.geometry.dispose(), e.geometry = l[i]); var u = o(n), h = new ed.Color(Jh(u || "#ffffaa")), d = t.nodeOpacity * Kh(u); "MeshLambertMaterial" === e.material.type && e.material.color.equals(h) && e.material.opacity === d || (c.hasOwnProperty(u) || (c[u] = new ed.MeshLambertMaterial({ color: h, transparent: !0, opacity: d })), e.material.dispose(), e.material = c[u]) } } }) } if (t._flushObjects || n(["graphData", "linkThreeObject", "linkThreeObjectExtend", "linkMaterial", "linkColor", "linkWidth", "linkVisibility", "linkResolution", "linkOpacity", "linkDirectionalArrowLength", "linkDirectionalArrowColor", "linkDirectionalArrowResolution", "linkDirectionalParticles", "linkDirectionalParticleWidth", "linkDirectionalParticleColor", "linkDirectionalParticleResolution"])) { var u = wu(t.linkThreeObject), h = wu(t.linkThreeObjectExtend), d = wu(t.linkMaterial), p = wu(t.linkVisibility), f = wu(t.linkColor), m = wu(t.linkWidth), g = {}, v = {}, _ = {}, y = t.graphData.links.filter(p); if (Zh(y, t.graphScene, { objBindAttr: "__lineObj", purge: t._flushObjects || n(["linkThreeObject", "linkThreeObjectExtend", "linkWidth"]), objFilter: function (t) { return "link" === t.__graphObjType }, exitObj: function (t) { var e = t.__data && t.__data.__singleHopPhotonsObj; e && (e.parent.remove(e), Yh(e), delete t.__data.__singleHopPhotonsObj) }, createObj: function (e) { var n, i, r = u(e), a = h(e); if (r && t.linkThreeObject === r && (r = r.clone()), !r || a) if (!!m(e)) n = new ed.Mesh; else { var o = new ed.BufferGeometry; o[id]("position", new ed.BufferAttribute(new Float32Array(6), 3)), n = new ed.Line(o) } return r ? a ? ((i = new ed.Group).__graphDefaultObj = !0, i.add(n), i.add(r)) : i = r : (i = n).__graphDefaultObj = !0, i.renderOrder = 10, i.__graphObjType = "link", i }, updateObj: function (e, n) { if (e.__graphDefaultObj) { var i = e.children.length ? e.children[0] : e, r = Math.ceil(10 * m(n)) / 10, a = !!r; if (a) { var o = r / 2, s = t.linkResolution; if (!i.geometry.type.match(/^Cylinder(Buffer)?Geometry$/) || i.geometry.parameters.radiusTop !== o || i.geometry.parameters.radialSegments !== s) { if (!g.hasOwnProperty(r)) { var l = new ed.CylinderGeometry(o, o, 1, s, 1, !1); l[rd]((new ed.Matrix4).makeTranslation(0, .5, 0)), l[rd]((new ed.Matrix4).makeRotationX(Math.PI / 2)), g[r] = l } i.geometry.dispose(), i.geometry = g[r] } } var c = d(n); if (c) i.material = c; else { var u = f(n), h = new ed.Color(Jh(u || "#f0f0f0")), p = t.linkOpacity * Kh(u), y = a ? "MeshLambertMaterial" : "LineBasicMaterial"; if (i.material.type !== y || !i.material.color.equals(h) || i.material.opacity !== p) { var x = a ? v : _; x.hasOwnProperty(u) || (x[u] = new ed[y]({ color: h, transparent: p < 1, opacity: p, depthWrite: p >= 1 })), i.material.dispose(), i.material = x[u] } } } } }), t.linkDirectionalArrowLength || e.hasOwnProperty("linkDirectionalArrowLength")) { var x = wu(t.linkDirectionalArrowLength), b = wu(t.linkDirectionalArrowColor); Zh(y.filter(x), t.graphScene, { objBindAttr: "__arrowObj", objFilter: function (t) { return "arrow" === t.__linkThreeObjType }, createObj: function () { var t = new ed.Mesh(void 0, new ed.MeshLambertMaterial({ transparent: !0 })); return t.__linkThreeObjType = "arrow", t }, updateObj: function (e, n) { var i = x(n), r = t.linkDirectionalArrowResolution; if (!e.geometry.type.match(/^Cone(Buffer)?Geometry$/) || e.geometry.parameters.height !== i || e.geometry.parameters.radialSegments !== r) { var a = new ed.ConeGeometry(.25 * i, i, r); a.translate(0, i / 2, 0), a.rotateX(Math.PI / 2), e.geometry.dispose(), e.geometry = a } var o = b(n) || f(n) || "#f0f0f0"; e.material.color = new ed.Color(Jh(o)), e.material.opacity = 3 * t.linkOpacity * Kh(o) } }) } if (t.linkDirectionalParticles || e.hasOwnProperty("linkDirectionalParticles")) { var w = wu(t.linkDirectionalParticles), M = wu(t.linkDirectionalParticleWidth), S = wu(t.linkDirectionalParticleColor), E = {}, T = {}; Zh(y.filter(w), t.graphScene, { objBindAttr: "__photonsObj", objFilter: function (t) { return "photons" === t.__linkThreeObjType }, createObj: function () { var t = new ed.Group; return t.__linkThreeObjType = "photons", t }, updateObj: function (e, n) { var i, r = Math.round(Math.abs(w(n))), a = !!e.children.length && e.children[0], o = Math.ceil(10 * M(n)) / 10 / 2, s = t.linkDirectionalParticleResolution; a && a.geometry.parameters.radius === o && a.geometry.parameters.widthSegments === s ? i = a.geometry : (T.hasOwnProperty(o) || (T[o] = new ed.SphereGeometry(o, s, s)), i = T[o], a && a.geometry.dispose()); var l, c = S(n) || f(n) || "#f0f0f0", u = new ed.Color(Jh(c)), h = 3 * t.linkOpacity; a && a.material.color.equals(u) && a.material.opacity === h ? l = a.material : (E.hasOwnProperty(c) || (E[c] = new ed.MeshLambertMaterial({ color: u, transparent: !0, opacity: h })), l = E[c], a && a.material.dispose()), Zh(Gh(new Array(r)).map((function (t, e) { return { idx: e } })), e, { idAccessor: function (t) { return t.idx }, createObj: function () { return new ed.Mesh(i, l) }, updateObj: function (t) { t.geometry = i, t.material = l } }) } }) } } if (t._flushObjects = !1, n(["graphData", "nodeId", "linkSource", "linkTarget", "numDimensions", "forceEngine", "dagMode", "dagNodeFilter", "dagLevelDistance"])) { t.engineRunning = !1, t.graphData.links.forEach((function (e) { e.source = e[t.linkSource], e.target = e[t.linkTarget] })); var A, C = "ngraph" !== t.forceEngine; if (C) { (A = t.d3ForceLayout).stop().alpha(1).numDimensions(t.numDimensions).nodes(t.graphData.nodes); var L = t.d3ForceLayout.force("link"); L && L.id((function (e) { return e[t.nodeId] })).links(t.graphData.links); var P = t.dagMode && function (t, e) { var n = t.nodes, i = t.links, r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, a = r.nodeFilter, o = void 0 === a ? function () { return !0 } : a, s = r.onLoopError, l = void 0 === s ? function (t) { throw "Invalid DAG structure! Found cycle in node path: ".concat(t.join(" -> "), ".") } : s, c = {}; n.forEach((function (t) { return c[e(t)] = { data: t, out: [], depth: -1, skip: !o(t) } })), i.forEach((function (t) { var n = t.source, i = t.target, r = l(n), a = l(i); if (!c.hasOwnProperty(r)) throw "Missing source node with id: ".concat(r); if (!c.hasOwnProperty(a)) throw "Missing target node with id: ".concat(a); var o = c[r], s = c[a]; function l(t) { return "object" === Rh(t) ? e(t) : t } o.out.push(s) })); var u = []; return function t(n) { for (var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [], r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, a = function () { var a = n[o]; if (-1 !== i.indexOf(a)) { var s = [].concat(Gh(i.slice(i.indexOf(a))), [a]).map((function (t) { return e(t.data) })); return u.some((function (t) { return t.length === s.length && t.every((function (t, e) { return t === s[e] })) })) || (u.push(s), l(s)), "continue" } r > a.depth && (a.depth = r, t(a.out, [].concat(Gh(i), [a]), r + (a.skip ? 0 : 1))) }, o = 0, s = n.length; o < s; o++)a() }(Object.values(c)), Object.assign.apply(Object, [{}].concat(Gh(Object.entries(c).filter((function (t) { return !jh(t, 2)[1].skip })).map((function (t) { var e = jh(t, 2); return Oh({}, e[0], e[1].depth) }))))) }(t.graphData, (function (e) { return e[t.nodeId] }), { nodeFilter: t.dagNodeFilter, onLoopError: t.onDagError || void 0 }), R = Math.max.apply(Math, Gh(Object.values(P || []))), D = t.dagLevelDistance || t.graphData.nodes.length / (R || 1) * 2 * (-1 !== ["radialin", "radialout"].indexOf(t.dagMode) ? .7 : 1); if (t.dagMode) { var O = function (e, n) { return function (i) { return e ? (P[i[t.nodeId]] - R / 2) * D * (n ? -1 : 1) : void 0 } }, I = O(-1 !== ["lr", "rl"].indexOf(t.dagMode), "rl" === t.dagMode), N = O(-1 !== ["td", "bu"].indexOf(t.dagMode), "td" === t.dagMode), k = O(-1 !== ["zin", "zout"].indexOf(t.dagMode), "zout" === t.dagMode); t.graphData.nodes.filter(t.dagNodeFilter).forEach((function (t) { t.fx = I(t), t.fy = N(t), t.fz = k(t) })) } t.d3ForceLayout.force("dagRadial", -1 !== ["radialin", "radialout"].indexOf(t.dagMode) ? function (t, e, n, i) { var r, a, o, s, l = Tl(.1); function c(t) { for (var l = 0, c = r.length; l < c; ++l) { var u = r[l], h = u.x - e || 1e-6, d = (u.y || 0) - n || 1e-6, p = (u.z || 0) - i || 1e-6, f = Math.sqrt(h * h + d * d + p * p), m = (s[l] - f) * o[l] * t / f; u.vx += h * m, a > 1 && (u.vy += d * m), a > 2 && (u.vz += p * m) } } function u() { if (r) { var e, n = r.length; for (o = new Array(n), s = new Array(n), e = 0; e < n; ++e)s[e] = +t(r[e], e, r), o[e] = isNaN(s[e]) ? 0 : +l(r[e], e, r) } } return "function" != typeof t && (t = Tl(+t)), null == e && (e = 0), null == n && (n = 0), null == i && (i = 0), c.initialize = function (t, ...e) { r = t, a = e.find((t => [1, 2, 3].includes(t))) || 2, u() }, c.strength = function (t) { return arguments.length ? (l = "function" == typeof t ? t : Tl(+t), u(), c) : l }, c.radius = function (e) { return arguments.length ? (t = "function" == typeof e ? e : Tl(+e), u(), c) : t }, c.x = function (t) { return arguments.length ? (e = +t, c) : e }, c.y = function (t) { return arguments.length ? (n = +t, c) : n }, c.z = function (t) { return arguments.length ? (i = +t, c) : i }, c }((function (e) { var n = P[e[t.nodeId]] || -1; return ("radialin" === t.dagMode ? R - n : n) * D })).strength((function (e) { return t.dagNodeFilter(e) ? 1 : 0 })) : null) } else { var z = nd.graph(); t.graphData.nodes.forEach((function (e) { z.addNode(e[t.nodeId]) })), t.graphData.links.forEach((function (t) { z.addLink(t.source, t.target) })), (A = nd.forcelayout(z, Ph({ dimensions: t.numDimensions }, t.ngraphPhysics))).graph = z } for (var U = 0; U < t.warmupTicks && !(C && t.d3AlphaMin > 0 && t.d3ForceLayout.alpha() < t.d3AlphaMin); U++)A[C ? "tick" : "step"](); t.layout = A, this.resetCountdown() } t.engineRunning = !0, t.onFinishUpdate() } }); var od = function (t) { var e = arguments.length > 2 && void 0 !== arguments[2] && arguments[2], n = function (n) { !function (t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && Nh(t, e) }(s, n); var i, r, a, o = Bh(s); function s() { var n; !function (t, e) { if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function") }(this, s); for (var i = arguments.length, r = new Array(i), a = 0; a < i; a++)r[a] = arguments[a]; return (n = o.call.apply(o, [this].concat(r))).__kapsuleInstance = t().apply(void 0, [].concat(Gh(e ? [Fh(n)] : []), r)), n } return i = s, r && Dh(i.prototype, r), a && Dh(i, a), Object.defineProperty(i, "prototype", { writable: !1 }), i }(arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : Object); return Object.keys(t()).forEach((function (t) { return n.prototype[t] = function () { var e, n = (e = this.__kapsuleInstance)[t].apply(e, arguments); return n === this.__kapsuleInstance ? this : n } })), n }(ad, (window.THREE ? window.THREE : { Group: Qo }).Group, !0); const sd = { type: "change" }, ld = { type: "start" }, cd = { type: "end" }; class ud extends Ee { constructor(t, e) { super(); const n = this, i = { NONE: -1, ROTATE: 0, ZOOM: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_ZOOM_PAN: 4 }; this.object = t, this.domElement = e, this.domElement.style.touchAction = "none", this.enabled = !0, this.screen = { left: 0, top: 0, width: 0, height: 0 }, this.rotateSpeed = 1, this.zoomSpeed = 1.2, this.panSpeed = .3, this.noRotate = !1, this.noZoom = !1, this.noPan = !1, this.staticMoving = !1, this.dynamicDampingFactor = .2, this.minDistance = 0, this.maxDistance = 1 / 0, this.keys = ["KeyA", "KeyS", "KeyD"], this.mouseButtons = { LEFT: o.ROTATE, MIDDLE: o.DOLLY, RIGHT: o.PAN }, this.target = new Ge; const r = 1e-6, a = new Ge; let s = 1, l = i.NONE, c = i.NONE, u = 0, h = 0, d = 0; const p = new Ge, f = new ke, m = new ke, g = new Ge, v = new ke, _ = new ke, y = new ke, x = new ke, b = [], w = {}; this.target0 = this.target.clone(), this.position0 = this.object.position.clone(), this.up0 = this.object.up.clone(), this.zoom0 = this.object.zoom, this.handleResize = function () { const t = n.domElement.getBoundingClientRect(), e = n.domElement.ownerDocument.documentElement; n.screen.left = t.left + window.pageXOffset - e.clientLeft, n.screen.top = t.top + window.pageYOffset - e.clientTop, n.screen.width = t.width, n.screen.height = t.height }; const M = function () { const t = new ke; return function (e, i) { return t.set((e - n.screen.left) / n.screen.width, (i - n.screen.top) / n.screen.height), t } }(), S = function () { const t = new ke; return function (e, i) { return t.set((e - .5 * n.screen.width - n.screen.left) / (.5 * n.screen.width), (n.screen.height + 2 * (n.screen.top - i)) / n.screen.width), t } }(); function E(t) { !1 !== n.enabled && (0 === b.length && (n.domElement.setPointerCapture(t.pointerId), n.domElement.addEventListener("pointermove", T), n.domElement.addEventListener("pointerup", A)), function (t) { b.push(t) }(t), "touch" === t.pointerType ? function (t) { if (1 === (I(t), b.length)) l = i.TOUCH_ROTATE, m.copy(S(b[0].pageX, b[0].pageY)), f.copy(m); else { l = i.TOUCH_ZOOM_PAN; const t = b[0].pageX - b[1].pageX, e = b[0].pageY - b[1].pageY; h = u = Math.sqrt(t * t + e * e); const n = (b[0].pageX + b[1].pageX) / 2, r = (b[0].pageY + b[1].pageY) / 2; y.copy(M(n, r)), x.copy(y) } n.dispatchEvent(ld) }(t) : function (t) { if (l === i.NONE) switch (t.button) { case n.mouseButtons.LEFT: l = i.ROTATE; break; case n.mouseButtons.MIDDLE: l = i.ZOOM; break; case n.mouseButtons.RIGHT: l = i.PAN }const e = c !== i.NONE ? c : l; e !== i.ROTATE || n.noRotate ? e !== i.ZOOM || n.noZoom ? e !== i.PAN || n.noPan || (y.copy(M(t.pageX, t.pageY)), x.copy(y)) : (v.copy(M(t.pageX, t.pageY)), _.copy(v)) : (m.copy(S(t.pageX, t.pageY)), f.copy(m)); n.dispatchEvent(ld) }(t)) } function T(t) { !1 !== n.enabled && ("touch" === t.pointerType ? function (t) { if (1 === (I(t), b.length)) f.copy(m), m.copy(S(t.pageX, t.pageY)); else { const e = function (t) { const e = t.pointerId === b[0].pointerId ? b[1] : b[0]; return w[e.pointerId] }(t), n = t.pageX - e.x, i = t.pageY - e.y; h = Math.sqrt(n * n + i * i); const r = (t.pageX + e.x) / 2, a = (t.pageY + e.y) / 2; x.copy(M(r, a)) } }(t) : function (t) { const e = c !== i.NONE ? c : l; e !== i.ROTATE || n.noRotate ? e !== i.ZOOM || n.noZoom ? e !== i.PAN || n.noPan || x.copy(M(t.pageX, t.pageY)) : _.copy(M(t.pageX, t.pageY)) : (f.copy(m), m.copy(S(t.pageX, t.pageY))) }(t)) } function A(t) { !1 !== n.enabled && ("touch" === t.pointerType ? function (t) { switch (b.length) { case 0: l = i.NONE; break; case 1: l = i.TOUCH_ROTATE, m.copy(S(t.pageX, t.pageY)), f.copy(m); break; case 2: l = i.TOUCH_ZOOM_PAN; for (let e = 0; e < b.length; e++)if (b[e].pointerId !== t.pointerId) { const t = w[b[e].pointerId]; m.copy(S(t.x, t.y)), f.copy(m); break } }n.dispatchEvent(cd) }(t) : (l = i.NONE, n.dispatchEvent(cd)), O(t), 0 === b.length && (n.domElement.releasePointerCapture(t.pointerId), n.domElement.removeEventListener("pointermove", T), n.domElement.removeEventListener("pointerup", A))) } function C(t) { O(t) } function L(t) { !1 !== n.enabled && (window.removeEventListener("keydown", L), c === i.NONE && (t.code !== n.keys[i.ROTATE] || n.noRotate ? t.code !== n.keys[i.ZOOM] || n.noZoom ? t.code !== n.keys[i.PAN] || n.noPan || (c = i.PAN) : c = i.ZOOM : c = i.ROTATE)) } function P() { !1 !== n.enabled && (c = i.NONE, window.addEventListener("keydown", L)) } function R(t) { if (!1 !== n.enabled && !0 !== n.noZoom) { switch (t.preventDefault(), t.deltaMode) { case 2: v.y -= .025 * t.deltaY; break; case 1: v.y -= .01 * t.deltaY; break; default: v.y -= 25e-5 * t.deltaY }n.dispatchEvent(ld), n.dispatchEvent(cd) } } function D(t) { !1 !== n.enabled && t.preventDefault() } function O(t) { delete w[t.pointerId]; for (let e = 0; e < b.length; e++)if (b[e].pointerId == t.pointerId) return void b.splice(e, 1) } function I(t) { let e = w[t.pointerId]; void 0 === e && (e = new ke, w[t.pointerId] = e), e.set(t.pageX, t.pageY) } this.rotateCamera = function () { const t = new Ge, e = new je, i = new Ge, r = new Ge, a = new Ge, o = new Ge; return function () { o.set(m.x - f.x, m.y - f.y, 0); let s = o.length(); s ? (p.copy(n.object.position).sub(n.target), i.copy(p).normalize(), r.copy(n.object.up).normalize(), a.crossVectors(r, i).normalize(), r.setLength(m.y - f.y), a.setLength(m.x - f.x), o.copy(r.add(a)), t.crossVectors(o, p).normalize(), s *= n.rotateSpeed, e.setFromAxisAngle(t, s), p.applyQuaternion(e), n.object.up.applyQuaternion(e), g.copy(t), d = s) : !n.staticMoving && d && (d *= Math.sqrt(1 - n.dynamicDampingFactor), p.copy(n.object.position).sub(n.target), e.setFromAxisAngle(g, d), p.applyQuaternion(e), n.object.up.applyQuaternion(e)), f.copy(m) } }(), this.zoomCamera = function () { let t; l === i.TOUCH_ZOOM_PAN ? (t = u / h, u = h, n.object.isPerspectiveCamera ? p.multiplyScalar(t) : n.object.isOrthographicCamera ? (n.object.zoom /= t, n.object.updateProjectionMatrix()) : console.warn("THREE.TrackballControls: Unsupported camera type")) : (t = 1 + (_.y - v.y) * n.zoomSpeed, 1 !== t && t > 0 && (n.object.isPerspectiveCamera ? p.multiplyScalar(t) : n.object.isOrthographicCamera ? (n.object.zoom /= t, n.object.updateProjectionMatrix()) : console.warn("THREE.TrackballControls: Unsupported camera type")), n.staticMoving ? v.copy(_) : v.y += (_.y - v.y) * this.dynamicDampingFactor) }, this.panCamera = function () { const t = new ke, e = new Ge, i = new Ge; return function () { if (t.copy(x).sub(y), t.lengthSq()) { if (n.object.isOrthographicCamera) { const e = (n.object.right - n.object.left) / n.object.zoom / n.domElement.clientWidth, i = (n.object.top - n.object.bottom) / n.object.zoom / n.domElement.clientWidth; t.x *= e, t.y *= i } t.multiplyScalar(p.length() * n.panSpeed), i.copy(p).cross(n.object.up).setLength(t.x), i.add(e.copy(n.object.up).setLength(t.y)), n.object.position.add(i), n.target.add(i), n.staticMoving ? y.copy(x) : y.add(t.subVectors(x, y).multiplyScalar(n.dynamicDampingFactor)) } } }(), this.checkDistances = function () { n.noZoom && n.noPan || (p.lengthSq() > n.maxDistance * n.maxDistance && (n.object.position.addVectors(n.target, p.setLength(n.maxDistance)), v.copy(_)), p.lengthSq() < n.minDistance * n.minDistance && (n.object.position.addVectors(n.target, p.setLength(n.minDistance)), v.copy(_))) }, this.update = function () { p.subVectors(n.object.position, n.target), n.noRotate || n.rotateCamera(), n.noZoom || n.zoomCamera(), n.noPan || n.panCamera(), n.object.position.addVectors(n.target, p), n.object.isPerspectiveCamera ? (n.checkDistances(), n.object.lookAt(n.target), a.distanceToSquared(n.object.position) > r && (n.dispatchEvent(sd), a.copy(n.object.position))) : n.object.isOrthographicCamera ? (n.object.lookAt(n.target), (a.distanceToSquared(n.object.position) > r || s !== n.object.zoom) && (n.dispatchEvent(sd), a.copy(n.object.position), s = n.object.zoom)) : console.warn("THREE.TrackballControls: Unsupported camera type") }, this.reset = function () { l = i.NONE, c = i.NONE, n.target.copy(n.target0), n.object.position.copy(n.position0), n.object.up.copy(n.up0), n.object.zoom = n.zoom0, n.object.updateProjectionMatrix(), p.subVectors(n.object.position, n.target), n.object.lookAt(n.target), n.dispatchEvent(sd), a.copy(n.object.position), s = n.object.zoom }, this.dispose = function () { n.domElement.removeEventListener("contextmenu", D), n.domElement.removeEventListener("pointerdown", E), n.domElement.removeEventListener("pointercancel", C), n.domElement.removeEventListener("wheel", R), n.domElement.removeEventListener("pointermove", T), n.domElement.removeEventListener("pointerup", A), window.removeEventListener("keydown", L), window.removeEventListener("keyup", P) }, this.domElement.addEventListener("contextmenu", D), this.domElement.addEventListener("pointerdown", E), this.domElement.addEventListener("pointercancel", C), this.domElement.addEventListener("wheel", R, { passive: !1 }), window.addEventListener("keydown", L), window.addEventListener("keyup", P), this.handleResize(), this.update() } } const hd = { type: "change" }, dd = { type: "start" }, pd = { type: "end" }; class fd extends Ee { constructor(t, e) { super(), this.object = t, this.domElement = e, this.domElement.style.touchAction = "none", this.enabled = !0, this.target = new Ge, this.minDistance = 0, this.maxDistance = 1 / 0, this.minZoom = 0, this.maxZoom = 1 / 0, this.minPolarAngle = 0, this.maxPolarAngle = Math.PI, this.minAzimuthAngle = -1 / 0, this.maxAzimuthAngle = 1 / 0, this.enableDamping = !1, this.dampingFactor = .05, this.enableZoom = !0, this.zoomSpeed = 1, this.enableRotate = !0, this.rotateSpeed = 1, this.enablePan = !0, this.panSpeed = 1, this.screenSpacePanning = !0, this.keyPanSpeed = 7, this.autoRotate = !1, this.autoRotateSpeed = 2, this.keys = { LEFT: "ArrowLeft", UP: "ArrowUp", RIGHT: "ArrowRight", BOTTOM: "ArrowDown" }, this.mouseButtons = { LEFT: o.ROTATE, MIDDLE: o.DOLLY, RIGHT: o.PAN }, this.touches = { ONE: s.ROTATE, TWO: s.DOLLY_PAN }, this.target0 = this.target.clone(), this.position0 = this.object.position.clone(), this.zoom0 = this.object.zoom, this._domElementKeyEvents = null, this.getPolarAngle = function () { return l.phi }, this.getAzimuthalAngle = function () { return l.theta }, this.getDistance = function () { return this.object.position.distanceTo(this.target) }, this.listenToKeyEvents = function (t) { t.addEventListener("keydown", W), this._domElementKeyEvents = t }, this.stopListenToKeyEvents = function () { this._domElementKeyEvents.removeEventListener("keydown", W), this._domElementKeyEvents = null }, this.saveState = function () { n.target0.copy(n.target), n.position0.copy(n.object.position), n.zoom0 = n.object.zoom }, this.reset = function () { n.target.copy(n.target0), n.object.position.copy(n.position0), n.object.zoom = n.zoom0, n.object.updateProjectionMatrix(), n.dispatchEvent(hd), n.update(), r = i.NONE }, this.update = function () { const e = new Ge, o = (new je).setFromUnitVectors(t.up, new Ge(0, 1, 0)), s = o.clone().invert(), p = new Ge, f = new je, m = 2 * Math.PI; return function () { const t = n.object.position; e.copy(t).sub(n.target), e.applyQuaternion(o), l.setFromVector3(e), n.autoRotate && r === i.NONE && E(2 * Math.PI / 60 / 60 * n.autoRotateSpeed), n.enableDamping ? (l.theta += c.theta * n.dampingFactor, l.phi += c.phi * n.dampingFactor) : (l.theta += c.theta, l.phi += c.phi); let g = n.minAzimuthAngle, v = n.maxAzimuthAngle; return isFinite(g) && isFinite(v) && (g < -Math.PI ? g += m : g > Math.PI && (g -= m), v < -Math.PI ? v += m : v > Math.PI && (v -= m), l.theta = g <= v ? Math.max(g, Math.min(v, l.theta)) : l.theta > (g + v) / 2 ? Math.max(g, l.theta) : Math.min(v, l.theta)), l.phi = Math.max(n.minPolarAngle, Math.min(n.maxPolarAngle, l.phi)), l.makeSafe(), l.radius *= u, l.radius = Math.max(n.minDistance, Math.min(n.maxDistance, l.radius)), !0 === n.enableDamping ? n.target.addScaledVector(h, n.dampingFactor) : n.target.add(h), e.setFromSpherical(l), e.applyQuaternion(s), t.copy(n.target).add(e), n.object.lookAt(n.target), !0 === n.enableDamping ? (c.theta *= 1 - n.dampingFactor, c.phi *= 1 - n.dampingFactor, h.multiplyScalar(1 - n.dampingFactor)) : (c.set(0, 0, 0), h.set(0, 0, 0)), u = 1, !!(d || p.distanceToSquared(n.object.position) > a || 8 * (1 - f.dot(n.object.quaternion)) > a) && (n.dispatchEvent(hd), p.copy(n.object.position), f.copy(n.object.quaternion), d = !1, !0) } }(), this.dispose = function () { n.domElement.removeEventListener("contextmenu", q), n.domElement.removeEventListener("pointerdown", B), n.domElement.removeEventListener("pointercancel", H), n.domElement.removeEventListener("wheel", V), n.domElement.removeEventListener("pointermove", j), n.domElement.removeEventListener("pointerup", G), null !== n._domElementKeyEvents && (n._domElementKeyEvents.removeEventListener("keydown", W), n._domElementKeyEvents = null) }; const n = this, i = { NONE: -1, ROTATE: 0, DOLLY: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_PAN: 4, TOUCH_DOLLY_PAN: 5, TOUCH_DOLLY_ROTATE: 6 }; let r = i.NONE; const a = 1e-6, l = new qs, c = new qs; let u = 1; const h = new Ge; let d = !1; const p = new ke, f = new ke, m = new ke, g = new ke, v = new ke, _ = new ke, y = new ke, x = new ke, b = new ke, w = [], M = {}; function S() { return Math.pow(.95, n.zoomSpeed) } function E(t) { c.theta -= t } function T(t) { c.phi -= t } const A = function () { const t = new Ge; return function (e, n) { t.setFromMatrixColumn(n, 0), t.multiplyScalar(-e), h.add(t) } }(), C = function () { const t = new Ge; return function (e, i) { !0 === n.screenSpacePanning ? t.setFromMatrixColumn(i, 1) : (t.setFromMatrixColumn(i, 0), t.crossVectors(n.object.up, t)), t.multiplyScalar(e), h.add(t) } }(), L = function () { const t = new Ge; return function (e, i) { const r = n.domElement; if (n.object.isPerspectiveCamera) { const a = n.object.position; t.copy(a).sub(n.target); let o = t.length(); o *= Math.tan(n.object.fov / 2 * Math.PI / 180), A(2 * e * o / r.clientHeight, n.object.matrix), C(2 * i * o / r.clientHeight, n.object.matrix) } else n.object.isOrthographicCamera ? (A(e * (n.object.right - n.object.left) / n.object.zoom / r.clientWidth, n.object.matrix), C(i * (n.object.top - n.object.bottom) / n.object.zoom / r.clientHeight, n.object.matrix)) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."), n.enablePan = !1) } }(); function P(t) { n.object.isPerspectiveCamera ? u /= t : n.object.isOrthographicCamera ? (n.object.zoom = Math.max(n.minZoom, Math.min(n.maxZoom, n.object.zoom * t)), n.object.updateProjectionMatrix(), d = !0) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."), n.enableZoom = !1) } function R(t) { n.object.isPerspectiveCamera ? u *= t : n.object.isOrthographicCamera ? (n.object.zoom = Math.max(n.minZoom, Math.min(n.maxZoom, n.object.zoom / t)), n.object.updateProjectionMatrix(), d = !0) : (console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."), n.enableZoom = !1) } function D(t) { p.set(t.clientX, t.clientY) } function O(t) { g.set(t.clientX, t.clientY) } function I() { if (1 === w.length) p.set(w[0].pageX, w[0].pageY); else { const t = .5 * (w[0].pageX + w[1].pageX), e = .5 * (w[0].pageY + w[1].pageY); p.set(t, e) } } function N() { if (1 === w.length) g.set(w[0].pageX, w[0].pageY); else { const t = .5 * (w[0].pageX + w[1].pageX), e = .5 * (w[0].pageY + w[1].pageY); g.set(t, e) } } function k() { const t = w[0].pageX - w[1].pageX, e = w[0].pageY - w[1].pageY, n = Math.sqrt(t * t + e * e); y.set(0, n) } function z(t) { if (1 == w.length) f.set(t.pageX, t.pageY); else { const e = $(t), n = .5 * (t.pageX + e.x), i = .5 * (t.pageY + e.y); f.set(n, i) } m.subVectors(f, p).multiplyScalar(n.rotateSpeed); const e = n.domElement; E(2 * Math.PI * m.x / e.clientHeight), T(2 * Math.PI * m.y / e.clientHeight), p.copy(f) } function U(t) { if (1 === w.length) v.set(t.pageX, t.pageY); else { const e = $(t), n = .5 * (t.pageX + e.x), i = .5 * (t.pageY + e.y); v.set(n, i) } _.subVectors(v, g).multiplyScalar(n.panSpeed), L(_.x, _.y), g.copy(v) } function F(t) { const e = $(t), i = t.pageX - e.x, r = t.pageY - e.y, a = Math.sqrt(i * i + r * r); x.set(0, a), b.set(0, Math.pow(x.y / y.y, n.zoomSpeed)), P(b.y), y.copy(x) } function B(t) { !1 !== n.enabled && (0 === w.length && (n.domElement.setPointerCapture(t.pointerId), n.domElement.addEventListener("pointermove", j), n.domElement.addEventListener("pointerup", G)), function (t) { w.push(t) }(t), "touch" === t.pointerType ? function (t) { switch (Y(t), w.length) { case 1: switch (n.touches.ONE) { case s.ROTATE: if (!1 === n.enableRotate) return; I(), r = i.TOUCH_ROTATE; break; case s.PAN: if (!1 === n.enablePan) return; N(), r = i.TOUCH_PAN; break; default: r = i.NONE }break; case 2: switch (n.touches.TWO) { case s.DOLLY_PAN: if (!1 === n.enableZoom && !1 === n.enablePan) return; n.enableZoom && k(), n.enablePan && N(), r = i.TOUCH_DOLLY_PAN; break; case s.DOLLY_ROTATE: if (!1 === n.enableZoom && !1 === n.enableRotate) return; n.enableZoom && k(), n.enableRotate && I(), r = i.TOUCH_DOLLY_ROTATE; break; default: r = i.NONE }break; default: r = i.NONE }r !== i.NONE && n.dispatchEvent(dd) }(t) : function (t) { let e; switch (t.button) { case 0: e = n.mouseButtons.LEFT; break; case 1: e = n.mouseButtons.MIDDLE; break; case 2: e = n.mouseButtons.RIGHT; break; default: e = -1 }switch (e) { case o.DOLLY: if (!1 === n.enableZoom) return; !function (t) { y.set(t.clientX, t.clientY) }(t), r = i.DOLLY; break; case o.ROTATE: if (t.ctrlKey || t.metaKey || t.shiftKey) { if (!1 === n.enablePan) return; O(t), r = i.PAN } else { if (!1 === n.enableRotate) return; D(t), r = i.ROTATE } break; case o.PAN: if (t.ctrlKey || t.metaKey || t.shiftKey) { if (!1 === n.enableRotate) return; D(t), r = i.ROTATE } else { if (!1 === n.enablePan) return; O(t), r = i.PAN } break; default: r = i.NONE }r !== i.NONE && n.dispatchEvent(dd) }(t)) } function j(t) { !1 !== n.enabled && ("touch" === t.pointerType ? function (t) { switch (Y(t), r) { case i.TOUCH_ROTATE: if (!1 === n.enableRotate) return; z(t), n.update(); break; case i.TOUCH_PAN: if (!1 === n.enablePan) return; U(t), n.update(); break; case i.TOUCH_DOLLY_PAN: if (!1 === n.enableZoom && !1 === n.enablePan) return; !function (t) { n.enableZoom && F(t), n.enablePan && U(t) }(t), n.update(); break; case i.TOUCH_DOLLY_ROTATE: if (!1 === n.enableZoom && !1 === n.enableRotate) return; !function (t) { n.enableZoom && F(t), n.enableRotate && z(t) }(t), n.update(); break; default: r = i.NONE } }(t) : function (t) { switch (r) { case i.ROTATE: if (!1 === n.enableRotate) return; !function (t) { f.set(t.clientX, t.clientY), m.subVectors(f, p).multiplyScalar(n.rotateSpeed); const e = n.domElement; E(2 * Math.PI * m.x / e.clientHeight), T(2 * Math.PI * m.y / e.clientHeight), p.copy(f), n.update() }(t); break; case i.DOLLY: if (!1 === n.enableZoom) return; !function (t) { x.set(t.clientX, t.clientY), b.subVectors(x, y), b.y > 0 ? P(S()) : b.y < 0 && R(S()), y.copy(x), n.update() }(t); break; case i.PAN: if (!1 === n.enablePan) return; !function (t) { v.set(t.clientX, t.clientY), _.subVectors(v, g).multiplyScalar(n.panSpeed), L(_.x, _.y), g.copy(v), n.update() }(t) } }(t)) } function G(t) { X(t), 0 === w.length && (n.domElement.releasePointerCapture(t.pointerId), n.domElement.removeEventListener("pointermove", j), n.domElement.removeEventListener("pointerup", G)), n.dispatchEvent(pd), r = i.NONE } function H(t) { X(t) } function V(t) { !1 !== n.enabled && !1 !== n.enableZoom && r === i.NONE && (t.preventDefault(), n.dispatchEvent(dd), function (t) { t.deltaY < 0 ? R(S()) : t.deltaY > 0 && P(S()), n.update() }(t), n.dispatchEvent(pd)) } function W(t) { !1 !== n.enabled && !1 !== n.enablePan && function (t) { let e = !1; switch (t.code) { case n.keys.UP: t.ctrlKey || t.metaKey || t.shiftKey ? T(2 * Math.PI * n.rotateSpeed / n.domElement.clientHeight) : L(0, n.keyPanSpeed), e = !0; break; case n.keys.BOTTOM: t.ctrlKey || t.metaKey || t.shiftKey ? T(-2 * Math.PI * n.rotateSpeed / n.domElement.clientHeight) : L(0, -n.keyPanSpeed), e = !0; break; case n.keys.LEFT: t.ctrlKey || t.metaKey || t.shiftKey ? E(2 * Math.PI * n.rotateSpeed / n.domElement.clientHeight) : L(n.keyPanSpeed, 0), e = !0; break; case n.keys.RIGHT: t.ctrlKey || t.metaKey || t.shiftKey ? E(-2 * Math.PI * n.rotateSpeed / n.domElement.clientHeight) : L(-n.keyPanSpeed, 0), e = !0 }e && (t.preventDefault(), n.update()) }(t) } function q(t) { !1 !== n.enabled && t.preventDefault() } function X(t) { delete M[t.pointerId]; for (let e = 0; e < w.length; e++)if (w[e].pointerId == t.pointerId) return void w.splice(e, 1) } function Y(t) { let e = M[t.pointerId]; void 0 === e && (e = new ke, M[t.pointerId] = e), e.set(t.pageX, t.pageY) } function $(t) { const e = t.pointerId === w[0].pointerId ? w[1] : w[0]; return M[e.pointerId] } n.domElement.addEventListener("contextmenu", q), n.domElement.addEventListener("pointerdown", B), n.domElement.addEventListener("pointercancel", H), n.domElement.addEventListener("wheel", V, { passive: !1 }), this.update() } } const md = { type: "change" }; class gd extends Ee { constructor(t, e) { super(), this.object = t, this.domElement = e, this.movementSpeed = 1, this.rollSpeed = .005, this.dragToLook = !1, this.autoForward = !1; const n = this, i = 1e-6, r = new je, a = new Ge; this.tmpQuaternion = new je, this.status = 0, this.moveState = { up: 0, down: 0, left: 0, right: 0, forward: 0, back: 0, pitchUp: 0, pitchDown: 0, yawLeft: 0, yawRight: 0, rollLeft: 0, rollRight: 0 }, this.moveVector = new Ge(0, 0, 0), this.rotationVector = new Ge(0, 0, 0), this.keydown = function (t) { if (!t.altKey) { switch (t.code) { case "ShiftLeft": case "ShiftRight": this.movementSpeedMultiplier = .1; break; case "KeyW": this.moveState.forward = 1; break; case "KeyS": this.moveState.back = 1; break; case "KeyA": this.moveState.left = 1; break; case "KeyD": this.moveState.right = 1; break; case "KeyR": this.moveState.up = 1; break; case "KeyF": this.moveState.down = 1; break; case "ArrowUp": this.moveState.pitchUp = 1; break; case "ArrowDown": this.moveState.pitchDown = 1; break; case "ArrowLeft": this.moveState.yawLeft = 1; break; case "ArrowRight": this.moveState.yawRight = 1; break; case "KeyQ": this.moveState.rollLeft = 1; break; case "KeyE": this.moveState.rollRight = 1 }this.updateMovementVector(), this.updateRotationVector() } }, this.keyup = function (t) { switch (t.code) { case "ShiftLeft": case "ShiftRight": this.movementSpeedMultiplier = 1; break; case "KeyW": this.moveState.forward = 0; break; case "KeyS": this.moveState.back = 0; break; case "KeyA": this.moveState.left = 0; break; case "KeyD": this.moveState.right = 0; break; case "KeyR": this.moveState.up = 0; break; case "KeyF": this.moveState.down = 0; break; case "ArrowUp": this.moveState.pitchUp = 0; break; case "ArrowDown": this.moveState.pitchDown = 0; break; case "ArrowLeft": this.moveState.yawLeft = 0; break; case "ArrowRight": this.moveState.yawRight = 0; break; case "KeyQ": this.moveState.rollLeft = 0; break; case "KeyE": this.moveState.rollRight = 0 }this.updateMovementVector(), this.updateRotationVector() }, this.pointerdown = function (t) { if (this.dragToLook) this.status++; else { switch (t.button) { case 0: this.moveState.forward = 1; break; case 2: this.moveState.back = 1 }this.updateMovementVector() } }, this.pointermove = function (t) { if (!this.dragToLook || this.status > 0) { const e = this.getContainerDimensions(), n = e.size[0] / 2, i = e.size[1] / 2; this.moveState.yawLeft = -(t.pageX - e.offset[0] - n) / n, this.moveState.pitchDown = (t.pageY - e.offset[1] - i) / i, this.updateRotationVector() } }, this.pointerup = function (t) { if (this.dragToLook) this.status--, this.moveState.yawLeft = this.moveState.pitchDown = 0; else { switch (t.button) { case 0: this.moveState.forward = 0; break; case 2: this.moveState.back = 0 }this.updateMovementVector() } this.updateRotationVector() }, this.update = function (t) { const e = t * n.movementSpeed, o = t * n.rollSpeed; n.object.translateX(n.moveVector.x * e), n.object.translateY(n.moveVector.y * e), n.object.translateZ(n.moveVector.z * e), n.tmpQuaternion.set(n.rotationVector.x * o, n.rotationVector.y * o, n.rotationVector.z * o, 1).normalize(), n.object.quaternion.multiply(n.tmpQuaternion), (a.distanceToSquared(n.object.position) > i || 8 * (1 - r.dot(n.object.quaternion)) > i) && (n.dispatchEvent(md), r.copy(n.object.quaternion), a.copy(n.object.position)) }, this.updateMovementVector = function () { const t = this.moveState.forward || this.autoForward && !this.moveState.back ? 1 : 0; this.moveVector.x = -this.moveState.left + this.moveState.right, this.moveVector.y = -this.moveState.down + this.moveState.up, this.moveVector.z = -t + this.moveState.back }, this.updateRotationVector = function () { this.rotationVector.x = -this.moveState.pitchDown + this.moveState.pitchUp, this.rotationVector.y = -this.moveState.yawRight + this.moveState.yawLeft, this.rotationVector.z = -this.moveState.rollRight + this.moveState.rollLeft }, this.getContainerDimensions = function () { return this.domElement != document ? { size: [this.domElement.offsetWidth, this.domElement.offsetHeight], offset: [this.domElement.offsetLeft, this.domElement.offsetTop] } : { size: [window.innerWidth, window.innerHeight], offset: [0, 0] } }, this.dispose = function () { this.domElement.removeEventListener("contextmenu", vd), this.domElement.removeEventListener("pointerdown", s), this.domElement.removeEventListener("pointermove", o), this.domElement.removeEventListener("pointerup", l), window.removeEventListener("keydown", c), window.removeEventListener("keyup", u) }; const o = this.pointermove.bind(this), s = this.pointerdown.bind(this), l = this.pointerup.bind(this), c = this.keydown.bind(this), u = this.keyup.bind(this); this.domElement.addEventListener("contextmenu", vd), this.domElement.addEventListener("pointerdown", s), this.domElement.addEventListener("pointermove", o), this.domElement.addEventListener("pointerup", l), window.addEventListener("keydown", c), window.addEventListener("keyup", u), this.updateMovementVector(), this.updateRotationVector() } } function vd(t) { t.preventDefault() } const _d = { uniforms: { tDiffuse: { value: null }, opacity: { value: 1 } }, vertexShader: "\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}", fragmentShader: "\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tgl_FragColor = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor.a *= opacity;\n\n\n\t\t}" }; class yd { constructor() { this.enabled = !0, this.needsSwap = !0, this.clear = !1, this.renderToScreen = !1 } setSize() { } render() { console.error("THREE.Pass: .render() must be implemented in derived pass.") } dispose() { } } const xd = new zr(-1, 1, 1, -1, 0, 1), bd = new Gi; bd.setAttribute("position", new Ii([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3)), bd.setAttribute("uv", new Ii([0, 2, 0, 0, 2, 0], 2)); class wd { constructor(t) { this._mesh = new ir(bd, t) } dispose() { this._mesh.geometry.dispose() } render(t) { t.render(this._mesh, xd) } get material() { return this._mesh.material } set material(t) { this._mesh.material = t } } class Md extends yd { constructor(t, e) { super(), this.textureID = void 0 !== e ? e : "tDiffuse", t instanceof ur ? (this.uniforms = t.uniforms, this.material = t) : t && (this.uniforms = cr.clone(t.uniforms), this.material = new ur({ defines: Object.assign({}, t.defines), uniforms: this.uniforms, vertexShader: t.vertexShader, fragmentShader: t.fragmentShader })), this.fsQuad = new wd(this.material) } render(t, e, n) { this.uniforms[this.textureID] && (this.uniforms[this.textureID].value = n.texture), this.fsQuad.material = this.material, this.renderToScreen ? (t.setRenderTarget(null), this.fsQuad.render(t)) : (t.setRenderTarget(e), this.clear && t.clear(t.autoClearColor, t.autoClearDepth, t.autoClearStencil), this.fsQuad.render(t)) } dispose() { this.material.dispose(), this.fsQuad.dispose() } } class Sd extends yd { constructor(t, e) { super(), this.scene = t, this.camera = e, this.clear = !0, this.needsSwap = !1, this.inverse = !1 } render(t, e, n) { const i = t.getContext(), r = t.state; let a, o; r.buffers.color.setMask(!1), r.buffers.depth.setMask(!1), r.buffers.color.setLocked(!0), r.buffers.depth.setLocked(!0), this.inverse ? (a = 0, o = 1) : (a = 1, o = 0), r.buffers.stencil.setTest(!0), r.buffers.stencil.setOp(i.REPLACE, i.REPLACE, i.REPLACE), r.buffers.stencil.setFunc(i.ALWAYS, a, 4294967295), r.buffers.stencil.setClear(o), r.buffers.stencil.setLocked(!0), t.setRenderTarget(n), this.clear && t.clear(), t.render(this.scene, this.camera), t.setRenderTarget(e), this.clear && t.clear(), t.render(this.scene, this.camera), r.buffers.color.setLocked(!1), r.buffers.depth.setLocked(!1), r.buffers.stencil.setLocked(!1), r.buffers.stencil.setFunc(i.EQUAL, 1, 4294967295), r.buffers.stencil.setOp(i.KEEP, i.KEEP, i.KEEP), r.buffers.stencil.setLocked(!0) } } class Ed extends yd { constructor() { super(), this.needsSwap = !1 } render(t) { t.state.buffers.stencil.setLocked(!1), t.state.buffers.stencil.setTest(!1) } } class Td { constructor(t, e) { if (this.renderer = t, void 0 === e) { const n = t.getSize(new ke); this._pixelRatio = t.getPixelRatio(), this._width = n.width, this._height = n.height, (e = new sn(this._width * this._pixelRatio, this._height * this._pixelRatio)).texture.name = "EffectComposer.rt1" } else this._pixelRatio = 1, this._width = e.width, this._height = e.height; this.renderTarget1 = e, this.renderTarget2 = e.clone(), this.renderTarget2.texture.name = "EffectComposer.rt2", this.writeBuffer = this.renderTarget1, this.readBuffer = this.renderTarget2, this.renderToScreen = !0, this.passes = [], this.copyPass = new Md(_d), this.clock = new js } swapBuffers() { const t = this.readBuffer; this.readBuffer = this.writeBuffer, this.writeBuffer = t } addPass(t) { this.passes.push(t), t.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio) } insertPass(t, e) { this.passes.splice(e, 0, t), t.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio) } removePass(t) { const e = this.passes.indexOf(t); -1 !== e && this.passes.splice(e, 1) } isLastEnabledPass(t) { for (let e = t + 1; e < this.passes.length; e++)if (this.passes[e].enabled) return !1; return !0 } render(t) { void 0 === t && (t = this.clock.getDelta()); const e = this.renderer.getRenderTarget(); let n = !1; for (let e = 0, i = this.passes.length; e < i; e++) { const i = this.passes[e]; if (!1 !== i.enabled) { if (i.renderToScreen = this.renderToScreen && this.isLastEnabledPass(e), i.render(this.renderer, this.writeBuffer, this.readBuffer, t, n), i.needsSwap) { if (n) { const e = this.renderer.getContext(), n = this.renderer.state.buffers.stencil; n.setFunc(e.NOTEQUAL, 1, 4294967295), this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, t), n.setFunc(e.EQUAL, 1, 4294967295) } this.swapBuffers() } void 0 !== Sd && (i instanceof Sd ? n = !0 : i instanceof Ed && (n = !1)) } } this.renderer.setRenderTarget(e) } reset(t) { if (void 0 === t) { const e = this.renderer.getSize(new ke); this._pixelRatio = this.renderer.getPixelRatio(), this._width = e.width, this._height = e.height, (t = this.renderTarget1.clone()).setSize(this._width * this._pixelRatio, this._height * this._pixelRatio) } this.renderTarget1.dispose(), this.renderTarget2.dispose(), this.renderTarget1 = t, this.renderTarget2 = t.clone(), this.writeBuffer = this.renderTarget1, this.readBuffer = this.renderTarget2 } setSize(t, e) { this._width = t, this._height = e; const n = this._width * this._pixelRatio, i = this._height * this._pixelRatio; this.renderTarget1.setSize(n, i), this.renderTarget2.setSize(n, i); for (let t = 0; t < this.passes.length; t++)this.passes[t].setSize(n, i) } setPixelRatio(t) { this._pixelRatio = t, this.setSize(this._width, this._height) } dispose() { this.renderTarget1.dispose(), this.renderTarget2.dispose(), this.copyPass.dispose() } } class Ad extends yd { constructor(t, e, n, i, r) { super(), this.scene = t, this.camera = e, this.overrideMaterial = n, this.clearColor = i, this.clearAlpha = void 0 !== r ? r : 0, this.clear = !0, this.clearDepth = !1, this.needsSwap = !1, this._oldClearColor = new Ti } render(t, e, n) { const i = t.autoClear; let r, a; t.autoClear = !1, void 0 !== this.overrideMaterial && (a = this.scene.overrideMaterial, this.scene.overrideMaterial = this.overrideMaterial), this.clearColor && (t.getClearColor(this._oldClearColor), r = t.getClearAlpha(), t.setClearColor(this.clearColor, this.clearAlpha)), this.clearDepth && t.clearDepth(), t.setRenderTarget(this.renderToScreen ? null : n), this.clear && t.clear(t.autoClearColor, t.autoClearDepth, t.autoClearStencil), t.render(this.scene, this.camera), this.clearColor && t.setClearColor(this._oldClearColor, r), void 0 !== this.overrideMaterial && (this.scene.overrideMaterial = a), t.autoClear = i } } function Cd() { return Cd = Object.assign ? Object.assign.bind() : function (t) { for (var e = 1; e < arguments.length; e++) { var n = arguments[e]; for (var i in n) Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]) } return t }, Cd.apply(this, arguments) } function Ld(t, e) { return Ld = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t }, Ld(t, e) } function Pd(t) { return Pd = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t) }, Pd(t) } function Rd(t, e, n) { return Rd = function () { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } }() ? Reflect.construct.bind() : function (t, e, n) { var i = [null]; i.push.apply(i, e); var r = new (Function.bind.apply(t, i)); return n && Ld(r, n.prototype), r }, Rd.apply(null, arguments) } function Dd(t) { var e = "function" == typeof Map ? new Map : void 0; return Dd = function (t) { if (null === t || (n = t, -1 === Function.toString.call(n).indexOf("[native code]"))) return t; var n; if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function"); if (void 0 !== e) { if (e.has(t)) return e.get(t); e.set(t, i) } function i() { return Rd(t, arguments, Pd(this).constructor) } return i.prototype = Object.create(t.prototype, { constructor: { value: i, enumerable: !1, writable: !0, configurable: !0 } }), Ld(i, t) }, Dd(t) } var Od = { 1: "Passed invalid arguments to hsl, please pass multiple numbers e.g. hsl(360, 0.75, 0.4) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75 }).\n\n", 2: "Passed invalid arguments to hsla, please pass multiple numbers e.g. hsla(360, 0.75, 0.4, 0.7) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75, alpha: 0.7 }).\n\n", 3: "Passed an incorrect argument to a color function, please pass a string representation of a color.\n\n", 4: "Couldn't generate valid rgb string from %s, it returned %s.\n\n", 5: "Couldn't parse the color string. Please provide the color as a string in hex, rgb, rgba, hsl or hsla notation.\n\n", 6: "Passed invalid arguments to rgb, please pass multiple numbers e.g. rgb(255, 205, 100) or an object e.g. rgb({ red: 255, green: 205, blue: 100 }).\n\n", 7: "Passed invalid arguments to rgba, please pass multiple numbers e.g. rgb(255, 205, 100, 0.75) or an object e.g. rgb({ red: 255, green: 205, blue: 100, alpha: 0.75 }).\n\n", 8: "Passed invalid argument to toColorString, please pass a RgbColor, RgbaColor, HslColor or HslaColor object.\n\n", 9: "Please provide a number of steps to the modularScale helper.\n\n", 10: "Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\n\n", 11: 'Invalid value passed as base to modularScale, expected number or em string but got "%s"\n\n', 12: 'Expected a string ending in "px" or a number passed as the first argument to %s(), got "%s" instead.\n\n', 13: 'Expected a string ending in "px" or a number passed as the second argument to %s(), got "%s" instead.\n\n', 14: 'Passed invalid pixel value ("%s") to %s(), please pass a value like "12px" or 12.\n\n', 15: 'Passed invalid base value ("%s") to %s(), please pass a value like "12px" or 12.\n\n', 16: "You must provide a template to this method.\n\n", 17: "You passed an unsupported selector state to this method.\n\n", 18: "minScreen and maxScreen must be provided as stringified numbers with the same units.\n\n", 19: "fromSize and toSize must be provided as stringified numbers with the same units.\n\n", 20: "expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\n\n", 21: "expects the objects in the first argument array to have the properties `prop`, `fromSize`, and `toSize`.\n\n", 22: "expects the first argument object to have the properties `prop`, `fromSize`, and `toSize`.\n\n", 23: "fontFace expects a name of a font-family.\n\n", 24: "fontFace expects either the path to the font file(s) or a name of a local copy.\n\n", 25: "fontFace expects localFonts to be an array.\n\n", 26: "fontFace expects fileFormats to be an array.\n\n", 27: "radialGradient requries at least 2 color-stops to properly render.\n\n", 28: "Please supply a filename to retinaImage() as the first argument.\n\n", 29: "Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\n\n", 30: "Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n", 31: "The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation\n\n", 32: "To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')\n\n", 33: "The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation\n\n", 34: "borderRadius expects a radius value as a string or number as the second argument.\n\n", 35: 'borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.\n\n', 36: "Property must be a string value.\n\n", 37: "Syntax Error at %s.\n\n", 38: "Formula contains a function that needs parentheses at %s.\n\n", 39: "Formula is missing closing parenthesis at %s.\n\n", 40: "Formula has too many closing parentheses at %s.\n\n", 41: "All values in a formula must have the same unit or be unitless.\n\n", 42: "Please provide a number of steps to the modularScale helper.\n\n", 43: "Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\n\n", 44: "Invalid value passed as base to modularScale, expected number or em/rem string but got %s.\n\n", 45: "Passed invalid argument to hslToColorString, please pass a HslColor or HslaColor object.\n\n", 46: "Passed invalid argument to rgbToColorString, please pass a RgbColor or RgbaColor object.\n\n", 47: "minScreen and maxScreen must be provided as stringified numbers with the same units.\n\n", 48: "fromSize and toSize must be provided as stringified numbers with the same units.\n\n", 49: "Expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\n\n", 50: "Expects the objects in the first argument array to have the properties prop, fromSize, and toSize.\n\n", 51: "Expects the first argument object to have the properties prop, fromSize, and toSize.\n\n", 52: "fontFace expects either the path to the font file(s) or a name of a local copy.\n\n", 53: "fontFace expects localFonts to be an array.\n\n", 54: "fontFace expects fileFormats to be an array.\n\n", 55: "fontFace expects a name of a font-family.\n\n", 56: "linearGradient requries at least 2 color-stops to properly render.\n\n", 57: "radialGradient requries at least 2 color-stops to properly render.\n\n", 58: "Please supply a filename to retinaImage() as the first argument.\n\n", 59: "Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\n\n", 60: "Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n", 61: "Property must be a string value.\n\n", 62: "borderRadius expects a radius value as a string or number as the second argument.\n\n", 63: 'borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.\n\n', 64: "The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation.\n\n", 65: "To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s').\n\n", 66: "The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation.\n\n", 67: "You must provide a template to this method.\n\n", 68: "You passed an unsupported selector state to this method.\n\n", 69: 'Expected a string ending in "px" or a number passed as the first argument to %s(), got %s instead.\n\n', 70: 'Expected a string ending in "px" or a number passed as the second argument to %s(), got %s instead.\n\n', 71: 'Passed invalid pixel value %s to %s(), please pass a value like "12px" or 12.\n\n', 72: 'Passed invalid base value %s to %s(), please pass a value like "12px" or 12.\n\n', 73: "Please provide a valid CSS variable.\n\n", 74: "CSS variable not found and no default was provided.\n\n", 75: "important requires a valid style object, got a %s instead.\n\n", 76: "fromSize and toSize must be provided as stringified numbers with the same units as minScreen and maxScreen.\n\n", 77: 'remToPx expects a value in "rem" but you provided it in "%s".\n\n', 78: 'base must be set in "px" or "%" but you set it in "%s".\n' }; function Id() { for (var t = arguments.length, e = new Array(t), n = 0; n < t; n++)e[n] = arguments[n]; var i, r = e[0], a = []; for (i = 1; i < e.length; i += 1)a.push(e[i]); return a.forEach((function (t) { r = r.replace(/%[a-z]/, t) })), r } var Nd = function (t) { var e, n; function i(e) { var n; if ("production" === process.env.NODE_ENV) n = t.call(this, "An error occurred. See https://github.com/styled-components/polished/blob/main/src/internalHelpers/errors.md#" + e + " for more information.") || this; else { for (var i = arguments.length, r = new Array(i > 1 ? i - 1 : 0), a = 1; a < i; a++)r[a - 1] = arguments[a]; n = t.call(this, Id.apply(void 0, [Od[e]].concat(r))) || this } return function (t) { if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return t }(n) } return n = t, (e = i).prototype = Object.create(n.prototype), e.prototype.constructor = e, Ld(e, n), i }(Dd(Error)); function kd(t) { return Math.round(255 * t) } function zd(t, e, n) { return kd(t) + "," + kd(e) + "," + kd(n) } function Ud(t, e, n, i) { if (void 0 === i && (i = zd), 0 === e) return i(n, n, n); var r = (t % 360 + 360) % 360 / 60, a = (1 - Math.abs(2 * n - 1)) * e, o = a * (1 - Math.abs(r % 2 - 1)), s = 0, l = 0, c = 0; r >= 0 && r < 1 ? (s = a, l = o) : r >= 1 && r < 2 ? (s = o, l = a) : r >= 2 && r < 3 ? (l = a, c = o) : r >= 3 && r < 4 ? (l = o, c = a) : r >= 4 && r < 5 ? (s = o, c = a) : r >= 5 && r < 6 && (s = a, c = o); var u = n - a / 2; return i(s + u, l + u, c + u) } var Fd = { aliceblue: "f0f8ff", antiquewhite: "faebd7", aqua: "00ffff", aquamarine: "7fffd4", azure: "f0ffff", beige: "f5f5dc", bisque: "ffe4c4", black: "000", blanchedalmond: "ffebcd", blue: "0000ff", blueviolet: "8a2be2", brown: "a52a2a", burlywood: "deb887", cadetblue: "5f9ea0", chartreuse: "7fff00", chocolate: "d2691e", coral: "ff7f50", cornflowerblue: "6495ed", cornsilk: "fff8dc", crimson: "dc143c", cyan: "00ffff", darkblue: "00008b", darkcyan: "008b8b", darkgoldenrod: "b8860b", darkgray: "a9a9a9", darkgreen: "006400", darkgrey: "a9a9a9", darkkhaki: "bdb76b", darkmagenta: "8b008b", darkolivegreen: "556b2f", darkorange: "ff8c00", darkorchid: "9932cc", darkred: "8b0000", darksalmon: "e9967a", darkseagreen: "8fbc8f", darkslateblue: "483d8b", darkslategray: "2f4f4f", darkslategrey: "2f4f4f", darkturquoise: "00ced1", darkviolet: "9400d3", deeppink: "ff1493", deepskyblue: "00bfff", dimgray: "696969", dimgrey: "696969", dodgerblue: "1e90ff", firebrick: "b22222", floralwhite: "fffaf0", forestgreen: "228b22", fuchsia: "ff00ff", gainsboro: "dcdcdc", ghostwhite: "f8f8ff", gold: "ffd700", goldenrod: "daa520", gray: "808080", green: "008000", greenyellow: "adff2f", grey: "808080", honeydew: "f0fff0", hotpink: "ff69b4", indianred: "cd5c5c", indigo: "4b0082", ivory: "fffff0", khaki: "f0e68c", lavender: "e6e6fa", lavenderblush: "fff0f5", lawngreen: "7cfc00", lemonchiffon: "fffacd", lightblue: "add8e6", lightcoral: "f08080", lightcyan: "e0ffff", lightgoldenrodyellow: "fafad2", lightgray: "d3d3d3", lightgreen: "90ee90", lightgrey: "d3d3d3", lightpink: "ffb6c1", lightsalmon: "ffa07a", lightseagreen: "20b2aa", lightskyblue: "87cefa", lightslategray: "789", lightslategrey: "789", lightsteelblue: "b0c4de", lightyellow: "ffffe0", lime: "0f0", limegreen: "32cd32", linen: "faf0e6", magenta: "f0f", maroon: "800000", mediumaquamarine: "66cdaa", mediumblue: "0000cd", mediumorchid: "ba55d3", mediumpurple: "9370db", mediumseagreen: "3cb371", mediumslateblue: "7b68ee", mediumspringgreen: "00fa9a", mediumturquoise: "48d1cc", mediumvioletred: "c71585", midnightblue: "191970", mintcream: "f5fffa", mistyrose: "ffe4e1", moccasin: "ffe4b5", navajowhite: "ffdead", navy: "000080", oldlace: "fdf5e6", olive: "808000", olivedrab: "6b8e23", orange: "ffa500", orangered: "ff4500", orchid: "da70d6", palegoldenrod: "eee8aa", palegreen: "98fb98", paleturquoise: "afeeee", palevioletred: "db7093", papayawhip: "ffefd5", peachpuff: "ffdab9", peru: "cd853f", pink: "ffc0cb", plum: "dda0dd", powderblue: "b0e0e6", purple: "800080", rebeccapurple: "639", red: "f00", rosybrown: "bc8f8f", royalblue: "4169e1", saddlebrown: "8b4513", salmon: "fa8072", sandybrown: "f4a460", seagreen: "2e8b57", seashell: "fff5ee", sienna: "a0522d", silver: "c0c0c0", skyblue: "87ceeb", slateblue: "6a5acd", slategray: "708090", slategrey: "708090", snow: "fffafa", springgreen: "00ff7f", steelblue: "4682b4", tan: "d2b48c", teal: "008080", thistle: "d8bfd8", tomato: "ff6347", turquoise: "40e0d0", violet: "ee82ee", wheat: "f5deb3", white: "fff", whitesmoke: "f5f5f5", yellow: "ff0", yellowgreen: "9acd32" }; var Bd = /^#[a-fA-F0-9]{6}$/, jd = /^#[a-fA-F0-9]{8}$/, Gd = /^#[a-fA-F0-9]{3}$/, Hd = /^#[a-fA-F0-9]{4}$/, Vd = /^rgb\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*\)$/i, Wd = /^rgb(?:a)?\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i, qd = /^hsl\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*\)$/i, Xd = /^hsl(?:a)?\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i; function Yd(t) { if ("string" != typeof t) throw new Nd(3); var e = function (t) { if ("string" != typeof t) return t; var e = t.toLowerCase(); return Fd[e] ? "#" + Fd[e] : t }(t); if (e.match(Bd)) return { red: parseInt("" + e[1] + e[2], 16), green: parseInt("" + e[3] + e[4], 16), blue: parseInt("" + e[5] + e[6], 16) }; if (e.match(jd)) { var n = parseFloat((parseInt("" + e[7] + e[8], 16) / 255).toFixed(2)); return { red: parseInt("" + e[1] + e[2], 16), green: parseInt("" + e[3] + e[4], 16), blue: parseInt("" + e[5] + e[6], 16), alpha: n } } if (e.match(Gd)) return { red: parseInt("" + e[1] + e[1], 16), green: parseInt("" + e[2] + e[2], 16), blue: parseInt("" + e[3] + e[3], 16) }; if (e.match(Hd)) { var i = parseFloat((parseInt("" + e[4] + e[4], 16) / 255).toFixed(2)); return { red: parseInt("" + e[1] + e[1], 16), green: parseInt("" + e[2] + e[2], 16), blue: parseInt("" + e[3] + e[3], 16), alpha: i } } var r = Vd.exec(e); if (r) return { red: parseInt("" + r[1], 10), green: parseInt("" + r[2], 10), blue: parseInt("" + r[3], 10) }; var a = Wd.exec(e.substring(0, 50)); if (a) return { red: parseInt("" + a[1], 10), green: parseInt("" + a[2], 10), blue: parseInt("" + a[3], 10), alpha: parseFloat("" + a[4]) > 1 ? parseFloat("" + a[4]) / 100 : parseFloat("" + a[4]) }; var o = qd.exec(e); if (o) { var s = "rgb(" + Ud(parseInt("" + o[1], 10), parseInt("" + o[2], 10) / 100, parseInt("" + o[3], 10) / 100) + ")", l = Vd.exec(s); if (!l) throw new Nd(4, e, s); return { red: parseInt("" + l[1], 10), green: parseInt("" + l[2], 10), blue: parseInt("" + l[3], 10) } } var c = Xd.exec(e.substring(0, 50)); if (c) { var u = "rgb(" + Ud(parseInt("" + c[1], 10), parseInt("" + c[2], 10) / 100, parseInt("" + c[3], 10) / 100) + ")", h = Vd.exec(u); if (!h) throw new Nd(4, e, u); return { red: parseInt("" + h[1], 10), green: parseInt("" + h[2], 10), blue: parseInt("" + h[3], 10), alpha: parseFloat("" + c[4]) > 1 ? parseFloat("" + c[4]) / 100 : parseFloat("" + c[4]) } } throw new Nd(5) } var $d = function (t) { return 7 === t.length && t[1] === t[2] && t[3] === t[4] && t[5] === t[6] ? "#" + t[1] + t[3] + t[5] : t }; function Zd(t) { var e = t.toString(16); return 1 === e.length ? "0" + e : e } function Jd(t, e, n) { if ("number" == typeof t && "number" == typeof e && "number" == typeof n) return $d("#" + Zd(t) + Zd(e) + Zd(n)); if ("object" == typeof t && void 0 === e && void 0 === n) return $d("#" + Zd(t.red) + Zd(t.green) + Zd(t.blue)); throw new Nd(6) } function Kd(t, e, n) { return function () { var i = n.concat(Array.prototype.slice.call(arguments)); return i.length >= e ? t.apply(this, i) : Kd(t, e, i) } } function Qd(t) { return Kd(t, t.length, []) } function tp(t, e) { if ("transparent" === e) return e; var n, i, r, a = Yd(e), o = "number" == typeof a.alpha ? a.alpha : 1; return function (t, e, n, i) { if ("string" == typeof t && "number" == typeof e) { var r = Yd(t); return "rgba(" + r.red + "," + r.green + "," + r.blue + "," + e + ")" } if ("number" == typeof t && "number" == typeof e && "number" == typeof n && "number" == typeof i) return i >= 1 ? Jd(t, e, n) : "rgba(" + t + "," + e + "," + n + "," + i + ")"; if ("object" == typeof t && void 0 === e && void 0 === n && void 0 === i) return t.alpha >= 1 ? Jd(t.red, t.green, t.blue) : "rgba(" + t.red + "," + t.green + "," + t.blue + "," + t.alpha + ")"; throw new Nd(7) }(Cd({}, a, { alpha: (n = 0, i = 1, r = (100 * o + 100 * parseFloat(t)) / 100, Math.max(n, Math.min(i, r))) })) } var ep = Qd(tp), np = { Linear: { None: function (t) { return t } }, Quadratic: { In: function (t) { return t * t }, Out: function (t) { return t * (2 - t) }, InOut: function (t) { return (t *= 2) < 1 ? .5 * t * t : -.5 * (--t * (t - 2) - 1) } }, Cubic: { In: function (t) { return t * t * t }, Out: function (t) { return --t * t * t + 1 }, InOut: function (t) { return (t *= 2) < 1 ? .5 * t * t * t : .5 * ((t -= 2) * t * t + 2) } }, Quartic: { In: function (t) { return t * t * t * t }, Out: function (t) { return 1 - --t * t * t * t }, InOut: function (t) { return (t *= 2) < 1 ? .5 * t * t * t * t : -.5 * ((t -= 2) * t * t * t - 2) } }, Quintic: { In: function (t) { return t * t * t * t * t }, Out: function (t) { return --t * t * t * t * t + 1 }, InOut: function (t) { return (t *= 2) < 1 ? .5 * t * t * t * t * t : .5 * ((t -= 2) * t * t * t * t + 2) } }, Sinusoidal: { In: function (t) { return 1 - Math.cos(t * Math.PI / 2) }, Out: function (t) { return Math.sin(t * Math.PI / 2) }, InOut: function (t) { return .5 * (1 - Math.cos(Math.PI * t)) } }, Exponential: { In: function (t) { return 0 === t ? 0 : Math.pow(1024, t - 1) }, Out: function (t) { return 1 === t ? 1 : 1 - Math.pow(2, -10 * t) }, InOut: function (t) { return 0 === t ? 0 : 1 === t ? 1 : (t *= 2) < 1 ? .5 * Math.pow(1024, t - 1) : .5 * (2 - Math.pow(2, -10 * (t - 1))) } }, Circular: { In: function (t) { return 1 - Math.sqrt(1 - t * t) }, Out: function (t) { return Math.sqrt(1 - --t * t) }, InOut: function (t) { return (t *= 2) < 1 ? -.5 * (Math.sqrt(1 - t * t) - 1) : .5 * (Math.sqrt(1 - (t -= 2) * t) + 1) } }, Elastic: { In: function (t) { return 0 === t ? 0 : 1 === t ? 1 : -Math.pow(2, 10 * (t - 1)) * Math.sin(5 * (t - 1.1) * Math.PI) }, Out: function (t) { return 0 === t ? 0 : 1 === t ? 1 : Math.pow(2, -10 * t) * Math.sin(5 * (t - .1) * Math.PI) + 1 }, InOut: function (t) { return 0 === t ? 0 : 1 === t ? 1 : (t *= 2) < 1 ? -.5 * Math.pow(2, 10 * (t - 1)) * Math.sin(5 * (t - 1.1) * Math.PI) : .5 * Math.pow(2, -10 * (t - 1)) * Math.sin(5 * (t - 1.1) * Math.PI) + 1 } }, Back: { In: function (t) { var e = 1.70158; return t * t * ((e + 1) * t - e) }, Out: function (t) { var e = 1.70158; return --t * t * ((e + 1) * t + e) + 1 }, InOut: function (t) { var e = 2.5949095; return (t *= 2) < 1 ? t * t * ((e + 1) * t - e) * .5 : .5 * ((t -= 2) * t * ((e + 1) * t + e) + 2) } }, Bounce: { In: function (t) { return 1 - np.Bounce.Out(1 - t) }, Out: function (t) { return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375 }, InOut: function (t) { return t < .5 ? .5 * np.Bounce.In(2 * t) : .5 * np.Bounce.Out(2 * t - 1) + .5 } } }, ip = "undefined" == typeof self && "undefined" != typeof process && process.hrtime ? function () { var t = process.hrtime(); return 1e3 * t[0] + t[1] / 1e6 } : "undefined" != typeof self && void 0 !== self.performance && void 0 !== self.performance.now ? self.performance.now.bind(self.performance) : void 0 !== Date.now ? Date.now : function () { return (new Date).getTime() }, rp = function () { function t() { this._tweens = {}, this._tweensAddedDuringUpdate = {} } return t.prototype.getAll = function () { var t = this; return Object.keys(this._tweens).map((function (e) { return t._tweens[e] })) }, t.prototype.removeAll = function () { this._tweens = {} }, t.prototype.add = function (t) { this._tweens[t.getId()] = t, this._tweensAddedDuringUpdate[t.getId()] = t }, t.prototype.remove = function (t) { delete this._tweens[t.getId()], delete this._tweensAddedDuringUpdate[t.getId()] }, t.prototype.update = function (t, e) { void 0 === t && (t = ip()), void 0 === e && (e = !1); var n = Object.keys(this._tweens); if (0 === n.length) return !1; for (; n.length > 0;) { this._tweensAddedDuringUpdate = {}; for (var i = 0; i < n.length; i++) { var r = this._tweens[n[i]], a = !e; r && !1 === r.update(t, a) && !e && delete this._tweens[n[i]] } n = Object.keys(this._tweensAddedDuringUpdate) } return !0 }, t }(), ap = { Linear: function (t, e) { var n = t.length - 1, i = n * e, r = Math.floor(i), a = ap.Utils.Linear; return e < 0 ? a(t[0], t[1], i) : e > 1 ? a(t[n], t[n - 1], n - i) : a(t[r], t[r + 1 > n ? n : r + 1], i - r) }, Bezier: function (t, e) { for (var n = 0, i = t.length - 1, r = Math.pow, a = ap.Utils.Bernstein, o = 0; o <= i; o++)n += r(1 - e, i - o) * r(e, o) * t[o] * a(i, o); return n }, CatmullRom: function (t, e) { var n = t.length - 1, i = n * e, r = Math.floor(i), a = ap.Utils.CatmullRom; return t[0] === t[n] ? (e < 0 && (r = Math.floor(i = n * (1 + e))), a(t[(r - 1 + n) % n], t[r], t[(r + 1) % n], t[(r + 2) % n], i - r)) : e < 0 ? t[0] - (a(t[0], t[0], t[1], t[1], -i) - t[0]) : e > 1 ? t[n] - (a(t[n], t[n], t[n - 1], t[n - 1], i - n) - t[n]) : a(t[r ? r - 1 : 0], t[r], t[n < r + 1 ? n : r + 1], t[n < r + 2 ? n : r + 2], i - r) }, Utils: { Linear: function (t, e, n) { return (e - t) * n + t }, Bernstein: function (t, e) { var n = ap.Utils.Factorial; return n(t) / n(e) / n(t - e) }, Factorial: function () { var t = [1]; return function (e) { var n = 1; if (t[e]) return t[e]; for (var i = e; i > 1; i--)n *= i; return t[e] = n, n } }(), CatmullRom: function (t, e, n, i, r) { var a = .5 * (n - t), o = .5 * (i - e), s = r * r; return (2 * e - 2 * n + a + o) * (r * s) + (-3 * e + 3 * n - 2 * a - o) * s + a * r + e } } }, op = function () { function t() { } return t.nextId = function () { return t._nextId++ }, t._nextId = 0, t }(), sp = new rp, lp = function () { function t(t, e) { void 0 === e && (e = sp), this._object = t, this._group = e, this._isPaused = !1, this._pauseStart = 0, this._valuesStart = {}, this._valuesEnd = {}, this._valuesStartRepeat = {}, this._duration = 1e3, this._initialRepeat = 0, this._repeat = 0, this._yoyo = !1, this._isPlaying = !1, this._reversed = !1, this._delayTime = 0, this._startTime = 0, this._easingFunction = np.Linear.None, this._interpolationFunction = ap.Linear, this._chainedTweens = [], this._onStartCallbackFired = !1, this._id = op.nextId(), this._isChainStopped = !1, this._goToEnd = !1 } return t.prototype.getId = function () { return this._id }, t.prototype.isPlaying = function () { return this._isPlaying }, t.prototype.isPaused = function () { return this._isPaused }, t.prototype.to = function (t, e) { return this._valuesEnd = Object.create(t), void 0 !== e && (this._duration = e), this }, t.prototype.duration = function (t) { return this._duration = t, this }, t.prototype.start = function (t) { if (this._isPlaying) return this; if (this._group && this._group.add(this), this._repeat = this._initialRepeat, this._reversed) for (var e in this._reversed = !1, this._valuesStartRepeat) this._swapEndStartRepeatValues(e), this._valuesStart[e] = this._valuesStartRepeat[e]; return this._isPlaying = !0, this._isPaused = !1, this._onStartCallbackFired = !1, this._isChainStopped = !1, this._startTime = void 0 !== t ? "string" == typeof t ? ip() + parseFloat(t) : t : ip(), this._startTime += this._delayTime, this._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat), this }, t.prototype._setupProperties = function (t, e, n, i) { for (var r in n) { var a = t[r], o = Array.isArray(a), s = o ? "array" : typeof a, l = !o && Array.isArray(n[r]); if ("undefined" !== s && "function" !== s) { if (l) { var c = n[r]; if (0 === c.length) continue; c = c.map(this._handleRelativeValue.bind(this, a)), n[r] = [a].concat(c) } if ("object" !== s && !o || !a || l) void 0 === e[r] && (e[r] = a), o || (e[r] *= 1), i[r] = l ? n[r].slice().reverse() : e[r] || 0; else { for (var u in e[r] = o ? [] : {}, a) e[r][u] = a[u]; i[r] = o ? [] : {}, this._setupProperties(a, e[r], n[r], i[r]) } } } }, t.prototype.stop = function () { return this._isChainStopped || (this._isChainStopped = !0, this.stopChainedTweens()), this._isPlaying ? (this._group && this._group.remove(this), this._isPlaying = !1, this._isPaused = !1, this._onStopCallback && this._onStopCallback(this._object), this) : this }, t.prototype.end = function () { return this._goToEnd = !0, this.update(1 / 0), this }, t.prototype.pause = function (t) { return void 0 === t && (t = ip()), this._isPaused || !this._isPlaying || (this._isPaused = !0, this._pauseStart = t, this._group && this._group.remove(this)), this }, t.prototype.resume = function (t) { return void 0 === t && (t = ip()), this._isPaused && this._isPlaying ? (this._isPaused = !1, this._startTime += t - this._pauseStart, this._pauseStart = 0, this._group && this._group.add(this), this) : this }, t.prototype.stopChainedTweens = function () { for (var t = 0, e = this._chainedTweens.length; t < e; t++)this._chainedTweens[t].stop(); return this }, t.prototype.group = function (t) { return this._group = t, this }, t.prototype.delay = function (t) { return this._delayTime = t, this }, t.prototype.repeat = function (t) { return this._initialRepeat = t, this._repeat = t, this }, t.prototype.repeatDelay = function (t) { return this._repeatDelayTime = t, this }, t.prototype.yoyo = function (t) { return this._yoyo = t, this }, t.prototype.easing = function (t) { return this._easingFunction = t, this }, t.prototype.interpolation = function (t) { return this._interpolationFunction = t, this }, t.prototype.chain = function () { for (var t = [], e = 0; e < arguments.length; e++)t[e] = arguments[e]; return this._chainedTweens = t, this }, t.prototype.onStart = function (t) { return this._onStartCallback = t, this }, t.prototype.onUpdate = function (t) { return this._onUpdateCallback = t, this }, t.prototype.onRepeat = function (t) { return this._onRepeatCallback = t, this }, t.prototype.onComplete = function (t) { return this._onCompleteCallback = t, this }, t.prototype.onStop = function (t) { return this._onStopCallback = t, this }, t.prototype.update = function (t, e) { if (void 0 === t && (t = ip()), void 0 === e && (e = !0), this._isPaused) return !0; var n, i, r = this._startTime + this._duration; if (!this._goToEnd && !this._isPlaying) { if (t > r) return !1; e && this.start(t) } if (this._goToEnd = !1, t < this._startTime) return !0; !1 === this._onStartCallbackFired && (this._onStartCallback && this._onStartCallback(this._object), this._onStartCallbackFired = !0), i = (t - this._startTime) / this._duration, i = 0 === this._duration || i > 1 ? 1 : i; var a = this._easingFunction(i); if (this._updateProperties(this._object, this._valuesStart, this._valuesEnd, a), this._onUpdateCallback && this._onUpdateCallback(this._object, i), 1 === i) { if (this._repeat > 0) { for (n in isFinite(this._repeat) && this._repeat--, this._valuesStartRepeat) this._yoyo || "string" != typeof this._valuesEnd[n] || (this._valuesStartRepeat[n] = this._valuesStartRepeat[n] + parseFloat(this._valuesEnd[n])), this._yoyo && this._swapEndStartRepeatValues(n), this._valuesStart[n] = this._valuesStartRepeat[n]; return this._yoyo && (this._reversed = !this._reversed), void 0 !== this._repeatDelayTime ? this._startTime = t + this._repeatDelayTime : this._startTime = t + this._delayTime, this._onRepeatCallback && this._onRepeatCallback(this._object), !0 } this._onCompleteCallback && this._onCompleteCallback(this._object); for (var o = 0, s = this._chainedTweens.length; o < s; o++)this._chainedTweens[o].start(this._startTime + this._duration); return this._isPlaying = !1, !1 } return !0 }, t.prototype._updateProperties = function (t, e, n, i) { for (var r in n) if (void 0 !== e[r]) { var a = e[r] || 0, o = n[r], s = Array.isArray(t[r]), l = Array.isArray(o); !s && l ? t[r] = this._interpolationFunction(o, i) : "object" == typeof o && o ? this._updateProperties(t[r], a, o, i) : "number" == typeof (o = this._handleRelativeValue(a, o)) && (t[r] = a + (o - a) * i) } }, t.prototype._handleRelativeValue = function (t, e) { return "string" != typeof e ? e : "+" === e.charAt(0) || "-" === e.charAt(0) ? t + parseFloat(e) : parseFloat(e) }, t.prototype._swapEndStartRepeatValues = function (t) { var e = this._valuesStartRepeat[t], n = this._valuesEnd[t]; this._valuesStartRepeat[t] = "string" == typeof n ? this._valuesStartRepeat[t] + parseFloat(n) : this._valuesEnd[t], this._valuesEnd[t] = e }, t }(), cp = op.nextId, up = sp, hp = up.getAll.bind(up), dp = up.removeAll.bind(up), pp = up.add.bind(up), fp = up.remove.bind(up), mp = up.update.bind(up), gp = { Easing: np, Group: rp, Interpolation: ap, now: ip, Sequence: op, nextId: cp, Tween: lp, VERSION: "18.6.4", getAll: hp, removeAll: dp, add: pp, remove: fp, update: mp }; function vp(t, e, n) { return (e = function (t) { var e = function (t, e) { if ("object" != typeof t || null === t) return t; var n = t[Symbol.toPrimitive]; if (void 0 !== n) { var i = n.call(t, e || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value.") } return ("string" === e ? String : Number)(t) }(t, "string"); return "symbol" == typeof e ? e : String(e) }(e)) in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t } function _p(t, e) { return function (t) { if (Array.isArray(t)) return t }(t) || function (t, e) { var n = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"]; if (null != n) { var i, r, a, o, s = [], l = !0, c = !1; try { if (a = (n = n.call(t)).next, 0 === e) { if (Object(n) !== n) return; l = !1 } else for (; !(l = (i = a.call(n)).done) && (s.push(i.value), s.length !== e); l = !0); } catch (t) { c = !0, r = t } finally { try { if (!l && null != n.return && (o = n.return(), Object(o) !== o)) return } finally { if (c) throw r } } return s } }(t, e) || xp(t, e) || function () { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function yp(t) { return function (t) { if (Array.isArray(t)) return bp(t) }(t) || function (t) { if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t) }(t) || xp(t) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.") }() } function xp(t, e) { if (t) { if ("string" == typeof t) return bp(t, e); var n = Object.prototype.toString.call(t).slice(8, -1); return "Object" === n && t.constructor && (n = t.constructor.name), "Map" === n || "Set" === n ? Array.from(t) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? bp(t, e) : void 0 } } function bp(t, e) { (null == e || e > t.length) && (e = t.length); for (var n = 0, i = new Array(e); n < e; n++)i[n] = t[n]; return i } !function (t, e) { void 0 === e && (e = {}); var n = e.insertAt; if (t && "undefined" != typeof document) { var i = document.head || document.getElementsByTagName("head")[0], r = document.createElement("style"); r.type = "text/css", "top" === n && i.firstChild ? i.insertBefore(r, i.firstChild) : i.appendChild(r), r.styleSheet ? r.styleSheet.cssText = t : r.appendChild(document.createTextNode(t)) } }(".scene-nav-info {\n  bottom: 5px;\n  width: 100%;\n  text-align: center;\n  color: slategrey;\n  opacity: 0.7;\n  font-size: 10px;\n}\n\n.scene-tooltip {\n  top: 0;\n  color: lavender;\n  font-size: 15px;\n}\n\n.scene-nav-info, .scene-tooltip {\n  position: absolute;\n  font-family: sans-serif;\n  pointer-events: none;\n}\n\n.scene-container canvas:focus {\n  outline: none;\n}"); var wp = window.THREE ? window.THREE : { WebGLRenderer: os, Scene: class extends li { constructor() { super(), this.isScene = !0, this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.backgroundBlurriness = 0, this.backgroundIntensity = 1, this.overrideMaterial = null, "undefined" != typeof __THREE_DEVTOOLS__ && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this })) } copy(t, e) { return super.copy(t, e), null !== t.background && (this.background = t.background.clone()), null !== t.environment && (this.environment = t.environment.clone()), null !== t.fog && (this.fog = t.fog.clone()), this.backgroundBlurriness = t.backgroundBlurriness, this.backgroundIntensity = t.backgroundIntensity, null !== t.overrideMaterial && (this.overrideMaterial = t.overrideMaterial.clone()), this.matrixAutoUpdate = t.matrixAutoUpdate, this } toJSON(t) { const e = super.toJSON(t); return null !== this.fog && (e.object.fog = this.fog.toJSON()), this.backgroundBlurriness > 0 && (e.object.backgroundBlurriness = this.backgroundBlurriness), 1 !== this.backgroundIntensity && (e.object.backgroundIntensity = this.backgroundIntensity), e } get autoUpdate() { return console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."), this.matrixWorldAutoUpdate } set autoUpdate(t) { console.warn("THREE.Scene: autoUpdate was renamed to matrixWorldAutoUpdate in r144."), this.matrixWorldAutoUpdate = t } }, PerspectiveCamera: dr, Raycaster: Hs, TextureLoader: class extends Os { constructor(t) { super(t) } load(t, e, n, i) { const r = new an, a = new Is(this.manager); return a.setCrossOrigin(this.crossOrigin), a.setPath(this.path), a.load(t, (function (t) { r.image = t, r.needsUpdate = !0, void 0 !== e && e(r) }), n, i), r } }, Vector2: ke, Vector3: Ge, Box3: un, Color: Ti, Mesh: ir, SphereGeometry: Cs, MeshBasicMaterial: Ci, BackSide: m, EventDispatcher: Ee, MOUSE: o, Quaternion: je, Spherical: qs, Clock: js }, Mp = bu({ props: { width: { default: window.innerWidth, onChange: function (t, e, n) { isNaN(t) && (e.width = n) } }, height: { default: window.innerHeight, onChange: function (t, e, n) { isNaN(t) && (e.height = n) } }, backgroundColor: { default: "#000011" }, backgroundImageUrl: {}, onBackgroundImageLoaded: {}, showNavInfo: { default: !0 }, skyRadius: { default: 5e4 }, objects: { default: [] }, enablePointerInteraction: { default: !0, onChange: function (t, e) { e.hoverObj = null, e.toolTipElem && (e.toolTipElem.innerHTML = "") }, triggerUpdate: !1 }, lineHoverPrecision: { default: 1, triggerUpdate: !1 }, hoverOrderComparator: { default: function () { return -1 }, triggerUpdate: !1 }, hoverFilter: { default: function () { return !0 }, triggerUpdate: !1 }, tooltipContent: { triggerUpdate: !1 }, hoverDuringDrag: { default: !1, triggerUpdate: !1 }, clickAfterDrag: { default: !1, triggerUpdate: !1 }, onHover: { default: function () { }, triggerUpdate: !1 }, onClick: { default: function () { }, triggerUpdate: !1 }, onRightClick: { triggerUpdate: !1 } }, methods: { tick: function (t) { if (t.initialised) { if (t.controls.update && t.controls.update(t.clock.getDelta()), t.postProcessingComposer ? t.postProcessingComposer.render() : t.renderer.render(t.scene, t.camera), t.extraRenderers.forEach((function (e) { return e.render(t.scene, t.camera) })), t.enablePointerInteraction) { var e = null; if (t.hoverDuringDrag || !t.isPointerDragging) { var n = this.intersectingObjects(t.pointerPos.x, t.pointerPos.y).filter((function (e) { return t.hoverFilter(e.object) })).sort((function (e, n) { return t.hoverOrderComparator(e.object, n.object) })), i = n.length ? n[0] : null; e = i ? i.object : null, t.intersectionPoint = i ? i.point : null } e !== t.hoverObj && (t.onHover(e, t.hoverObj), t.toolTipElem.innerHTML = e && wu(t.tooltipContent)(e) || "", t.hoverObj = e) } gp.update() } return this }, getPointerPos: function (t) { var e = t.pointerPos; return { x: e.x, y: e.y } }, cameraPosition: function (t, e, n, i) { var r = t.camera; if (e && t.initialised) { var a = e, o = n || { x: 0, y: 0, z: 0 }; if (i) { var s = Object.assign({}, r.position), l = h(); new gp.Tween(s).to(a, i).easing(gp.Easing.Quadratic.Out).onUpdate(c).start(), new gp.Tween(l).to(o, i / 3).easing(gp.Easing.Quadratic.Out).onUpdate(u).start() } else c(a), u(o); return this } return Object.assign({}, r.position, { lookAt: h() }); function c(t) { var e = t.x, n = t.y, i = t.z; void 0 !== e && (r.position.x = e), void 0 !== n && (r.position.y = n), void 0 !== i && (r.position.z = i) } function u(e) { var n = new wp.Vector3(e.x, e.y, e.z); t.controls.target ? t.controls.target = n : r.lookAt(n) } function h() { return Object.assign(new wp.Vector3(0, 0, -1e3).applyQuaternion(r.quaternion).add(r.position)) } }, zoomToFit: function (t) { for (var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0, n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 10, i = arguments.length, r = new Array(i > 3 ? i - 3 : 0), a = 3; a < i; a++)r[a - 3] = arguments[a]; return this.fitToBbox(this.getBbox.apply(this, r), e, n) }, fitToBbox: function (t, e) { var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0, i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 10, r = t.camera; if (e) { var a = new wp.Vector3(0, 0, 0), o = 2 * Math.max.apply(Math, yp(Object.entries(e).map((function (t) { var e = _p(t, 2), n = e[0], i = e[1]; return Math.max.apply(Math, yp(i.map((function (t) { return Math.abs(a[n] - t) })))) })))), s = (1 - 2 * i / t.height) * r.fov, l = o / Math.atan(s * Math.PI / 180), c = l / r.aspect, u = Math.max(l, c); if (u > 0) { var h = a.clone().sub(r.position).normalize().multiplyScalar(-u); this.cameraPosition(h, a, n) } } return this }, getBbox: function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : function () { return !0 }, n = new wp.Box3(new wp.Vector3(0, 0, 0), new wp.Vector3(0, 0, 0)), i = t.objects.filter(e); return i.length ? (i.forEach((function (t) { return n.expandByObject(t) })), Object.assign.apply(Object, yp(["x", "y", "z"].map((function (t) { return vp({}, t, [n.min[t], n.max[t]]) }))))) : null }, getScreenCoords: function (t, e, n, i) { var r = new wp.Vector3(e, n, i); return r.project(this.camera()), { x: (r.x + 1) * t.width / 2, y: -(r.y - 1) * t.height / 2 } }, getSceneCoords: function (t, e, n) { var i = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0, r = new wp.Vector2(e / t.width * 2 - 1, -n / t.height * 2 + 1), a = new wp.Raycaster; return a.setFromCamera(r, t.camera), Object.assign({}, a.ray.at(i, new wp.Vector3)) }, intersectingObjects: function (t, e, n) { var i = new wp.Vector2(e / t.width * 2 - 1, -n / t.height * 2 + 1), r = new wp.Raycaster; return r.params.Line.threshold = t.lineHoverPrecision, r.setFromCamera(i, t.camera), r.intersectObjects(t.objects, !0) }, renderer: function (t) { return t.renderer }, scene: function (t) { return t.scene }, camera: function (t) { return t.camera }, postProcessingComposer: function (t) { return t.postProcessingComposer }, controls: function (t) { return t.controls }, tbControls: function (t) { return t.controls } }, stateInit: function () { return { scene: new wp.Scene, camera: new wp.PerspectiveCamera, clock: new wp.Clock } }, init: function (t, e) { var n = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {}, i = n.controlType, r = void 0 === i ? "trackball" : i, a = n.rendererConfig, o = void 0 === a ? {} : a, s = n.extraRenderers, l = void 0 === s ? [] : s, c = n.waitForLoadComplete, u = void 0 === c || c; t.innerHTML = "", t.appendChild(e.container = document.createElement("div")), e.container.className = "scene-container", e.container.style.position = "relative", e.container.appendChild(e.navInfo = document.createElement("div")), e.navInfo.className = "scene-nav-info", e.navInfo.textContent = { orbit: "Left-click: rotate, Mouse-wheel/middle-click: zoom, Right-click: pan", trackball: "Left-click: rotate, Mouse-wheel/middle-click: zoom, Right-click: pan", fly: "WASD: move, R|F: up | down, Q|E: roll, up|down: pitch, left|right: yaw" }[r] || "", e.navInfo.style.display = e.showNavInfo ? null : "none", e.toolTipElem = document.createElement("div"), e.toolTipElem.classList.add("scene-tooltip"), e.container.appendChild(e.toolTipElem), e.pointerPos = new wp.Vector2, e.pointerPos.x = -2, e.pointerPos.y = -2, ["pointermove", "pointerdown"].forEach((function (t) { return e.container.addEventListener(t, (function (n) { if ("pointerdown" === t && (e.isPointerPressed = !0), !e.isPointerDragging && "pointermove" === n.type && (n.pressure > 0 || e.isPointerPressed) && ("touch" !== n.pointerType || void 0 === n.movementX || [n.movementX, n.movementY].some((function (t) { return Math.abs(t) > 1 }))) && (e.isPointerDragging = !0), e.enablePointerInteraction) { var i = (r = e.container, a = r.getBoundingClientRect(), o = window.pageXOffset || document.documentElement.scrollLeft, s = window.pageYOffset || document.documentElement.scrollTop, { top: a.top + s, left: a.left + o }); e.pointerPos.x = n.pageX - i.left, e.pointerPos.y = n.pageY - i.top, e.toolTipElem.style.top = "".concat(e.pointerPos.y, "px"), e.toolTipElem.style.left = "".concat(e.pointerPos.x, "px"), e.toolTipElem.style.transform = "translate(-".concat(e.pointerPos.x / e.width * 100, "%, ").concat(e.height - e.pointerPos.y < 100 ? "calc(-100% - 8px)" : "21px", ")") } var r, a, o, s }), { passive: !0 }) })), e.container.addEventListener("pointerup", (function (t) { e.isPointerPressed = !1, e.isPointerDragging && (e.isPointerDragging = !1, !e.clickAfterDrag) || requestAnimationFrame((function () { 0 === t.button && e.onClick(e.hoverObj || null, t, e.intersectionPoint), 2 === t.button && e.onRightClick && e.onRightClick(e.hoverObj || null, t, e.intersectionPoint) })) }), { passive: !0, capture: !0 }), e.container.addEventListener("contextmenu", (function (t) { e.onRightClick && t.preventDefault() })), e.renderer = new wp.WebGLRenderer(Object.assign({ antialias: !0, alpha: !0 }, o)), e.renderer.setPixelRatio(Math.min(2, window.devicePixelRatio)), e.container.appendChild(e.renderer.domElement), e.extraRenderers = l, e.extraRenderers.forEach((function (t) { t.domElement.style.position = "absolute", t.domElement.style.top = "0px", t.domElement.style.pointerEvents = "none", e.container.appendChild(t.domElement) })), e.postProcessingComposer = new Td(e.renderer), e.postProcessingComposer.addPass(new Ad(e.scene, e.camera)), e.controls = new { trackball: ud, orbit: fd, fly: gd }[r](e.camera, e.renderer.domElement), "fly" === r && (e.controls.movementSpeed = 300, e.controls.rollSpeed = Math.PI / 6, e.controls.dragToLook = !0), "trackball" !== r && "orbit" !== r || (e.controls.minDistance = .1, e.controls.maxDistance = e.skyRadius, e.controls.addEventListener("start", (function () { e.controlsEngaged = !0 })), e.controls.addEventListener("change", (function () { e.controlsEngaged && (e.controlsDragging = !0) })), e.controls.addEventListener("end", (function () { e.controlsEngaged = !1, e.controlsDragging = !1 }))), [e.renderer, e.postProcessingComposer].concat(yp(e.extraRenderers)).forEach((function (t) { return t.setSize(e.width, e.height) })), e.camera.aspect = e.width / e.height, e.camera.updateProjectionMatrix(), e.camera.position.z = 1e3, e.scene.add(e.skysphere = new wp.Mesh), e.skysphere.visible = !1, e.loadComplete = e.scene.visible = !u, window.scene = e.scene }, update: function (t, e) { if (t.width && t.height && (e.hasOwnProperty("width") || e.hasOwnProperty("height")) && (t.container.style.width = "".concat(t.width, "px"), t.container.style.height = "".concat(t.height, "px"), [t.renderer, t.postProcessingComposer].concat(yp(t.extraRenderers)).forEach((function (e) { return e.setSize(t.width, t.height) })), t.camera.aspect = t.width / t.height, t.camera.updateProjectionMatrix()), e.hasOwnProperty("skyRadius") && t.skyRadius && (t.controls.hasOwnProperty("maxDistance") && e.skyRadius && (t.controls.maxDistance = Math.min(t.controls.maxDistance, t.skyRadius)), t.camera.far = 2.5 * t.skyRadius, t.camera.updateProjectionMatrix(), t.skysphere.geometry = new wp.SphereGeometry(t.skyRadius)), e.hasOwnProperty("backgroundColor")) { var n = Yd(t.backgroundColor).alpha; void 0 === n && (n = 1), t.renderer.setClearColor(new wp.Color(ep(1, t.backgroundColor)), n) } function i() { t.loadComplete = t.scene.visible = !0 } e.hasOwnProperty("backgroundImageUrl") && (t.backgroundImageUrl ? (new wp.TextureLoader).load(t.backgroundImageUrl, (function (e) { t.skysphere.material = new wp.MeshBasicMaterial({ map: e, side: wp.BackSide }), t.skysphere.visible = !0, t.onBackgroundImageLoaded && setTimeout(t.onBackgroundImageLoaded), !t.loadComplete && i() })) : (t.skysphere.visible = !1, t.skysphere.material.map = null, !t.loadComplete && i())), e.hasOwnProperty("showNavInfo") && (t.navInfo.style.display = t.showNavInfo ? null : "none"), e.hasOwnProperty("objects") && ((e.objects || []).forEach((function (e) { return t.scene.remove(e) })), t.objects.forEach((function (e) { return t.scene.add(e) }))) } }); function Sp(t, e) { var n = new e; return { linkProp: function (e) { return { default: n[e](), onChange: function (n, i) { i[t][e](n) }, triggerUpdate: !1 } }, linkMethod: function (e) { return function (n) { for (var i = n[t], r = arguments.length, a = new Array(r > 1 ? r - 1 : 0), o = 1; o < r; o++)a[o - 1] = arguments[o]; var s = i[e].apply(i, a); return s === i ? this : s } } } } var Ep = window.THREE ? window.THREE : { AmbientLight: class extends Ns { constructor(t, e) { super(t, e), this.isAmbientLight = !0, this.type = "AmbientLight" } }, DirectionalLight: class extends Ns { constructor(t, e) { super(t, e), this.isDirectionalLight = !0, this.type = "DirectionalLight", this.position.copy(li.DEFAULT_UP), this.updateMatrix(), this.target = new li, this.shadow = new Bs } dispose() { this.shadow.dispose() } copy(t) { return super.copy(t), this.target = t.target.clone(), this.shadow = t.shadow.clone(), this } }, Vector3: Ge }, Tp = Sp("forceGraph", od), Ap = Object.assign.apply(Object, i(["jsonUrl", "graphData", "numDimensions", "dagMode", "dagLevelDistance", "dagNodeFilter", "onDagError", "nodeRelSize", "nodeId", "nodeVal", "nodeResolution", "nodeColor", "nodeAutoColorBy", "nodeOpacity", "nodeVisibility", "nodeThreeObject", "nodeThreeObjectExtend", "linkSource", "linkTarget", "linkVisibility", "linkColor", "linkAutoColorBy", "linkOpacity", "linkWidth", "linkResolution", "linkCurvature", "linkCurveRotation", "linkMaterial", "linkThreeObject", "linkThreeObjectExtend", "linkPositionUpdate", "linkDirectionalArrowLength", "linkDirectionalArrowColor", "linkDirectionalArrowRelPos", "linkDirectionalArrowResolution", "linkDirectionalParticles", "linkDirectionalParticleSpeed", "linkDirectionalParticleWidth", "linkDirectionalParticleColor", "linkDirectionalParticleResolution", "forceEngine", "d3AlphaDecay", "d3VelocityDecay", "d3AlphaMin", "ngraphPhysics", "warmupTicks", "cooldownTicks", "cooldownTime", "onEngineTick", "onEngineStop"].map((function (t) { return n({}, t, Tp.linkProp(t)) })))), Cp = Object.assign.apply(Object, i(["refresh", "getGraphBbox", "d3Force", "d3ReheatSimulation", "emitParticle"].map((function (t) { return n({}, t, Tp.linkMethod(t)) })))), Lp = Sp("renderObjs", Mp), Pp = Object.assign.apply(Object, i(["width", "height", "backgroundColor", "showNavInfo", "enablePointerInteraction"].map((function (t) { return n({}, t, Lp.linkProp(t)) })))), Rp = Object.assign.apply(Object, i(["cameraPosition", "postProcessingComposer"].map((function (t) { return n({}, t, Lp.linkMethod(t)) }))).concat([{ graph2ScreenCoords: Lp.linkMethod("getScreenCoords"), screen2GraphCoords: Lp.linkMethod("getSceneCoords") }])), Dp = bu({ props: e(e({ nodeLabel: { default: "name", triggerUpdate: !1 }, linkLabel: { default: "name", triggerUpdate: !1 }, linkHoverPrecision: { default: 1, onChange: function (t, e) { return e.renderObjs.lineHoverPrecision(t) }, triggerUpdate: !1 }, enableNavigationControls: { default: !0, onChange: function (t, e) { var n = e.renderObjs.controls(); n && (n.enabled = t, t && n.domElement && n.domElement.dispatchEvent(new PointerEvent("pointerup"))) }, triggerUpdate: !1 }, enableNodeDrag: { default: !0, triggerUpdate: !1 }, onNodeDrag: { default: function () { }, triggerUpdate: !1 }, onNodeDragEnd: { default: function () { }, triggerUpdate: !1 }, onNodeClick: { triggerUpdate: !1 }, onNodeRightClick: { triggerUpdate: !1 }, onNodeHover: { triggerUpdate: !1 }, onLinkClick: { triggerUpdate: !1 }, onLinkRightClick: { triggerUpdate: !1 }, onLinkHover: { triggerUpdate: !1 }, onBackgroundClick: { triggerUpdate: !1 }, onBackgroundRightClick: { triggerUpdate: !1 } }, Ap), Pp), methods: e(e({ zoomToFit: function (t, e, n) { for (var i, r = arguments.length, a = new Array(r > 3 ? r - 3 : 0), o = 3; o < r; o++)a[o - 3] = arguments[o]; return t.renderObjs.fitToBbox((i = t.forceGraph).getGraphBbox.apply(i, a), e, n), this }, pauseAnimation: function (t) { return null !== t.animationFrameRequestId && (cancelAnimationFrame(t.animationFrameRequestId), t.animationFrameRequestId = null), this }, resumeAnimation: function (t) { return null === t.animationFrameRequestId && this._animationCycle(), this }, _animationCycle: function (t) { t.enablePointerInteraction && (this.renderer().domElement.style.cursor = null), t.forceGraph.tickFrame(), t.renderObjs.tick(), t.animationFrameRequestId = requestAnimationFrame(this._animationCycle) }, scene: function (t) { return t.renderObjs.scene() }, camera: function (t) { return t.renderObjs.camera() }, renderer: function (t) { return t.renderObjs.renderer() }, controls: function (t) { return t.renderObjs.controls() }, tbControls: function (t) { return t.renderObjs.tbControls() }, _destructor: function () { this.pauseAnimation(), this.graphData({ nodes: [], links: [] }) } }, Cp), Rp), stateInit: function (t) { var e = t.controlType, n = t.rendererConfig, i = t.extraRenderers; return { forceGraph: new od, renderObjs: Mp({ controlType: e, rendererConfig: n, extraRenderers: i }) } }, init: function (t, e) { t.innerHTML = "", t.appendChild(e.container = document.createElement("div")), e.container.style.position = "relative"; var n = document.createElement("div"); e.container.appendChild(n), e.renderObjs(n); var i, r = e.renderObjs.camera(), a = e.renderObjs.renderer(), o = e.renderObjs.controls(); o.enabled = !!e.enableNavigationControls, e.lastSetCameraZ = r.position.z, e.container.appendChild(i = document.createElement("div")), i.className = "graph-info-msg", i.textContent = "", e.forceGraph.onLoading((function () { i.textContent = "Loading..." })).onFinishLoading((function () { i.textContent = "" })).onUpdate((function () { e.graphData = e.forceGraph.graphData(), 0 === r.position.x && 0 === r.position.y && r.position.z === e.lastSetCameraZ && e.graphData.nodes.length && (r.lookAt(e.forceGraph.position), e.lastSetCameraZ = r.position.z = 170 * Math.cbrt(e.graphData.nodes.length)) })).onFinishUpdate((function () { if (e._dragControls) { var t = e.graphData.nodes.find((function (t) { return t.__initialFixedPos && !t.__disposeControlsAfterDrag })); t ? t.__disposeControlsAfterDrag = !0 : e._dragControls.dispose(), e._dragControls = void 0 } if (e.enableNodeDrag && e.enablePointerInteraction && "d3" === e.forceEngine) { var n = e._dragControls = new tl(e.graphData.nodes.map((function (t) { return t.__threeObj })).filter((function (t) { return t })), r, a.domElement); n.addEventListener("dragstart", (function (t) { o.enabled = !1, t.object.__initialPos = t.object.position.clone(), t.object.__prevPos = t.object.position.clone(); var e = Op(t.object).__data; !e.__initialFixedPos && (e.__initialFixedPos = { fx: e.fx, fy: e.fy, fz: e.fz }), !e.__initialPos && (e.__initialPos = { x: e.x, y: e.y, z: e.z }), ["x", "y", "z"].forEach((function (t) { return e["f".concat(t)] = e[t] })), a.domElement.classList.add("grabbable") })), n.addEventListener("drag", (function (t) { var n = Op(t.object); if (!t.object.hasOwnProperty("__graphObjType")) { var i = t.object.__initialPos, r = t.object.__prevPos, a = t.object.position; n.position.add(a.clone().sub(r)), r.copy(a), a.copy(i) } var o = n.__data, s = n.position, l = { x: s.x - o.x, y: s.y - o.y, z: s.z - o.z };["x", "y", "z"].forEach((function (t) { return o["f".concat(t)] = o[t] = s[t] })), e.forceGraph.d3AlphaTarget(.3).resetCountdown(), o.__dragged = !0, e.onNodeDrag(o, l) })), n.addEventListener("dragend", (function (t) { delete t.object.__initialPos, delete t.object.__prevPos; var i = Op(t.object).__data; i.__disposeControlsAfterDrag && (n.dispose(), delete i.__disposeControlsAfterDrag); var r = i.__initialFixedPos, s = i.__initialPos, l = { x: s.x - i.x, y: s.y - i.y, z: s.z - i.z }; r && (["x", "y", "z"].forEach((function (t) { var e = "f".concat(t); void 0 === r[e] && delete i[e] })), delete i.__initialFixedPos, delete i.__initialPos, i.__dragged && (delete i.__dragged, e.onNodeDragEnd(i, l))), e.forceGraph.d3AlphaTarget(0).resetCountdown(), e.enableNavigationControls && (o.enabled = !0, o.domElement && o.domElement.ownerDocument && o.domElement.ownerDocument.dispatchEvent(new PointerEvent("pointerup", { pointerType: "touch" }))), a.domElement.classList.remove("grabbable") })) } })), e.renderObjs.objects([new Ep.AmbientLight(12303291), new Ep.DirectionalLight(16777215, .6), e.forceGraph]).hoverOrderComparator((function (t, e) { var n = Op(t); if (!n) return 1; var i = Op(e); if (!i) return -1; var r = function (t) { return "node" === t.__graphObjType }; return r(i) - r(n) })).tooltipContent((function (t) { var n = Op(t); return n && wu(e["".concat(n.__graphObjType, "Label")])(n.__data) || "" })).hoverDuringDrag(!1).onHover((function (t) { var n = Op(t); if (n !== e.hoverObj) { var i = e.hoverObj ? e.hoverObj.__graphObjType : null, r = e.hoverObj ? e.hoverObj.__data : null, o = n ? n.__graphObjType : null, s = n ? n.__data : null; if (i && i !== o) { var l = e["on".concat("node" === i ? "Node" : "Link", "Hover")]; l && l(null, r) } if (o) { var c = e["on".concat("node" === o ? "Node" : "Link", "Hover")]; c && c(s, i === o ? r : null) } a.domElement.classList[n && e["on".concat("node" === o ? "Node" : "Link", "Click")] || !n && e.onBackgroundClick ? "add" : "remove"]("clickable"), e.hoverObj = n } })).clickAfterDrag(!1).onClick((function (t, n) { var i = Op(t); if (i) { var r = e["on".concat("node" === i.__graphObjType ? "Node" : "Link", "Click")]; r && r(i.__data, n) } else e.onBackgroundClick && e.onBackgroundClick(n) })).onRightClick((function (t, n) { var i = Op(t); if (i) { var r = e["on".concat("node" === i.__graphObjType ? "Node" : "Link", "RightClick")]; r && r(i.__data, n) } else e.onBackgroundRightClick && e.onBackgroundRightClick(n) })), this._animationCycle() } }); function Op(t) { for (var e = t; e && !e.hasOwnProperty("__graphObjType");)e = e.parent; return e } return Dp
}));